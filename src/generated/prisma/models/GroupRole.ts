
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `GroupRole` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model GroupRole
 * 
 */
export type GroupRoleModel = runtime.Types.Result.DefaultSelection<Prisma.$GroupRolePayload>

export type AggregateGroupRole = {
  _count: GroupRoleCountAggregateOutputType | null
  _min: GroupRoleMinAggregateOutputType | null
  _max: GroupRoleMaxAggregateOutputType | null
}

export type GroupRoleMinAggregateOutputType = {
  groupId: string | null
  roleId: string | null
  status: $Enums.RoleStatus | null
}

export type GroupRoleMaxAggregateOutputType = {
  groupId: string | null
  roleId: string | null
  status: $Enums.RoleStatus | null
}

export type GroupRoleCountAggregateOutputType = {
  groupId: number
  roleId: number
  status: number
  _all: number
}


export type GroupRoleMinAggregateInputType = {
  groupId?: true
  roleId?: true
  status?: true
}

export type GroupRoleMaxAggregateInputType = {
  groupId?: true
  roleId?: true
  status?: true
}

export type GroupRoleCountAggregateInputType = {
  groupId?: true
  roleId?: true
  status?: true
  _all?: true
}

export type GroupRoleAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GroupRole to aggregate.
   */
  where?: Prisma.GroupRoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GroupRoles to fetch.
   */
  orderBy?: Prisma.GroupRoleOrderByWithRelationInput | Prisma.GroupRoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GroupRoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GroupRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GroupRoles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned GroupRoles
  **/
  _count?: true | GroupRoleCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GroupRoleMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GroupRoleMaxAggregateInputType
}

export type GetGroupRoleAggregateType<T extends GroupRoleAggregateArgs> = {
      [P in keyof T & keyof AggregateGroupRole]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGroupRole[P]>
    : Prisma.GetScalarType<T[P], AggregateGroupRole[P]>
}




export type GroupRoleGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GroupRoleWhereInput
  orderBy?: Prisma.GroupRoleOrderByWithAggregationInput | Prisma.GroupRoleOrderByWithAggregationInput[]
  by: Prisma.GroupRoleScalarFieldEnum[] | Prisma.GroupRoleScalarFieldEnum
  having?: Prisma.GroupRoleScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GroupRoleCountAggregateInputType | true
  _min?: GroupRoleMinAggregateInputType
  _max?: GroupRoleMaxAggregateInputType
}

export type GroupRoleGroupByOutputType = {
  groupId: string
  roleId: string
  status: $Enums.RoleStatus
  _count: GroupRoleCountAggregateOutputType | null
  _min: GroupRoleMinAggregateOutputType | null
  _max: GroupRoleMaxAggregateOutputType | null
}

type GetGroupRoleGroupByPayload<T extends GroupRoleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GroupRoleGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GroupRoleGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GroupRoleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GroupRoleGroupByOutputType[P]>
      }
    >
  >



export type GroupRoleWhereInput = {
  AND?: Prisma.GroupRoleWhereInput | Prisma.GroupRoleWhereInput[]
  OR?: Prisma.GroupRoleWhereInput[]
  NOT?: Prisma.GroupRoleWhereInput | Prisma.GroupRoleWhereInput[]
  groupId?: Prisma.UuidFilter<"GroupRole"> | string
  roleId?: Prisma.UuidFilter<"GroupRole"> | string
  status?: Prisma.EnumRoleStatusFilter<"GroupRole"> | $Enums.RoleStatus
  group?: Prisma.XOR<Prisma.GroupScalarRelationFilter, Prisma.GroupWhereInput>
  role?: Prisma.XOR<Prisma.RoleScalarRelationFilter, Prisma.RoleWhereInput>
}

export type GroupRoleOrderByWithRelationInput = {
  groupId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  group?: Prisma.GroupOrderByWithRelationInput
  role?: Prisma.RoleOrderByWithRelationInput
  _relevance?: Prisma.GroupRoleOrderByRelevanceInput
}

export type GroupRoleWhereUniqueInput = Prisma.AtLeast<{
  groupId_roleId?: Prisma.GroupRoleGroupIdRoleIdCompoundUniqueInput
  AND?: Prisma.GroupRoleWhereInput | Prisma.GroupRoleWhereInput[]
  OR?: Prisma.GroupRoleWhereInput[]
  NOT?: Prisma.GroupRoleWhereInput | Prisma.GroupRoleWhereInput[]
  groupId?: Prisma.UuidFilter<"GroupRole"> | string
  roleId?: Prisma.UuidFilter<"GroupRole"> | string
  status?: Prisma.EnumRoleStatusFilter<"GroupRole"> | $Enums.RoleStatus
  group?: Prisma.XOR<Prisma.GroupScalarRelationFilter, Prisma.GroupWhereInput>
  role?: Prisma.XOR<Prisma.RoleScalarRelationFilter, Prisma.RoleWhereInput>
}, "groupId_roleId">

export type GroupRoleOrderByWithAggregationInput = {
  groupId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  _count?: Prisma.GroupRoleCountOrderByAggregateInput
  _max?: Prisma.GroupRoleMaxOrderByAggregateInput
  _min?: Prisma.GroupRoleMinOrderByAggregateInput
}

export type GroupRoleScalarWhereWithAggregatesInput = {
  AND?: Prisma.GroupRoleScalarWhereWithAggregatesInput | Prisma.GroupRoleScalarWhereWithAggregatesInput[]
  OR?: Prisma.GroupRoleScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GroupRoleScalarWhereWithAggregatesInput | Prisma.GroupRoleScalarWhereWithAggregatesInput[]
  groupId?: Prisma.UuidWithAggregatesFilter<"GroupRole"> | string
  roleId?: Prisma.UuidWithAggregatesFilter<"GroupRole"> | string
  status?: Prisma.EnumRoleStatusWithAggregatesFilter<"GroupRole"> | $Enums.RoleStatus
}

export type GroupRoleCreateInput = {
  status?: $Enums.RoleStatus
  group: Prisma.GroupCreateNestedOneWithoutRolesInput
  role: Prisma.RoleCreateNestedOneWithoutGroupsInput
}

export type GroupRoleUncheckedCreateInput = {
  groupId: string
  roleId: string
  status?: $Enums.RoleStatus
}

export type GroupRoleUpdateInput = {
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
  group?: Prisma.GroupUpdateOneRequiredWithoutRolesNestedInput
  role?: Prisma.RoleUpdateOneRequiredWithoutGroupsNestedInput
}

export type GroupRoleUncheckedUpdateInput = {
  groupId?: Prisma.StringFieldUpdateOperationsInput | string
  roleId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
}

export type GroupRoleCreateManyInput = {
  groupId: string
  roleId: string
  status?: $Enums.RoleStatus
}

export type GroupRoleUpdateManyMutationInput = {
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
}

export type GroupRoleUncheckedUpdateManyInput = {
  groupId?: Prisma.StringFieldUpdateOperationsInput | string
  roleId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
}

export type GroupRoleListRelationFilter = {
  every?: Prisma.GroupRoleWhereInput
  some?: Prisma.GroupRoleWhereInput
  none?: Prisma.GroupRoleWhereInput
}

export type GroupRoleOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type GroupRoleOrderByRelevanceInput = {
  fields: Prisma.GroupRoleOrderByRelevanceFieldEnum | Prisma.GroupRoleOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type GroupRoleGroupIdRoleIdCompoundUniqueInput = {
  groupId: string
  roleId: string
}

export type GroupRoleCountOrderByAggregateInput = {
  groupId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type GroupRoleMaxOrderByAggregateInput = {
  groupId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type GroupRoleMinOrderByAggregateInput = {
  groupId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type GroupRoleCreateNestedManyWithoutRoleInput = {
  create?: Prisma.XOR<Prisma.GroupRoleCreateWithoutRoleInput, Prisma.GroupRoleUncheckedCreateWithoutRoleInput> | Prisma.GroupRoleCreateWithoutRoleInput[] | Prisma.GroupRoleUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.GroupRoleCreateOrConnectWithoutRoleInput | Prisma.GroupRoleCreateOrConnectWithoutRoleInput[]
  createMany?: Prisma.GroupRoleCreateManyRoleInputEnvelope
  connect?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
}

export type GroupRoleUncheckedCreateNestedManyWithoutRoleInput = {
  create?: Prisma.XOR<Prisma.GroupRoleCreateWithoutRoleInput, Prisma.GroupRoleUncheckedCreateWithoutRoleInput> | Prisma.GroupRoleCreateWithoutRoleInput[] | Prisma.GroupRoleUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.GroupRoleCreateOrConnectWithoutRoleInput | Prisma.GroupRoleCreateOrConnectWithoutRoleInput[]
  createMany?: Prisma.GroupRoleCreateManyRoleInputEnvelope
  connect?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
}

export type GroupRoleUpdateManyWithoutRoleNestedInput = {
  create?: Prisma.XOR<Prisma.GroupRoleCreateWithoutRoleInput, Prisma.GroupRoleUncheckedCreateWithoutRoleInput> | Prisma.GroupRoleCreateWithoutRoleInput[] | Prisma.GroupRoleUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.GroupRoleCreateOrConnectWithoutRoleInput | Prisma.GroupRoleCreateOrConnectWithoutRoleInput[]
  upsert?: Prisma.GroupRoleUpsertWithWhereUniqueWithoutRoleInput | Prisma.GroupRoleUpsertWithWhereUniqueWithoutRoleInput[]
  createMany?: Prisma.GroupRoleCreateManyRoleInputEnvelope
  set?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
  disconnect?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
  delete?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
  connect?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
  update?: Prisma.GroupRoleUpdateWithWhereUniqueWithoutRoleInput | Prisma.GroupRoleUpdateWithWhereUniqueWithoutRoleInput[]
  updateMany?: Prisma.GroupRoleUpdateManyWithWhereWithoutRoleInput | Prisma.GroupRoleUpdateManyWithWhereWithoutRoleInput[]
  deleteMany?: Prisma.GroupRoleScalarWhereInput | Prisma.GroupRoleScalarWhereInput[]
}

export type GroupRoleUncheckedUpdateManyWithoutRoleNestedInput = {
  create?: Prisma.XOR<Prisma.GroupRoleCreateWithoutRoleInput, Prisma.GroupRoleUncheckedCreateWithoutRoleInput> | Prisma.GroupRoleCreateWithoutRoleInput[] | Prisma.GroupRoleUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.GroupRoleCreateOrConnectWithoutRoleInput | Prisma.GroupRoleCreateOrConnectWithoutRoleInput[]
  upsert?: Prisma.GroupRoleUpsertWithWhereUniqueWithoutRoleInput | Prisma.GroupRoleUpsertWithWhereUniqueWithoutRoleInput[]
  createMany?: Prisma.GroupRoleCreateManyRoleInputEnvelope
  set?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
  disconnect?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
  delete?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
  connect?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
  update?: Prisma.GroupRoleUpdateWithWhereUniqueWithoutRoleInput | Prisma.GroupRoleUpdateWithWhereUniqueWithoutRoleInput[]
  updateMany?: Prisma.GroupRoleUpdateManyWithWhereWithoutRoleInput | Prisma.GroupRoleUpdateManyWithWhereWithoutRoleInput[]
  deleteMany?: Prisma.GroupRoleScalarWhereInput | Prisma.GroupRoleScalarWhereInput[]
}

export type GroupRoleCreateNestedManyWithoutGroupInput = {
  create?: Prisma.XOR<Prisma.GroupRoleCreateWithoutGroupInput, Prisma.GroupRoleUncheckedCreateWithoutGroupInput> | Prisma.GroupRoleCreateWithoutGroupInput[] | Prisma.GroupRoleUncheckedCreateWithoutGroupInput[]
  connectOrCreate?: Prisma.GroupRoleCreateOrConnectWithoutGroupInput | Prisma.GroupRoleCreateOrConnectWithoutGroupInput[]
  createMany?: Prisma.GroupRoleCreateManyGroupInputEnvelope
  connect?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
}

export type GroupRoleUncheckedCreateNestedManyWithoutGroupInput = {
  create?: Prisma.XOR<Prisma.GroupRoleCreateWithoutGroupInput, Prisma.GroupRoleUncheckedCreateWithoutGroupInput> | Prisma.GroupRoleCreateWithoutGroupInput[] | Prisma.GroupRoleUncheckedCreateWithoutGroupInput[]
  connectOrCreate?: Prisma.GroupRoleCreateOrConnectWithoutGroupInput | Prisma.GroupRoleCreateOrConnectWithoutGroupInput[]
  createMany?: Prisma.GroupRoleCreateManyGroupInputEnvelope
  connect?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
}

export type GroupRoleUpdateManyWithoutGroupNestedInput = {
  create?: Prisma.XOR<Prisma.GroupRoleCreateWithoutGroupInput, Prisma.GroupRoleUncheckedCreateWithoutGroupInput> | Prisma.GroupRoleCreateWithoutGroupInput[] | Prisma.GroupRoleUncheckedCreateWithoutGroupInput[]
  connectOrCreate?: Prisma.GroupRoleCreateOrConnectWithoutGroupInput | Prisma.GroupRoleCreateOrConnectWithoutGroupInput[]
  upsert?: Prisma.GroupRoleUpsertWithWhereUniqueWithoutGroupInput | Prisma.GroupRoleUpsertWithWhereUniqueWithoutGroupInput[]
  createMany?: Prisma.GroupRoleCreateManyGroupInputEnvelope
  set?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
  disconnect?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
  delete?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
  connect?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
  update?: Prisma.GroupRoleUpdateWithWhereUniqueWithoutGroupInput | Prisma.GroupRoleUpdateWithWhereUniqueWithoutGroupInput[]
  updateMany?: Prisma.GroupRoleUpdateManyWithWhereWithoutGroupInput | Prisma.GroupRoleUpdateManyWithWhereWithoutGroupInput[]
  deleteMany?: Prisma.GroupRoleScalarWhereInput | Prisma.GroupRoleScalarWhereInput[]
}

export type GroupRoleUncheckedUpdateManyWithoutGroupNestedInput = {
  create?: Prisma.XOR<Prisma.GroupRoleCreateWithoutGroupInput, Prisma.GroupRoleUncheckedCreateWithoutGroupInput> | Prisma.GroupRoleCreateWithoutGroupInput[] | Prisma.GroupRoleUncheckedCreateWithoutGroupInput[]
  connectOrCreate?: Prisma.GroupRoleCreateOrConnectWithoutGroupInput | Prisma.GroupRoleCreateOrConnectWithoutGroupInput[]
  upsert?: Prisma.GroupRoleUpsertWithWhereUniqueWithoutGroupInput | Prisma.GroupRoleUpsertWithWhereUniqueWithoutGroupInput[]
  createMany?: Prisma.GroupRoleCreateManyGroupInputEnvelope
  set?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
  disconnect?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
  delete?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
  connect?: Prisma.GroupRoleWhereUniqueInput | Prisma.GroupRoleWhereUniqueInput[]
  update?: Prisma.GroupRoleUpdateWithWhereUniqueWithoutGroupInput | Prisma.GroupRoleUpdateWithWhereUniqueWithoutGroupInput[]
  updateMany?: Prisma.GroupRoleUpdateManyWithWhereWithoutGroupInput | Prisma.GroupRoleUpdateManyWithWhereWithoutGroupInput[]
  deleteMany?: Prisma.GroupRoleScalarWhereInput | Prisma.GroupRoleScalarWhereInput[]
}

export type GroupRoleCreateWithoutRoleInput = {
  status?: $Enums.RoleStatus
  group: Prisma.GroupCreateNestedOneWithoutRolesInput
}

export type GroupRoleUncheckedCreateWithoutRoleInput = {
  groupId: string
  status?: $Enums.RoleStatus
}

export type GroupRoleCreateOrConnectWithoutRoleInput = {
  where: Prisma.GroupRoleWhereUniqueInput
  create: Prisma.XOR<Prisma.GroupRoleCreateWithoutRoleInput, Prisma.GroupRoleUncheckedCreateWithoutRoleInput>
}

export type GroupRoleCreateManyRoleInputEnvelope = {
  data: Prisma.GroupRoleCreateManyRoleInput | Prisma.GroupRoleCreateManyRoleInput[]
  skipDuplicates?: boolean
}

export type GroupRoleUpsertWithWhereUniqueWithoutRoleInput = {
  where: Prisma.GroupRoleWhereUniqueInput
  update: Prisma.XOR<Prisma.GroupRoleUpdateWithoutRoleInput, Prisma.GroupRoleUncheckedUpdateWithoutRoleInput>
  create: Prisma.XOR<Prisma.GroupRoleCreateWithoutRoleInput, Prisma.GroupRoleUncheckedCreateWithoutRoleInput>
}

export type GroupRoleUpdateWithWhereUniqueWithoutRoleInput = {
  where: Prisma.GroupRoleWhereUniqueInput
  data: Prisma.XOR<Prisma.GroupRoleUpdateWithoutRoleInput, Prisma.GroupRoleUncheckedUpdateWithoutRoleInput>
}

export type GroupRoleUpdateManyWithWhereWithoutRoleInput = {
  where: Prisma.GroupRoleScalarWhereInput
  data: Prisma.XOR<Prisma.GroupRoleUpdateManyMutationInput, Prisma.GroupRoleUncheckedUpdateManyWithoutRoleInput>
}

export type GroupRoleScalarWhereInput = {
  AND?: Prisma.GroupRoleScalarWhereInput | Prisma.GroupRoleScalarWhereInput[]
  OR?: Prisma.GroupRoleScalarWhereInput[]
  NOT?: Prisma.GroupRoleScalarWhereInput | Prisma.GroupRoleScalarWhereInput[]
  groupId?: Prisma.UuidFilter<"GroupRole"> | string
  roleId?: Prisma.UuidFilter<"GroupRole"> | string
  status?: Prisma.EnumRoleStatusFilter<"GroupRole"> | $Enums.RoleStatus
}

export type GroupRoleCreateWithoutGroupInput = {
  status?: $Enums.RoleStatus
  role: Prisma.RoleCreateNestedOneWithoutGroupsInput
}

export type GroupRoleUncheckedCreateWithoutGroupInput = {
  roleId: string
  status?: $Enums.RoleStatus
}

export type GroupRoleCreateOrConnectWithoutGroupInput = {
  where: Prisma.GroupRoleWhereUniqueInput
  create: Prisma.XOR<Prisma.GroupRoleCreateWithoutGroupInput, Prisma.GroupRoleUncheckedCreateWithoutGroupInput>
}

export type GroupRoleCreateManyGroupInputEnvelope = {
  data: Prisma.GroupRoleCreateManyGroupInput | Prisma.GroupRoleCreateManyGroupInput[]
  skipDuplicates?: boolean
}

export type GroupRoleUpsertWithWhereUniqueWithoutGroupInput = {
  where: Prisma.GroupRoleWhereUniqueInput
  update: Prisma.XOR<Prisma.GroupRoleUpdateWithoutGroupInput, Prisma.GroupRoleUncheckedUpdateWithoutGroupInput>
  create: Prisma.XOR<Prisma.GroupRoleCreateWithoutGroupInput, Prisma.GroupRoleUncheckedCreateWithoutGroupInput>
}

export type GroupRoleUpdateWithWhereUniqueWithoutGroupInput = {
  where: Prisma.GroupRoleWhereUniqueInput
  data: Prisma.XOR<Prisma.GroupRoleUpdateWithoutGroupInput, Prisma.GroupRoleUncheckedUpdateWithoutGroupInput>
}

export type GroupRoleUpdateManyWithWhereWithoutGroupInput = {
  where: Prisma.GroupRoleScalarWhereInput
  data: Prisma.XOR<Prisma.GroupRoleUpdateManyMutationInput, Prisma.GroupRoleUncheckedUpdateManyWithoutGroupInput>
}

export type GroupRoleCreateManyRoleInput = {
  groupId: string
  status?: $Enums.RoleStatus
}

export type GroupRoleUpdateWithoutRoleInput = {
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
  group?: Prisma.GroupUpdateOneRequiredWithoutRolesNestedInput
}

export type GroupRoleUncheckedUpdateWithoutRoleInput = {
  groupId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
}

export type GroupRoleUncheckedUpdateManyWithoutRoleInput = {
  groupId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
}

export type GroupRoleCreateManyGroupInput = {
  roleId: string
  status?: $Enums.RoleStatus
}

export type GroupRoleUpdateWithoutGroupInput = {
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
  role?: Prisma.RoleUpdateOneRequiredWithoutGroupsNestedInput
}

export type GroupRoleUncheckedUpdateWithoutGroupInput = {
  roleId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
}

export type GroupRoleUncheckedUpdateManyWithoutGroupInput = {
  roleId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
}



export type GroupRoleSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  groupId?: boolean
  roleId?: boolean
  status?: boolean
  group?: boolean | Prisma.GroupDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["groupRole"]>

export type GroupRoleSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  groupId?: boolean
  roleId?: boolean
  status?: boolean
  group?: boolean | Prisma.GroupDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["groupRole"]>

export type GroupRoleSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  groupId?: boolean
  roleId?: boolean
  status?: boolean
  group?: boolean | Prisma.GroupDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["groupRole"]>

export type GroupRoleSelectScalar = {
  groupId?: boolean
  roleId?: boolean
  status?: boolean
}

export type GroupRoleOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"groupId" | "roleId" | "status", ExtArgs["result"]["groupRole"]>
export type GroupRoleInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  group?: boolean | Prisma.GroupDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}
export type GroupRoleIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  group?: boolean | Prisma.GroupDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}
export type GroupRoleIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  group?: boolean | Prisma.GroupDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}

export type $GroupRolePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "GroupRole"
  objects: {
    group: Prisma.$GroupPayload<ExtArgs>
    role: Prisma.$RolePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    groupId: string
    roleId: string
    status: $Enums.RoleStatus
  }, ExtArgs["result"]["groupRole"]>
  composites: {}
}

export type GroupRoleGetPayload<S extends boolean | null | undefined | GroupRoleDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GroupRolePayload, S>

export type GroupRoleCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GroupRoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: GroupRoleCountAggregateInputType | true
  }

export interface GroupRoleDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GroupRole'], meta: { name: 'GroupRole' } }
  /**
   * Find zero or one GroupRole that matches the filter.
   * @param {GroupRoleFindUniqueArgs} args - Arguments to find a GroupRole
   * @example
   * // Get one GroupRole
   * const groupRole = await prisma.groupRole.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GroupRoleFindUniqueArgs>(args: Prisma.SelectSubset<T, GroupRoleFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GroupRoleClient<runtime.Types.Result.GetResult<Prisma.$GroupRolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one GroupRole that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GroupRoleFindUniqueOrThrowArgs} args - Arguments to find a GroupRole
   * @example
   * // Get one GroupRole
   * const groupRole = await prisma.groupRole.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GroupRoleFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GroupRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GroupRoleClient<runtime.Types.Result.GetResult<Prisma.$GroupRolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GroupRole that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupRoleFindFirstArgs} args - Arguments to find a GroupRole
   * @example
   * // Get one GroupRole
   * const groupRole = await prisma.groupRole.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GroupRoleFindFirstArgs>(args?: Prisma.SelectSubset<T, GroupRoleFindFirstArgs<ExtArgs>>): Prisma.Prisma__GroupRoleClient<runtime.Types.Result.GetResult<Prisma.$GroupRolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GroupRole that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupRoleFindFirstOrThrowArgs} args - Arguments to find a GroupRole
   * @example
   * // Get one GroupRole
   * const groupRole = await prisma.groupRole.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GroupRoleFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GroupRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GroupRoleClient<runtime.Types.Result.GetResult<Prisma.$GroupRolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more GroupRoles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupRoleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all GroupRoles
   * const groupRoles = await prisma.groupRole.findMany()
   * 
   * // Get first 10 GroupRoles
   * const groupRoles = await prisma.groupRole.findMany({ take: 10 })
   * 
   * // Only select the `groupId`
   * const groupRoleWithGroupIdOnly = await prisma.groupRole.findMany({ select: { groupId: true } })
   * 
   */
  findMany<T extends GroupRoleFindManyArgs>(args?: Prisma.SelectSubset<T, GroupRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GroupRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a GroupRole.
   * @param {GroupRoleCreateArgs} args - Arguments to create a GroupRole.
   * @example
   * // Create one GroupRole
   * const GroupRole = await prisma.groupRole.create({
   *   data: {
   *     // ... data to create a GroupRole
   *   }
   * })
   * 
   */
  create<T extends GroupRoleCreateArgs>(args: Prisma.SelectSubset<T, GroupRoleCreateArgs<ExtArgs>>): Prisma.Prisma__GroupRoleClient<runtime.Types.Result.GetResult<Prisma.$GroupRolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many GroupRoles.
   * @param {GroupRoleCreateManyArgs} args - Arguments to create many GroupRoles.
   * @example
   * // Create many GroupRoles
   * const groupRole = await prisma.groupRole.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GroupRoleCreateManyArgs>(args?: Prisma.SelectSubset<T, GroupRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many GroupRoles and returns the data saved in the database.
   * @param {GroupRoleCreateManyAndReturnArgs} args - Arguments to create many GroupRoles.
   * @example
   * // Create many GroupRoles
   * const groupRole = await prisma.groupRole.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many GroupRoles and only return the `groupId`
   * const groupRoleWithGroupIdOnly = await prisma.groupRole.createManyAndReturn({
   *   select: { groupId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GroupRoleCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GroupRoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GroupRolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a GroupRole.
   * @param {GroupRoleDeleteArgs} args - Arguments to delete one GroupRole.
   * @example
   * // Delete one GroupRole
   * const GroupRole = await prisma.groupRole.delete({
   *   where: {
   *     // ... filter to delete one GroupRole
   *   }
   * })
   * 
   */
  delete<T extends GroupRoleDeleteArgs>(args: Prisma.SelectSubset<T, GroupRoleDeleteArgs<ExtArgs>>): Prisma.Prisma__GroupRoleClient<runtime.Types.Result.GetResult<Prisma.$GroupRolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one GroupRole.
   * @param {GroupRoleUpdateArgs} args - Arguments to update one GroupRole.
   * @example
   * // Update one GroupRole
   * const groupRole = await prisma.groupRole.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GroupRoleUpdateArgs>(args: Prisma.SelectSubset<T, GroupRoleUpdateArgs<ExtArgs>>): Prisma.Prisma__GroupRoleClient<runtime.Types.Result.GetResult<Prisma.$GroupRolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more GroupRoles.
   * @param {GroupRoleDeleteManyArgs} args - Arguments to filter GroupRoles to delete.
   * @example
   * // Delete a few GroupRoles
   * const { count } = await prisma.groupRole.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GroupRoleDeleteManyArgs>(args?: Prisma.SelectSubset<T, GroupRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GroupRoles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupRoleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many GroupRoles
   * const groupRole = await prisma.groupRole.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GroupRoleUpdateManyArgs>(args: Prisma.SelectSubset<T, GroupRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GroupRoles and returns the data updated in the database.
   * @param {GroupRoleUpdateManyAndReturnArgs} args - Arguments to update many GroupRoles.
   * @example
   * // Update many GroupRoles
   * const groupRole = await prisma.groupRole.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more GroupRoles and only return the `groupId`
   * const groupRoleWithGroupIdOnly = await prisma.groupRole.updateManyAndReturn({
   *   select: { groupId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GroupRoleUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GroupRoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GroupRolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one GroupRole.
   * @param {GroupRoleUpsertArgs} args - Arguments to update or create a GroupRole.
   * @example
   * // Update or create a GroupRole
   * const groupRole = await prisma.groupRole.upsert({
   *   create: {
   *     // ... data to create a GroupRole
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the GroupRole we want to update
   *   }
   * })
   */
  upsert<T extends GroupRoleUpsertArgs>(args: Prisma.SelectSubset<T, GroupRoleUpsertArgs<ExtArgs>>): Prisma.Prisma__GroupRoleClient<runtime.Types.Result.GetResult<Prisma.$GroupRolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of GroupRoles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupRoleCountArgs} args - Arguments to filter GroupRoles to count.
   * @example
   * // Count the number of GroupRoles
   * const count = await prisma.groupRole.count({
   *   where: {
   *     // ... the filter for the GroupRoles we want to count
   *   }
   * })
  **/
  count<T extends GroupRoleCountArgs>(
    args?: Prisma.Subset<T, GroupRoleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GroupRoleCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a GroupRole.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GroupRoleAggregateArgs>(args: Prisma.Subset<T, GroupRoleAggregateArgs>): Prisma.PrismaPromise<GetGroupRoleAggregateType<T>>

  /**
   * Group by GroupRole.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupRoleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GroupRoleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GroupRoleGroupByArgs['orderBy'] }
      : { orderBy?: GroupRoleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GroupRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the GroupRole model
 */
readonly fields: GroupRoleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for GroupRole.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GroupRoleClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  group<T extends Prisma.GroupDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GroupDefaultArgs<ExtArgs>>): Prisma.Prisma__GroupClient<runtime.Types.Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  role<T extends Prisma.RoleDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RoleDefaultArgs<ExtArgs>>): Prisma.Prisma__RoleClient<runtime.Types.Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the GroupRole model
 */
export interface GroupRoleFieldRefs {
  readonly groupId: Prisma.FieldRef<"GroupRole", 'String'>
  readonly roleId: Prisma.FieldRef<"GroupRole", 'String'>
  readonly status: Prisma.FieldRef<"GroupRole", 'RoleStatus'>
}
    

// Custom InputTypes
/**
 * GroupRole findUnique
 */
export type GroupRoleFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupRole
   */
  select?: Prisma.GroupRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupRole
   */
  omit?: Prisma.GroupRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupRoleInclude<ExtArgs> | null
  /**
   * Filter, which GroupRole to fetch.
   */
  where: Prisma.GroupRoleWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * GroupRole findUniqueOrThrow
 */
export type GroupRoleFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupRole
   */
  select?: Prisma.GroupRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupRole
   */
  omit?: Prisma.GroupRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupRoleInclude<ExtArgs> | null
  /**
   * Filter, which GroupRole to fetch.
   */
  where: Prisma.GroupRoleWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * GroupRole findFirst
 */
export type GroupRoleFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupRole
   */
  select?: Prisma.GroupRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupRole
   */
  omit?: Prisma.GroupRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupRoleInclude<ExtArgs> | null
  /**
   * Filter, which GroupRole to fetch.
   */
  where?: Prisma.GroupRoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GroupRoles to fetch.
   */
  orderBy?: Prisma.GroupRoleOrderByWithRelationInput | Prisma.GroupRoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GroupRoles.
   */
  cursor?: Prisma.GroupRoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GroupRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GroupRoles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GroupRoles.
   */
  distinct?: Prisma.GroupRoleScalarFieldEnum | Prisma.GroupRoleScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * GroupRole findFirstOrThrow
 */
export type GroupRoleFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupRole
   */
  select?: Prisma.GroupRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupRole
   */
  omit?: Prisma.GroupRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupRoleInclude<ExtArgs> | null
  /**
   * Filter, which GroupRole to fetch.
   */
  where?: Prisma.GroupRoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GroupRoles to fetch.
   */
  orderBy?: Prisma.GroupRoleOrderByWithRelationInput | Prisma.GroupRoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GroupRoles.
   */
  cursor?: Prisma.GroupRoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GroupRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GroupRoles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GroupRoles.
   */
  distinct?: Prisma.GroupRoleScalarFieldEnum | Prisma.GroupRoleScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * GroupRole findMany
 */
export type GroupRoleFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupRole
   */
  select?: Prisma.GroupRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupRole
   */
  omit?: Prisma.GroupRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupRoleInclude<ExtArgs> | null
  /**
   * Filter, which GroupRoles to fetch.
   */
  where?: Prisma.GroupRoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GroupRoles to fetch.
   */
  orderBy?: Prisma.GroupRoleOrderByWithRelationInput | Prisma.GroupRoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing GroupRoles.
   */
  cursor?: Prisma.GroupRoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GroupRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GroupRoles.
   */
  skip?: number
  distinct?: Prisma.GroupRoleScalarFieldEnum | Prisma.GroupRoleScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * GroupRole create
 */
export type GroupRoleCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupRole
   */
  select?: Prisma.GroupRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupRole
   */
  omit?: Prisma.GroupRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupRoleInclude<ExtArgs> | null
  /**
   * The data needed to create a GroupRole.
   */
  data: Prisma.XOR<Prisma.GroupRoleCreateInput, Prisma.GroupRoleUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * GroupRole createMany
 */
export type GroupRoleCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many GroupRoles.
   */
  data: Prisma.GroupRoleCreateManyInput | Prisma.GroupRoleCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * GroupRole createManyAndReturn
 */
export type GroupRoleCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupRole
   */
  select?: Prisma.GroupRoleSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GroupRole
   */
  omit?: Prisma.GroupRoleOmit<ExtArgs> | null
  /**
   * The data used to create many GroupRoles.
   */
  data: Prisma.GroupRoleCreateManyInput | Prisma.GroupRoleCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupRoleIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * GroupRole update
 */
export type GroupRoleUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupRole
   */
  select?: Prisma.GroupRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupRole
   */
  omit?: Prisma.GroupRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupRoleInclude<ExtArgs> | null
  /**
   * The data needed to update a GroupRole.
   */
  data: Prisma.XOR<Prisma.GroupRoleUpdateInput, Prisma.GroupRoleUncheckedUpdateInput>
  /**
   * Choose, which GroupRole to update.
   */
  where: Prisma.GroupRoleWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * GroupRole updateMany
 */
export type GroupRoleUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update GroupRoles.
   */
  data: Prisma.XOR<Prisma.GroupRoleUpdateManyMutationInput, Prisma.GroupRoleUncheckedUpdateManyInput>
  /**
   * Filter which GroupRoles to update
   */
  where?: Prisma.GroupRoleWhereInput
  /**
   * Limit how many GroupRoles to update.
   */
  limit?: number
}

/**
 * GroupRole updateManyAndReturn
 */
export type GroupRoleUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupRole
   */
  select?: Prisma.GroupRoleSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GroupRole
   */
  omit?: Prisma.GroupRoleOmit<ExtArgs> | null
  /**
   * The data used to update GroupRoles.
   */
  data: Prisma.XOR<Prisma.GroupRoleUpdateManyMutationInput, Prisma.GroupRoleUncheckedUpdateManyInput>
  /**
   * Filter which GroupRoles to update
   */
  where?: Prisma.GroupRoleWhereInput
  /**
   * Limit how many GroupRoles to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupRoleIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * GroupRole upsert
 */
export type GroupRoleUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupRole
   */
  select?: Prisma.GroupRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupRole
   */
  omit?: Prisma.GroupRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupRoleInclude<ExtArgs> | null
  /**
   * The filter to search for the GroupRole to update in case it exists.
   */
  where: Prisma.GroupRoleWhereUniqueInput
  /**
   * In case the GroupRole found by the `where` argument doesn't exist, create a new GroupRole with this data.
   */
  create: Prisma.XOR<Prisma.GroupRoleCreateInput, Prisma.GroupRoleUncheckedCreateInput>
  /**
   * In case the GroupRole was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GroupRoleUpdateInput, Prisma.GroupRoleUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * GroupRole delete
 */
export type GroupRoleDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupRole
   */
  select?: Prisma.GroupRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupRole
   */
  omit?: Prisma.GroupRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupRoleInclude<ExtArgs> | null
  /**
   * Filter which GroupRole to delete.
   */
  where: Prisma.GroupRoleWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * GroupRole deleteMany
 */
export type GroupRoleDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GroupRoles to delete
   */
  where?: Prisma.GroupRoleWhereInput
  /**
   * Limit how many GroupRoles to delete.
   */
  limit?: number
}

/**
 * GroupRole without action
 */
export type GroupRoleDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupRole
   */
  select?: Prisma.GroupRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupRole
   */
  omit?: Prisma.GroupRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupRoleInclude<ExtArgs> | null
}
