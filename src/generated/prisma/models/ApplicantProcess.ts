
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ApplicantProcess` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model ApplicantProcess
 * 
 */
export type ApplicantProcessModel = runtime.Types.Result.DefaultSelection<Prisma.$ApplicantProcessPayload>

export type AggregateApplicantProcess = {
  _count: ApplicantProcessCountAggregateOutputType | null
  _min: ApplicantProcessMinAggregateOutputType | null
  _max: ApplicantProcessMaxAggregateOutputType | null
}

export type ApplicantProcessMinAggregateOutputType = {
  id: string | null
  applicantId: string | null
  processId: string | null
  status: $Enums.ProcessStatus | null
  createdAt: Date | null
}

export type ApplicantProcessMaxAggregateOutputType = {
  id: string | null
  applicantId: string | null
  processId: string | null
  status: $Enums.ProcessStatus | null
  createdAt: Date | null
}

export type ApplicantProcessCountAggregateOutputType = {
  id: number
  applicantId: number
  processId: number
  status: number
  createdAt: number
  _all: number
}


export type ApplicantProcessMinAggregateInputType = {
  id?: true
  applicantId?: true
  processId?: true
  status?: true
  createdAt?: true
}

export type ApplicantProcessMaxAggregateInputType = {
  id?: true
  applicantId?: true
  processId?: true
  status?: true
  createdAt?: true
}

export type ApplicantProcessCountAggregateInputType = {
  id?: true
  applicantId?: true
  processId?: true
  status?: true
  createdAt?: true
  _all?: true
}

export type ApplicantProcessAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ApplicantProcess to aggregate.
   */
  where?: Prisma.ApplicantProcessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ApplicantProcesses to fetch.
   */
  orderBy?: Prisma.ApplicantProcessOrderByWithRelationInput | Prisma.ApplicantProcessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ApplicantProcessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ApplicantProcesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ApplicantProcesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ApplicantProcesses
  **/
  _count?: true | ApplicantProcessCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ApplicantProcessMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ApplicantProcessMaxAggregateInputType
}

export type GetApplicantProcessAggregateType<T extends ApplicantProcessAggregateArgs> = {
      [P in keyof T & keyof AggregateApplicantProcess]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateApplicantProcess[P]>
    : Prisma.GetScalarType<T[P], AggregateApplicantProcess[P]>
}




export type ApplicantProcessGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ApplicantProcessWhereInput
  orderBy?: Prisma.ApplicantProcessOrderByWithAggregationInput | Prisma.ApplicantProcessOrderByWithAggregationInput[]
  by: Prisma.ApplicantProcessScalarFieldEnum[] | Prisma.ApplicantProcessScalarFieldEnum
  having?: Prisma.ApplicantProcessScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ApplicantProcessCountAggregateInputType | true
  _min?: ApplicantProcessMinAggregateInputType
  _max?: ApplicantProcessMaxAggregateInputType
}

export type ApplicantProcessGroupByOutputType = {
  id: string
  applicantId: string
  processId: string
  status: $Enums.ProcessStatus
  createdAt: Date
  _count: ApplicantProcessCountAggregateOutputType | null
  _min: ApplicantProcessMinAggregateOutputType | null
  _max: ApplicantProcessMaxAggregateOutputType | null
}

type GetApplicantProcessGroupByPayload<T extends ApplicantProcessGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ApplicantProcessGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ApplicantProcessGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ApplicantProcessGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ApplicantProcessGroupByOutputType[P]>
      }
    >
  >



export type ApplicantProcessWhereInput = {
  AND?: Prisma.ApplicantProcessWhereInput | Prisma.ApplicantProcessWhereInput[]
  OR?: Prisma.ApplicantProcessWhereInput[]
  NOT?: Prisma.ApplicantProcessWhereInput | Prisma.ApplicantProcessWhereInput[]
  id?: Prisma.UuidFilter<"ApplicantProcess"> | string
  applicantId?: Prisma.UuidFilter<"ApplicantProcess"> | string
  processId?: Prisma.UuidFilter<"ApplicantProcess"> | string
  status?: Prisma.EnumProcessStatusFilter<"ApplicantProcess"> | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFilter<"ApplicantProcess"> | Date | string
  completedForms?: Prisma.APCompletedFormListRelationFilter
  applicant?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  process?: Prisma.XOR<Prisma.ProcessScalarRelationFilter, Prisma.ProcessWhereInput>
  processedApplications?: Prisma.ProcessedApplicationListRelationFilter
  responses?: Prisma.FormResponseListRelationFilter
  comments?: Prisma.ProcessCommentListRelationFilter
}

export type ApplicantProcessOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  applicantId?: Prisma.SortOrder
  processId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  completedForms?: Prisma.APCompletedFormOrderByRelationAggregateInput
  applicant?: Prisma.UserOrderByWithRelationInput
  process?: Prisma.ProcessOrderByWithRelationInput
  processedApplications?: Prisma.ProcessedApplicationOrderByRelationAggregateInput
  responses?: Prisma.FormResponseOrderByRelationAggregateInput
  comments?: Prisma.ProcessCommentOrderByRelationAggregateInput
  _relevance?: Prisma.ApplicantProcessOrderByRelevanceInput
}

export type ApplicantProcessWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ApplicantProcessWhereInput | Prisma.ApplicantProcessWhereInput[]
  OR?: Prisma.ApplicantProcessWhereInput[]
  NOT?: Prisma.ApplicantProcessWhereInput | Prisma.ApplicantProcessWhereInput[]
  applicantId?: Prisma.UuidFilter<"ApplicantProcess"> | string
  processId?: Prisma.UuidFilter<"ApplicantProcess"> | string
  status?: Prisma.EnumProcessStatusFilter<"ApplicantProcess"> | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFilter<"ApplicantProcess"> | Date | string
  completedForms?: Prisma.APCompletedFormListRelationFilter
  applicant?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  process?: Prisma.XOR<Prisma.ProcessScalarRelationFilter, Prisma.ProcessWhereInput>
  processedApplications?: Prisma.ProcessedApplicationListRelationFilter
  responses?: Prisma.FormResponseListRelationFilter
  comments?: Prisma.ProcessCommentListRelationFilter
}, "id">

export type ApplicantProcessOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  applicantId?: Prisma.SortOrder
  processId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ApplicantProcessCountOrderByAggregateInput
  _max?: Prisma.ApplicantProcessMaxOrderByAggregateInput
  _min?: Prisma.ApplicantProcessMinOrderByAggregateInput
}

export type ApplicantProcessScalarWhereWithAggregatesInput = {
  AND?: Prisma.ApplicantProcessScalarWhereWithAggregatesInput | Prisma.ApplicantProcessScalarWhereWithAggregatesInput[]
  OR?: Prisma.ApplicantProcessScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ApplicantProcessScalarWhereWithAggregatesInput | Prisma.ApplicantProcessScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"ApplicantProcess"> | string
  applicantId?: Prisma.UuidWithAggregatesFilter<"ApplicantProcess"> | string
  processId?: Prisma.UuidWithAggregatesFilter<"ApplicantProcess"> | string
  status?: Prisma.EnumProcessStatusWithAggregatesFilter<"ApplicantProcess"> | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ApplicantProcess"> | Date | string
}

export type ApplicantProcessCreateInput = {
  id?: string
  status?: $Enums.ProcessStatus
  createdAt?: Date | string
  completedForms?: Prisma.APCompletedFormCreateNestedManyWithoutApplicantProcessInput
  applicant: Prisma.UserCreateNestedOneWithoutApplicantProcessesInput
  process: Prisma.ProcessCreateNestedOneWithoutApplicantProcessesInput
  processedApplications?: Prisma.ProcessedApplicationCreateNestedManyWithoutApplicantProcessInput
  responses?: Prisma.FormResponseCreateNestedManyWithoutApplicantProcessInput
  comments?: Prisma.ProcessCommentCreateNestedManyWithoutApplicantProcessInput
}

export type ApplicantProcessUncheckedCreateInput = {
  id?: string
  applicantId: string
  processId: string
  status?: $Enums.ProcessStatus
  createdAt?: Date | string
  completedForms?: Prisma.APCompletedFormUncheckedCreateNestedManyWithoutApplicantProcessInput
  processedApplications?: Prisma.ProcessedApplicationUncheckedCreateNestedManyWithoutApplicantProcessInput
  responses?: Prisma.FormResponseUncheckedCreateNestedManyWithoutApplicantProcessInput
  comments?: Prisma.ProcessCommentUncheckedCreateNestedManyWithoutApplicantProcessInput
}

export type ApplicantProcessUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedForms?: Prisma.APCompletedFormUpdateManyWithoutApplicantProcessNestedInput
  applicant?: Prisma.UserUpdateOneRequiredWithoutApplicantProcessesNestedInput
  process?: Prisma.ProcessUpdateOneRequiredWithoutApplicantProcessesNestedInput
  processedApplications?: Prisma.ProcessedApplicationUpdateManyWithoutApplicantProcessNestedInput
  responses?: Prisma.FormResponseUpdateManyWithoutApplicantProcessNestedInput
  comments?: Prisma.ProcessCommentUpdateManyWithoutApplicantProcessNestedInput
}

export type ApplicantProcessUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  applicantId?: Prisma.StringFieldUpdateOperationsInput | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedForms?: Prisma.APCompletedFormUncheckedUpdateManyWithoutApplicantProcessNestedInput
  processedApplications?: Prisma.ProcessedApplicationUncheckedUpdateManyWithoutApplicantProcessNestedInput
  responses?: Prisma.FormResponseUncheckedUpdateManyWithoutApplicantProcessNestedInput
  comments?: Prisma.ProcessCommentUncheckedUpdateManyWithoutApplicantProcessNestedInput
}

export type ApplicantProcessCreateManyInput = {
  id?: string
  applicantId: string
  processId: string
  status?: $Enums.ProcessStatus
  createdAt?: Date | string
}

export type ApplicantProcessUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ApplicantProcessUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  applicantId?: Prisma.StringFieldUpdateOperationsInput | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ApplicantProcessListRelationFilter = {
  every?: Prisma.ApplicantProcessWhereInput
  some?: Prisma.ApplicantProcessWhereInput
  none?: Prisma.ApplicantProcessWhereInput
}

export type ApplicantProcessOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ApplicantProcessScalarRelationFilter = {
  is?: Prisma.ApplicantProcessWhereInput
  isNot?: Prisma.ApplicantProcessWhereInput
}

export type ApplicantProcessOrderByRelevanceInput = {
  fields: Prisma.ApplicantProcessOrderByRelevanceFieldEnum | Prisma.ApplicantProcessOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ApplicantProcessCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  applicantId?: Prisma.SortOrder
  processId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ApplicantProcessMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  applicantId?: Prisma.SortOrder
  processId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ApplicantProcessMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  applicantId?: Prisma.SortOrder
  processId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ApplicantProcessCreateNestedManyWithoutApplicantInput = {
  create?: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutApplicantInput, Prisma.ApplicantProcessUncheckedCreateWithoutApplicantInput> | Prisma.ApplicantProcessCreateWithoutApplicantInput[] | Prisma.ApplicantProcessUncheckedCreateWithoutApplicantInput[]
  connectOrCreate?: Prisma.ApplicantProcessCreateOrConnectWithoutApplicantInput | Prisma.ApplicantProcessCreateOrConnectWithoutApplicantInput[]
  createMany?: Prisma.ApplicantProcessCreateManyApplicantInputEnvelope
  connect?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
}

export type ApplicantProcessUncheckedCreateNestedManyWithoutApplicantInput = {
  create?: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutApplicantInput, Prisma.ApplicantProcessUncheckedCreateWithoutApplicantInput> | Prisma.ApplicantProcessCreateWithoutApplicantInput[] | Prisma.ApplicantProcessUncheckedCreateWithoutApplicantInput[]
  connectOrCreate?: Prisma.ApplicantProcessCreateOrConnectWithoutApplicantInput | Prisma.ApplicantProcessCreateOrConnectWithoutApplicantInput[]
  createMany?: Prisma.ApplicantProcessCreateManyApplicantInputEnvelope
  connect?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
}

export type ApplicantProcessUpdateManyWithoutApplicantNestedInput = {
  create?: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutApplicantInput, Prisma.ApplicantProcessUncheckedCreateWithoutApplicantInput> | Prisma.ApplicantProcessCreateWithoutApplicantInput[] | Prisma.ApplicantProcessUncheckedCreateWithoutApplicantInput[]
  connectOrCreate?: Prisma.ApplicantProcessCreateOrConnectWithoutApplicantInput | Prisma.ApplicantProcessCreateOrConnectWithoutApplicantInput[]
  upsert?: Prisma.ApplicantProcessUpsertWithWhereUniqueWithoutApplicantInput | Prisma.ApplicantProcessUpsertWithWhereUniqueWithoutApplicantInput[]
  createMany?: Prisma.ApplicantProcessCreateManyApplicantInputEnvelope
  set?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
  disconnect?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
  delete?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
  connect?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
  update?: Prisma.ApplicantProcessUpdateWithWhereUniqueWithoutApplicantInput | Prisma.ApplicantProcessUpdateWithWhereUniqueWithoutApplicantInput[]
  updateMany?: Prisma.ApplicantProcessUpdateManyWithWhereWithoutApplicantInput | Prisma.ApplicantProcessUpdateManyWithWhereWithoutApplicantInput[]
  deleteMany?: Prisma.ApplicantProcessScalarWhereInput | Prisma.ApplicantProcessScalarWhereInput[]
}

export type ApplicantProcessUncheckedUpdateManyWithoutApplicantNestedInput = {
  create?: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutApplicantInput, Prisma.ApplicantProcessUncheckedCreateWithoutApplicantInput> | Prisma.ApplicantProcessCreateWithoutApplicantInput[] | Prisma.ApplicantProcessUncheckedCreateWithoutApplicantInput[]
  connectOrCreate?: Prisma.ApplicantProcessCreateOrConnectWithoutApplicantInput | Prisma.ApplicantProcessCreateOrConnectWithoutApplicantInput[]
  upsert?: Prisma.ApplicantProcessUpsertWithWhereUniqueWithoutApplicantInput | Prisma.ApplicantProcessUpsertWithWhereUniqueWithoutApplicantInput[]
  createMany?: Prisma.ApplicantProcessCreateManyApplicantInputEnvelope
  set?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
  disconnect?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
  delete?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
  connect?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
  update?: Prisma.ApplicantProcessUpdateWithWhereUniqueWithoutApplicantInput | Prisma.ApplicantProcessUpdateWithWhereUniqueWithoutApplicantInput[]
  updateMany?: Prisma.ApplicantProcessUpdateManyWithWhereWithoutApplicantInput | Prisma.ApplicantProcessUpdateManyWithWhereWithoutApplicantInput[]
  deleteMany?: Prisma.ApplicantProcessScalarWhereInput | Prisma.ApplicantProcessScalarWhereInput[]
}

export type ApplicantProcessCreateNestedManyWithoutProcessInput = {
  create?: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutProcessInput, Prisma.ApplicantProcessUncheckedCreateWithoutProcessInput> | Prisma.ApplicantProcessCreateWithoutProcessInput[] | Prisma.ApplicantProcessUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.ApplicantProcessCreateOrConnectWithoutProcessInput | Prisma.ApplicantProcessCreateOrConnectWithoutProcessInput[]
  createMany?: Prisma.ApplicantProcessCreateManyProcessInputEnvelope
  connect?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
}

export type ApplicantProcessUncheckedCreateNestedManyWithoutProcessInput = {
  create?: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutProcessInput, Prisma.ApplicantProcessUncheckedCreateWithoutProcessInput> | Prisma.ApplicantProcessCreateWithoutProcessInput[] | Prisma.ApplicantProcessUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.ApplicantProcessCreateOrConnectWithoutProcessInput | Prisma.ApplicantProcessCreateOrConnectWithoutProcessInput[]
  createMany?: Prisma.ApplicantProcessCreateManyProcessInputEnvelope
  connect?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
}

export type ApplicantProcessUpdateManyWithoutProcessNestedInput = {
  create?: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutProcessInput, Prisma.ApplicantProcessUncheckedCreateWithoutProcessInput> | Prisma.ApplicantProcessCreateWithoutProcessInput[] | Prisma.ApplicantProcessUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.ApplicantProcessCreateOrConnectWithoutProcessInput | Prisma.ApplicantProcessCreateOrConnectWithoutProcessInput[]
  upsert?: Prisma.ApplicantProcessUpsertWithWhereUniqueWithoutProcessInput | Prisma.ApplicantProcessUpsertWithWhereUniqueWithoutProcessInput[]
  createMany?: Prisma.ApplicantProcessCreateManyProcessInputEnvelope
  set?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
  disconnect?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
  delete?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
  connect?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
  update?: Prisma.ApplicantProcessUpdateWithWhereUniqueWithoutProcessInput | Prisma.ApplicantProcessUpdateWithWhereUniqueWithoutProcessInput[]
  updateMany?: Prisma.ApplicantProcessUpdateManyWithWhereWithoutProcessInput | Prisma.ApplicantProcessUpdateManyWithWhereWithoutProcessInput[]
  deleteMany?: Prisma.ApplicantProcessScalarWhereInput | Prisma.ApplicantProcessScalarWhereInput[]
}

export type ApplicantProcessUncheckedUpdateManyWithoutProcessNestedInput = {
  create?: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutProcessInput, Prisma.ApplicantProcessUncheckedCreateWithoutProcessInput> | Prisma.ApplicantProcessCreateWithoutProcessInput[] | Prisma.ApplicantProcessUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.ApplicantProcessCreateOrConnectWithoutProcessInput | Prisma.ApplicantProcessCreateOrConnectWithoutProcessInput[]
  upsert?: Prisma.ApplicantProcessUpsertWithWhereUniqueWithoutProcessInput | Prisma.ApplicantProcessUpsertWithWhereUniqueWithoutProcessInput[]
  createMany?: Prisma.ApplicantProcessCreateManyProcessInputEnvelope
  set?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
  disconnect?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
  delete?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
  connect?: Prisma.ApplicantProcessWhereUniqueInput | Prisma.ApplicantProcessWhereUniqueInput[]
  update?: Prisma.ApplicantProcessUpdateWithWhereUniqueWithoutProcessInput | Prisma.ApplicantProcessUpdateWithWhereUniqueWithoutProcessInput[]
  updateMany?: Prisma.ApplicantProcessUpdateManyWithWhereWithoutProcessInput | Prisma.ApplicantProcessUpdateManyWithWhereWithoutProcessInput[]
  deleteMany?: Prisma.ApplicantProcessScalarWhereInput | Prisma.ApplicantProcessScalarWhereInput[]
}

export type ApplicantProcessCreateNestedOneWithoutResponsesInput = {
  create?: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutResponsesInput, Prisma.ApplicantProcessUncheckedCreateWithoutResponsesInput>
  connectOrCreate?: Prisma.ApplicantProcessCreateOrConnectWithoutResponsesInput
  connect?: Prisma.ApplicantProcessWhereUniqueInput
}

export type ApplicantProcessUpdateOneRequiredWithoutResponsesNestedInput = {
  create?: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutResponsesInput, Prisma.ApplicantProcessUncheckedCreateWithoutResponsesInput>
  connectOrCreate?: Prisma.ApplicantProcessCreateOrConnectWithoutResponsesInput
  upsert?: Prisma.ApplicantProcessUpsertWithoutResponsesInput
  connect?: Prisma.ApplicantProcessWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ApplicantProcessUpdateToOneWithWhereWithoutResponsesInput, Prisma.ApplicantProcessUpdateWithoutResponsesInput>, Prisma.ApplicantProcessUncheckedUpdateWithoutResponsesInput>
}

export type ApplicantProcessCreateNestedOneWithoutProcessedApplicationsInput = {
  create?: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutProcessedApplicationsInput, Prisma.ApplicantProcessUncheckedCreateWithoutProcessedApplicationsInput>
  connectOrCreate?: Prisma.ApplicantProcessCreateOrConnectWithoutProcessedApplicationsInput
  connect?: Prisma.ApplicantProcessWhereUniqueInput
}

export type ApplicantProcessUpdateOneRequiredWithoutProcessedApplicationsNestedInput = {
  create?: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutProcessedApplicationsInput, Prisma.ApplicantProcessUncheckedCreateWithoutProcessedApplicationsInput>
  connectOrCreate?: Prisma.ApplicantProcessCreateOrConnectWithoutProcessedApplicationsInput
  upsert?: Prisma.ApplicantProcessUpsertWithoutProcessedApplicationsInput
  connect?: Prisma.ApplicantProcessWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ApplicantProcessUpdateToOneWithWhereWithoutProcessedApplicationsInput, Prisma.ApplicantProcessUpdateWithoutProcessedApplicationsInput>, Prisma.ApplicantProcessUncheckedUpdateWithoutProcessedApplicationsInput>
}

export type ApplicantProcessCreateNestedOneWithoutCompletedFormsInput = {
  create?: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutCompletedFormsInput, Prisma.ApplicantProcessUncheckedCreateWithoutCompletedFormsInput>
  connectOrCreate?: Prisma.ApplicantProcessCreateOrConnectWithoutCompletedFormsInput
  connect?: Prisma.ApplicantProcessWhereUniqueInput
}

export type ApplicantProcessUpdateOneRequiredWithoutCompletedFormsNestedInput = {
  create?: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutCompletedFormsInput, Prisma.ApplicantProcessUncheckedCreateWithoutCompletedFormsInput>
  connectOrCreate?: Prisma.ApplicantProcessCreateOrConnectWithoutCompletedFormsInput
  upsert?: Prisma.ApplicantProcessUpsertWithoutCompletedFormsInput
  connect?: Prisma.ApplicantProcessWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ApplicantProcessUpdateToOneWithWhereWithoutCompletedFormsInput, Prisma.ApplicantProcessUpdateWithoutCompletedFormsInput>, Prisma.ApplicantProcessUncheckedUpdateWithoutCompletedFormsInput>
}

export type ApplicantProcessCreateNestedOneWithoutCommentsInput = {
  create?: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutCommentsInput, Prisma.ApplicantProcessUncheckedCreateWithoutCommentsInput>
  connectOrCreate?: Prisma.ApplicantProcessCreateOrConnectWithoutCommentsInput
  connect?: Prisma.ApplicantProcessWhereUniqueInput
}

export type ApplicantProcessUpdateOneRequiredWithoutCommentsNestedInput = {
  create?: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutCommentsInput, Prisma.ApplicantProcessUncheckedCreateWithoutCommentsInput>
  connectOrCreate?: Prisma.ApplicantProcessCreateOrConnectWithoutCommentsInput
  upsert?: Prisma.ApplicantProcessUpsertWithoutCommentsInput
  connect?: Prisma.ApplicantProcessWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ApplicantProcessUpdateToOneWithWhereWithoutCommentsInput, Prisma.ApplicantProcessUpdateWithoutCommentsInput>, Prisma.ApplicantProcessUncheckedUpdateWithoutCommentsInput>
}

export type ApplicantProcessCreateWithoutApplicantInput = {
  id?: string
  status?: $Enums.ProcessStatus
  createdAt?: Date | string
  completedForms?: Prisma.APCompletedFormCreateNestedManyWithoutApplicantProcessInput
  process: Prisma.ProcessCreateNestedOneWithoutApplicantProcessesInput
  processedApplications?: Prisma.ProcessedApplicationCreateNestedManyWithoutApplicantProcessInput
  responses?: Prisma.FormResponseCreateNestedManyWithoutApplicantProcessInput
  comments?: Prisma.ProcessCommentCreateNestedManyWithoutApplicantProcessInput
}

export type ApplicantProcessUncheckedCreateWithoutApplicantInput = {
  id?: string
  processId: string
  status?: $Enums.ProcessStatus
  createdAt?: Date | string
  completedForms?: Prisma.APCompletedFormUncheckedCreateNestedManyWithoutApplicantProcessInput
  processedApplications?: Prisma.ProcessedApplicationUncheckedCreateNestedManyWithoutApplicantProcessInput
  responses?: Prisma.FormResponseUncheckedCreateNestedManyWithoutApplicantProcessInput
  comments?: Prisma.ProcessCommentUncheckedCreateNestedManyWithoutApplicantProcessInput
}

export type ApplicantProcessCreateOrConnectWithoutApplicantInput = {
  where: Prisma.ApplicantProcessWhereUniqueInput
  create: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutApplicantInput, Prisma.ApplicantProcessUncheckedCreateWithoutApplicantInput>
}

export type ApplicantProcessCreateManyApplicantInputEnvelope = {
  data: Prisma.ApplicantProcessCreateManyApplicantInput | Prisma.ApplicantProcessCreateManyApplicantInput[]
  skipDuplicates?: boolean
}

export type ApplicantProcessUpsertWithWhereUniqueWithoutApplicantInput = {
  where: Prisma.ApplicantProcessWhereUniqueInput
  update: Prisma.XOR<Prisma.ApplicantProcessUpdateWithoutApplicantInput, Prisma.ApplicantProcessUncheckedUpdateWithoutApplicantInput>
  create: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutApplicantInput, Prisma.ApplicantProcessUncheckedCreateWithoutApplicantInput>
}

export type ApplicantProcessUpdateWithWhereUniqueWithoutApplicantInput = {
  where: Prisma.ApplicantProcessWhereUniqueInput
  data: Prisma.XOR<Prisma.ApplicantProcessUpdateWithoutApplicantInput, Prisma.ApplicantProcessUncheckedUpdateWithoutApplicantInput>
}

export type ApplicantProcessUpdateManyWithWhereWithoutApplicantInput = {
  where: Prisma.ApplicantProcessScalarWhereInput
  data: Prisma.XOR<Prisma.ApplicantProcessUpdateManyMutationInput, Prisma.ApplicantProcessUncheckedUpdateManyWithoutApplicantInput>
}

export type ApplicantProcessScalarWhereInput = {
  AND?: Prisma.ApplicantProcessScalarWhereInput | Prisma.ApplicantProcessScalarWhereInput[]
  OR?: Prisma.ApplicantProcessScalarWhereInput[]
  NOT?: Prisma.ApplicantProcessScalarWhereInput | Prisma.ApplicantProcessScalarWhereInput[]
  id?: Prisma.UuidFilter<"ApplicantProcess"> | string
  applicantId?: Prisma.UuidFilter<"ApplicantProcess"> | string
  processId?: Prisma.UuidFilter<"ApplicantProcess"> | string
  status?: Prisma.EnumProcessStatusFilter<"ApplicantProcess"> | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFilter<"ApplicantProcess"> | Date | string
}

export type ApplicantProcessCreateWithoutProcessInput = {
  id?: string
  status?: $Enums.ProcessStatus
  createdAt?: Date | string
  completedForms?: Prisma.APCompletedFormCreateNestedManyWithoutApplicantProcessInput
  applicant: Prisma.UserCreateNestedOneWithoutApplicantProcessesInput
  processedApplications?: Prisma.ProcessedApplicationCreateNestedManyWithoutApplicantProcessInput
  responses?: Prisma.FormResponseCreateNestedManyWithoutApplicantProcessInput
  comments?: Prisma.ProcessCommentCreateNestedManyWithoutApplicantProcessInput
}

export type ApplicantProcessUncheckedCreateWithoutProcessInput = {
  id?: string
  applicantId: string
  status?: $Enums.ProcessStatus
  createdAt?: Date | string
  completedForms?: Prisma.APCompletedFormUncheckedCreateNestedManyWithoutApplicantProcessInput
  processedApplications?: Prisma.ProcessedApplicationUncheckedCreateNestedManyWithoutApplicantProcessInput
  responses?: Prisma.FormResponseUncheckedCreateNestedManyWithoutApplicantProcessInput
  comments?: Prisma.ProcessCommentUncheckedCreateNestedManyWithoutApplicantProcessInput
}

export type ApplicantProcessCreateOrConnectWithoutProcessInput = {
  where: Prisma.ApplicantProcessWhereUniqueInput
  create: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutProcessInput, Prisma.ApplicantProcessUncheckedCreateWithoutProcessInput>
}

export type ApplicantProcessCreateManyProcessInputEnvelope = {
  data: Prisma.ApplicantProcessCreateManyProcessInput | Prisma.ApplicantProcessCreateManyProcessInput[]
  skipDuplicates?: boolean
}

export type ApplicantProcessUpsertWithWhereUniqueWithoutProcessInput = {
  where: Prisma.ApplicantProcessWhereUniqueInput
  update: Prisma.XOR<Prisma.ApplicantProcessUpdateWithoutProcessInput, Prisma.ApplicantProcessUncheckedUpdateWithoutProcessInput>
  create: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutProcessInput, Prisma.ApplicantProcessUncheckedCreateWithoutProcessInput>
}

export type ApplicantProcessUpdateWithWhereUniqueWithoutProcessInput = {
  where: Prisma.ApplicantProcessWhereUniqueInput
  data: Prisma.XOR<Prisma.ApplicantProcessUpdateWithoutProcessInput, Prisma.ApplicantProcessUncheckedUpdateWithoutProcessInput>
}

export type ApplicantProcessUpdateManyWithWhereWithoutProcessInput = {
  where: Prisma.ApplicantProcessScalarWhereInput
  data: Prisma.XOR<Prisma.ApplicantProcessUpdateManyMutationInput, Prisma.ApplicantProcessUncheckedUpdateManyWithoutProcessInput>
}

export type ApplicantProcessCreateWithoutResponsesInput = {
  id?: string
  status?: $Enums.ProcessStatus
  createdAt?: Date | string
  completedForms?: Prisma.APCompletedFormCreateNestedManyWithoutApplicantProcessInput
  applicant: Prisma.UserCreateNestedOneWithoutApplicantProcessesInput
  process: Prisma.ProcessCreateNestedOneWithoutApplicantProcessesInput
  processedApplications?: Prisma.ProcessedApplicationCreateNestedManyWithoutApplicantProcessInput
  comments?: Prisma.ProcessCommentCreateNestedManyWithoutApplicantProcessInput
}

export type ApplicantProcessUncheckedCreateWithoutResponsesInput = {
  id?: string
  applicantId: string
  processId: string
  status?: $Enums.ProcessStatus
  createdAt?: Date | string
  completedForms?: Prisma.APCompletedFormUncheckedCreateNestedManyWithoutApplicantProcessInput
  processedApplications?: Prisma.ProcessedApplicationUncheckedCreateNestedManyWithoutApplicantProcessInput
  comments?: Prisma.ProcessCommentUncheckedCreateNestedManyWithoutApplicantProcessInput
}

export type ApplicantProcessCreateOrConnectWithoutResponsesInput = {
  where: Prisma.ApplicantProcessWhereUniqueInput
  create: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutResponsesInput, Prisma.ApplicantProcessUncheckedCreateWithoutResponsesInput>
}

export type ApplicantProcessUpsertWithoutResponsesInput = {
  update: Prisma.XOR<Prisma.ApplicantProcessUpdateWithoutResponsesInput, Prisma.ApplicantProcessUncheckedUpdateWithoutResponsesInput>
  create: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutResponsesInput, Prisma.ApplicantProcessUncheckedCreateWithoutResponsesInput>
  where?: Prisma.ApplicantProcessWhereInput
}

export type ApplicantProcessUpdateToOneWithWhereWithoutResponsesInput = {
  where?: Prisma.ApplicantProcessWhereInput
  data: Prisma.XOR<Prisma.ApplicantProcessUpdateWithoutResponsesInput, Prisma.ApplicantProcessUncheckedUpdateWithoutResponsesInput>
}

export type ApplicantProcessUpdateWithoutResponsesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedForms?: Prisma.APCompletedFormUpdateManyWithoutApplicantProcessNestedInput
  applicant?: Prisma.UserUpdateOneRequiredWithoutApplicantProcessesNestedInput
  process?: Prisma.ProcessUpdateOneRequiredWithoutApplicantProcessesNestedInput
  processedApplications?: Prisma.ProcessedApplicationUpdateManyWithoutApplicantProcessNestedInput
  comments?: Prisma.ProcessCommentUpdateManyWithoutApplicantProcessNestedInput
}

export type ApplicantProcessUncheckedUpdateWithoutResponsesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  applicantId?: Prisma.StringFieldUpdateOperationsInput | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedForms?: Prisma.APCompletedFormUncheckedUpdateManyWithoutApplicantProcessNestedInput
  processedApplications?: Prisma.ProcessedApplicationUncheckedUpdateManyWithoutApplicantProcessNestedInput
  comments?: Prisma.ProcessCommentUncheckedUpdateManyWithoutApplicantProcessNestedInput
}

export type ApplicantProcessCreateWithoutProcessedApplicationsInput = {
  id?: string
  status?: $Enums.ProcessStatus
  createdAt?: Date | string
  completedForms?: Prisma.APCompletedFormCreateNestedManyWithoutApplicantProcessInput
  applicant: Prisma.UserCreateNestedOneWithoutApplicantProcessesInput
  process: Prisma.ProcessCreateNestedOneWithoutApplicantProcessesInput
  responses?: Prisma.FormResponseCreateNestedManyWithoutApplicantProcessInput
  comments?: Prisma.ProcessCommentCreateNestedManyWithoutApplicantProcessInput
}

export type ApplicantProcessUncheckedCreateWithoutProcessedApplicationsInput = {
  id?: string
  applicantId: string
  processId: string
  status?: $Enums.ProcessStatus
  createdAt?: Date | string
  completedForms?: Prisma.APCompletedFormUncheckedCreateNestedManyWithoutApplicantProcessInput
  responses?: Prisma.FormResponseUncheckedCreateNestedManyWithoutApplicantProcessInput
  comments?: Prisma.ProcessCommentUncheckedCreateNestedManyWithoutApplicantProcessInput
}

export type ApplicantProcessCreateOrConnectWithoutProcessedApplicationsInput = {
  where: Prisma.ApplicantProcessWhereUniqueInput
  create: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutProcessedApplicationsInput, Prisma.ApplicantProcessUncheckedCreateWithoutProcessedApplicationsInput>
}

export type ApplicantProcessUpsertWithoutProcessedApplicationsInput = {
  update: Prisma.XOR<Prisma.ApplicantProcessUpdateWithoutProcessedApplicationsInput, Prisma.ApplicantProcessUncheckedUpdateWithoutProcessedApplicationsInput>
  create: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutProcessedApplicationsInput, Prisma.ApplicantProcessUncheckedCreateWithoutProcessedApplicationsInput>
  where?: Prisma.ApplicantProcessWhereInput
}

export type ApplicantProcessUpdateToOneWithWhereWithoutProcessedApplicationsInput = {
  where?: Prisma.ApplicantProcessWhereInput
  data: Prisma.XOR<Prisma.ApplicantProcessUpdateWithoutProcessedApplicationsInput, Prisma.ApplicantProcessUncheckedUpdateWithoutProcessedApplicationsInput>
}

export type ApplicantProcessUpdateWithoutProcessedApplicationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedForms?: Prisma.APCompletedFormUpdateManyWithoutApplicantProcessNestedInput
  applicant?: Prisma.UserUpdateOneRequiredWithoutApplicantProcessesNestedInput
  process?: Prisma.ProcessUpdateOneRequiredWithoutApplicantProcessesNestedInput
  responses?: Prisma.FormResponseUpdateManyWithoutApplicantProcessNestedInput
  comments?: Prisma.ProcessCommentUpdateManyWithoutApplicantProcessNestedInput
}

export type ApplicantProcessUncheckedUpdateWithoutProcessedApplicationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  applicantId?: Prisma.StringFieldUpdateOperationsInput | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedForms?: Prisma.APCompletedFormUncheckedUpdateManyWithoutApplicantProcessNestedInput
  responses?: Prisma.FormResponseUncheckedUpdateManyWithoutApplicantProcessNestedInput
  comments?: Prisma.ProcessCommentUncheckedUpdateManyWithoutApplicantProcessNestedInput
}

export type ApplicantProcessCreateWithoutCompletedFormsInput = {
  id?: string
  status?: $Enums.ProcessStatus
  createdAt?: Date | string
  applicant: Prisma.UserCreateNestedOneWithoutApplicantProcessesInput
  process: Prisma.ProcessCreateNestedOneWithoutApplicantProcessesInput
  processedApplications?: Prisma.ProcessedApplicationCreateNestedManyWithoutApplicantProcessInput
  responses?: Prisma.FormResponseCreateNestedManyWithoutApplicantProcessInput
  comments?: Prisma.ProcessCommentCreateNestedManyWithoutApplicantProcessInput
}

export type ApplicantProcessUncheckedCreateWithoutCompletedFormsInput = {
  id?: string
  applicantId: string
  processId: string
  status?: $Enums.ProcessStatus
  createdAt?: Date | string
  processedApplications?: Prisma.ProcessedApplicationUncheckedCreateNestedManyWithoutApplicantProcessInput
  responses?: Prisma.FormResponseUncheckedCreateNestedManyWithoutApplicantProcessInput
  comments?: Prisma.ProcessCommentUncheckedCreateNestedManyWithoutApplicantProcessInput
}

export type ApplicantProcessCreateOrConnectWithoutCompletedFormsInput = {
  where: Prisma.ApplicantProcessWhereUniqueInput
  create: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutCompletedFormsInput, Prisma.ApplicantProcessUncheckedCreateWithoutCompletedFormsInput>
}

export type ApplicantProcessUpsertWithoutCompletedFormsInput = {
  update: Prisma.XOR<Prisma.ApplicantProcessUpdateWithoutCompletedFormsInput, Prisma.ApplicantProcessUncheckedUpdateWithoutCompletedFormsInput>
  create: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutCompletedFormsInput, Prisma.ApplicantProcessUncheckedCreateWithoutCompletedFormsInput>
  where?: Prisma.ApplicantProcessWhereInput
}

export type ApplicantProcessUpdateToOneWithWhereWithoutCompletedFormsInput = {
  where?: Prisma.ApplicantProcessWhereInput
  data: Prisma.XOR<Prisma.ApplicantProcessUpdateWithoutCompletedFormsInput, Prisma.ApplicantProcessUncheckedUpdateWithoutCompletedFormsInput>
}

export type ApplicantProcessUpdateWithoutCompletedFormsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  applicant?: Prisma.UserUpdateOneRequiredWithoutApplicantProcessesNestedInput
  process?: Prisma.ProcessUpdateOneRequiredWithoutApplicantProcessesNestedInput
  processedApplications?: Prisma.ProcessedApplicationUpdateManyWithoutApplicantProcessNestedInput
  responses?: Prisma.FormResponseUpdateManyWithoutApplicantProcessNestedInput
  comments?: Prisma.ProcessCommentUpdateManyWithoutApplicantProcessNestedInput
}

export type ApplicantProcessUncheckedUpdateWithoutCompletedFormsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  applicantId?: Prisma.StringFieldUpdateOperationsInput | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  processedApplications?: Prisma.ProcessedApplicationUncheckedUpdateManyWithoutApplicantProcessNestedInput
  responses?: Prisma.FormResponseUncheckedUpdateManyWithoutApplicantProcessNestedInput
  comments?: Prisma.ProcessCommentUncheckedUpdateManyWithoutApplicantProcessNestedInput
}

export type ApplicantProcessCreateWithoutCommentsInput = {
  id?: string
  status?: $Enums.ProcessStatus
  createdAt?: Date | string
  completedForms?: Prisma.APCompletedFormCreateNestedManyWithoutApplicantProcessInput
  applicant: Prisma.UserCreateNestedOneWithoutApplicantProcessesInput
  process: Prisma.ProcessCreateNestedOneWithoutApplicantProcessesInput
  processedApplications?: Prisma.ProcessedApplicationCreateNestedManyWithoutApplicantProcessInput
  responses?: Prisma.FormResponseCreateNestedManyWithoutApplicantProcessInput
}

export type ApplicantProcessUncheckedCreateWithoutCommentsInput = {
  id?: string
  applicantId: string
  processId: string
  status?: $Enums.ProcessStatus
  createdAt?: Date | string
  completedForms?: Prisma.APCompletedFormUncheckedCreateNestedManyWithoutApplicantProcessInput
  processedApplications?: Prisma.ProcessedApplicationUncheckedCreateNestedManyWithoutApplicantProcessInput
  responses?: Prisma.FormResponseUncheckedCreateNestedManyWithoutApplicantProcessInput
}

export type ApplicantProcessCreateOrConnectWithoutCommentsInput = {
  where: Prisma.ApplicantProcessWhereUniqueInput
  create: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutCommentsInput, Prisma.ApplicantProcessUncheckedCreateWithoutCommentsInput>
}

export type ApplicantProcessUpsertWithoutCommentsInput = {
  update: Prisma.XOR<Prisma.ApplicantProcessUpdateWithoutCommentsInput, Prisma.ApplicantProcessUncheckedUpdateWithoutCommentsInput>
  create: Prisma.XOR<Prisma.ApplicantProcessCreateWithoutCommentsInput, Prisma.ApplicantProcessUncheckedCreateWithoutCommentsInput>
  where?: Prisma.ApplicantProcessWhereInput
}

export type ApplicantProcessUpdateToOneWithWhereWithoutCommentsInput = {
  where?: Prisma.ApplicantProcessWhereInput
  data: Prisma.XOR<Prisma.ApplicantProcessUpdateWithoutCommentsInput, Prisma.ApplicantProcessUncheckedUpdateWithoutCommentsInput>
}

export type ApplicantProcessUpdateWithoutCommentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedForms?: Prisma.APCompletedFormUpdateManyWithoutApplicantProcessNestedInput
  applicant?: Prisma.UserUpdateOneRequiredWithoutApplicantProcessesNestedInput
  process?: Prisma.ProcessUpdateOneRequiredWithoutApplicantProcessesNestedInput
  processedApplications?: Prisma.ProcessedApplicationUpdateManyWithoutApplicantProcessNestedInput
  responses?: Prisma.FormResponseUpdateManyWithoutApplicantProcessNestedInput
}

export type ApplicantProcessUncheckedUpdateWithoutCommentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  applicantId?: Prisma.StringFieldUpdateOperationsInput | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedForms?: Prisma.APCompletedFormUncheckedUpdateManyWithoutApplicantProcessNestedInput
  processedApplications?: Prisma.ProcessedApplicationUncheckedUpdateManyWithoutApplicantProcessNestedInput
  responses?: Prisma.FormResponseUncheckedUpdateManyWithoutApplicantProcessNestedInput
}

export type ApplicantProcessCreateManyApplicantInput = {
  id?: string
  processId: string
  status?: $Enums.ProcessStatus
  createdAt?: Date | string
}

export type ApplicantProcessUpdateWithoutApplicantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedForms?: Prisma.APCompletedFormUpdateManyWithoutApplicantProcessNestedInput
  process?: Prisma.ProcessUpdateOneRequiredWithoutApplicantProcessesNestedInput
  processedApplications?: Prisma.ProcessedApplicationUpdateManyWithoutApplicantProcessNestedInput
  responses?: Prisma.FormResponseUpdateManyWithoutApplicantProcessNestedInput
  comments?: Prisma.ProcessCommentUpdateManyWithoutApplicantProcessNestedInput
}

export type ApplicantProcessUncheckedUpdateWithoutApplicantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedForms?: Prisma.APCompletedFormUncheckedUpdateManyWithoutApplicantProcessNestedInput
  processedApplications?: Prisma.ProcessedApplicationUncheckedUpdateManyWithoutApplicantProcessNestedInput
  responses?: Prisma.FormResponseUncheckedUpdateManyWithoutApplicantProcessNestedInput
  comments?: Prisma.ProcessCommentUncheckedUpdateManyWithoutApplicantProcessNestedInput
}

export type ApplicantProcessUncheckedUpdateManyWithoutApplicantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ApplicantProcessCreateManyProcessInput = {
  id?: string
  applicantId: string
  status?: $Enums.ProcessStatus
  createdAt?: Date | string
}

export type ApplicantProcessUpdateWithoutProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedForms?: Prisma.APCompletedFormUpdateManyWithoutApplicantProcessNestedInput
  applicant?: Prisma.UserUpdateOneRequiredWithoutApplicantProcessesNestedInput
  processedApplications?: Prisma.ProcessedApplicationUpdateManyWithoutApplicantProcessNestedInput
  responses?: Prisma.FormResponseUpdateManyWithoutApplicantProcessNestedInput
  comments?: Prisma.ProcessCommentUpdateManyWithoutApplicantProcessNestedInput
}

export type ApplicantProcessUncheckedUpdateWithoutProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  applicantId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedForms?: Prisma.APCompletedFormUncheckedUpdateManyWithoutApplicantProcessNestedInput
  processedApplications?: Prisma.ProcessedApplicationUncheckedUpdateManyWithoutApplicantProcessNestedInput
  responses?: Prisma.FormResponseUncheckedUpdateManyWithoutApplicantProcessNestedInput
  comments?: Prisma.ProcessCommentUncheckedUpdateManyWithoutApplicantProcessNestedInput
}

export type ApplicantProcessUncheckedUpdateManyWithoutProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  applicantId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ApplicantProcessCountOutputType
 */

export type ApplicantProcessCountOutputType = {
  completedForms: number
  processedApplications: number
  responses: number
  comments: number
}

export type ApplicantProcessCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  completedForms?: boolean | ApplicantProcessCountOutputTypeCountCompletedFormsArgs
  processedApplications?: boolean | ApplicantProcessCountOutputTypeCountProcessedApplicationsArgs
  responses?: boolean | ApplicantProcessCountOutputTypeCountResponsesArgs
  comments?: boolean | ApplicantProcessCountOutputTypeCountCommentsArgs
}

/**
 * ApplicantProcessCountOutputType without action
 */
export type ApplicantProcessCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicantProcessCountOutputType
   */
  select?: Prisma.ApplicantProcessCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ApplicantProcessCountOutputType without action
 */
export type ApplicantProcessCountOutputTypeCountCompletedFormsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.APCompletedFormWhereInput
}

/**
 * ApplicantProcessCountOutputType without action
 */
export type ApplicantProcessCountOutputTypeCountProcessedApplicationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProcessedApplicationWhereInput
}

/**
 * ApplicantProcessCountOutputType without action
 */
export type ApplicantProcessCountOutputTypeCountResponsesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormResponseWhereInput
}

/**
 * ApplicantProcessCountOutputType without action
 */
export type ApplicantProcessCountOutputTypeCountCommentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProcessCommentWhereInput
}


export type ApplicantProcessSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  applicantId?: boolean
  processId?: boolean
  status?: boolean
  createdAt?: boolean
  completedForms?: boolean | Prisma.ApplicantProcess$completedFormsArgs<ExtArgs>
  applicant?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
  processedApplications?: boolean | Prisma.ApplicantProcess$processedApplicationsArgs<ExtArgs>
  responses?: boolean | Prisma.ApplicantProcess$responsesArgs<ExtArgs>
  comments?: boolean | Prisma.ApplicantProcess$commentsArgs<ExtArgs>
  _count?: boolean | Prisma.ApplicantProcessCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["applicantProcess"]>

export type ApplicantProcessSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  applicantId?: boolean
  processId?: boolean
  status?: boolean
  createdAt?: boolean
  applicant?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["applicantProcess"]>

export type ApplicantProcessSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  applicantId?: boolean
  processId?: boolean
  status?: boolean
  createdAt?: boolean
  applicant?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["applicantProcess"]>

export type ApplicantProcessSelectScalar = {
  id?: boolean
  applicantId?: boolean
  processId?: boolean
  status?: boolean
  createdAt?: boolean
}

export type ApplicantProcessOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "applicantId" | "processId" | "status" | "createdAt", ExtArgs["result"]["applicantProcess"]>
export type ApplicantProcessInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  completedForms?: boolean | Prisma.ApplicantProcess$completedFormsArgs<ExtArgs>
  applicant?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
  processedApplications?: boolean | Prisma.ApplicantProcess$processedApplicationsArgs<ExtArgs>
  responses?: boolean | Prisma.ApplicantProcess$responsesArgs<ExtArgs>
  comments?: boolean | Prisma.ApplicantProcess$commentsArgs<ExtArgs>
  _count?: boolean | Prisma.ApplicantProcessCountOutputTypeDefaultArgs<ExtArgs>
}
export type ApplicantProcessIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  applicant?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
}
export type ApplicantProcessIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  applicant?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
}

export type $ApplicantProcessPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ApplicantProcess"
  objects: {
    completedForms: Prisma.$APCompletedFormPayload<ExtArgs>[]
    applicant: Prisma.$UserPayload<ExtArgs>
    process: Prisma.$ProcessPayload<ExtArgs>
    processedApplications: Prisma.$ProcessedApplicationPayload<ExtArgs>[]
    responses: Prisma.$FormResponsePayload<ExtArgs>[]
    comments: Prisma.$ProcessCommentPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    applicantId: string
    processId: string
    status: $Enums.ProcessStatus
    createdAt: Date
  }, ExtArgs["result"]["applicantProcess"]>
  composites: {}
}

export type ApplicantProcessGetPayload<S extends boolean | null | undefined | ApplicantProcessDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ApplicantProcessPayload, S>

export type ApplicantProcessCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ApplicantProcessFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: ApplicantProcessCountAggregateInputType | true
  }

export interface ApplicantProcessDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApplicantProcess'], meta: { name: 'ApplicantProcess' } }
  /**
   * Find zero or one ApplicantProcess that matches the filter.
   * @param {ApplicantProcessFindUniqueArgs} args - Arguments to find a ApplicantProcess
   * @example
   * // Get one ApplicantProcess
   * const applicantProcess = await prisma.applicantProcess.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ApplicantProcessFindUniqueArgs>(args: Prisma.SelectSubset<T, ApplicantProcessFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ApplicantProcessClient<runtime.Types.Result.GetResult<Prisma.$ApplicantProcessPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ApplicantProcess that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ApplicantProcessFindUniqueOrThrowArgs} args - Arguments to find a ApplicantProcess
   * @example
   * // Get one ApplicantProcess
   * const applicantProcess = await prisma.applicantProcess.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ApplicantProcessFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ApplicantProcessFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ApplicantProcessClient<runtime.Types.Result.GetResult<Prisma.$ApplicantProcessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ApplicantProcess that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicantProcessFindFirstArgs} args - Arguments to find a ApplicantProcess
   * @example
   * // Get one ApplicantProcess
   * const applicantProcess = await prisma.applicantProcess.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ApplicantProcessFindFirstArgs>(args?: Prisma.SelectSubset<T, ApplicantProcessFindFirstArgs<ExtArgs>>): Prisma.Prisma__ApplicantProcessClient<runtime.Types.Result.GetResult<Prisma.$ApplicantProcessPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ApplicantProcess that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicantProcessFindFirstOrThrowArgs} args - Arguments to find a ApplicantProcess
   * @example
   * // Get one ApplicantProcess
   * const applicantProcess = await prisma.applicantProcess.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ApplicantProcessFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ApplicantProcessFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ApplicantProcessClient<runtime.Types.Result.GetResult<Prisma.$ApplicantProcessPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ApplicantProcesses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicantProcessFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ApplicantProcesses
   * const applicantProcesses = await prisma.applicantProcess.findMany()
   * 
   * // Get first 10 ApplicantProcesses
   * const applicantProcesses = await prisma.applicantProcess.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const applicantProcessWithIdOnly = await prisma.applicantProcess.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ApplicantProcessFindManyArgs>(args?: Prisma.SelectSubset<T, ApplicantProcessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ApplicantProcessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ApplicantProcess.
   * @param {ApplicantProcessCreateArgs} args - Arguments to create a ApplicantProcess.
   * @example
   * // Create one ApplicantProcess
   * const ApplicantProcess = await prisma.applicantProcess.create({
   *   data: {
   *     // ... data to create a ApplicantProcess
   *   }
   * })
   * 
   */
  create<T extends ApplicantProcessCreateArgs>(args: Prisma.SelectSubset<T, ApplicantProcessCreateArgs<ExtArgs>>): Prisma.Prisma__ApplicantProcessClient<runtime.Types.Result.GetResult<Prisma.$ApplicantProcessPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ApplicantProcesses.
   * @param {ApplicantProcessCreateManyArgs} args - Arguments to create many ApplicantProcesses.
   * @example
   * // Create many ApplicantProcesses
   * const applicantProcess = await prisma.applicantProcess.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ApplicantProcessCreateManyArgs>(args?: Prisma.SelectSubset<T, ApplicantProcessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ApplicantProcesses and returns the data saved in the database.
   * @param {ApplicantProcessCreateManyAndReturnArgs} args - Arguments to create many ApplicantProcesses.
   * @example
   * // Create many ApplicantProcesses
   * const applicantProcess = await prisma.applicantProcess.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ApplicantProcesses and only return the `id`
   * const applicantProcessWithIdOnly = await prisma.applicantProcess.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ApplicantProcessCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ApplicantProcessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ApplicantProcessPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ApplicantProcess.
   * @param {ApplicantProcessDeleteArgs} args - Arguments to delete one ApplicantProcess.
   * @example
   * // Delete one ApplicantProcess
   * const ApplicantProcess = await prisma.applicantProcess.delete({
   *   where: {
   *     // ... filter to delete one ApplicantProcess
   *   }
   * })
   * 
   */
  delete<T extends ApplicantProcessDeleteArgs>(args: Prisma.SelectSubset<T, ApplicantProcessDeleteArgs<ExtArgs>>): Prisma.Prisma__ApplicantProcessClient<runtime.Types.Result.GetResult<Prisma.$ApplicantProcessPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ApplicantProcess.
   * @param {ApplicantProcessUpdateArgs} args - Arguments to update one ApplicantProcess.
   * @example
   * // Update one ApplicantProcess
   * const applicantProcess = await prisma.applicantProcess.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ApplicantProcessUpdateArgs>(args: Prisma.SelectSubset<T, ApplicantProcessUpdateArgs<ExtArgs>>): Prisma.Prisma__ApplicantProcessClient<runtime.Types.Result.GetResult<Prisma.$ApplicantProcessPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ApplicantProcesses.
   * @param {ApplicantProcessDeleteManyArgs} args - Arguments to filter ApplicantProcesses to delete.
   * @example
   * // Delete a few ApplicantProcesses
   * const { count } = await prisma.applicantProcess.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ApplicantProcessDeleteManyArgs>(args?: Prisma.SelectSubset<T, ApplicantProcessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ApplicantProcesses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicantProcessUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ApplicantProcesses
   * const applicantProcess = await prisma.applicantProcess.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ApplicantProcessUpdateManyArgs>(args: Prisma.SelectSubset<T, ApplicantProcessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ApplicantProcesses and returns the data updated in the database.
   * @param {ApplicantProcessUpdateManyAndReturnArgs} args - Arguments to update many ApplicantProcesses.
   * @example
   * // Update many ApplicantProcesses
   * const applicantProcess = await prisma.applicantProcess.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ApplicantProcesses and only return the `id`
   * const applicantProcessWithIdOnly = await prisma.applicantProcess.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ApplicantProcessUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ApplicantProcessUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ApplicantProcessPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ApplicantProcess.
   * @param {ApplicantProcessUpsertArgs} args - Arguments to update or create a ApplicantProcess.
   * @example
   * // Update or create a ApplicantProcess
   * const applicantProcess = await prisma.applicantProcess.upsert({
   *   create: {
   *     // ... data to create a ApplicantProcess
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ApplicantProcess we want to update
   *   }
   * })
   */
  upsert<T extends ApplicantProcessUpsertArgs>(args: Prisma.SelectSubset<T, ApplicantProcessUpsertArgs<ExtArgs>>): Prisma.Prisma__ApplicantProcessClient<runtime.Types.Result.GetResult<Prisma.$ApplicantProcessPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ApplicantProcesses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicantProcessCountArgs} args - Arguments to filter ApplicantProcesses to count.
   * @example
   * // Count the number of ApplicantProcesses
   * const count = await prisma.applicantProcess.count({
   *   where: {
   *     // ... the filter for the ApplicantProcesses we want to count
   *   }
   * })
  **/
  count<T extends ApplicantProcessCountArgs>(
    args?: Prisma.Subset<T, ApplicantProcessCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ApplicantProcessCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ApplicantProcess.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicantProcessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ApplicantProcessAggregateArgs>(args: Prisma.Subset<T, ApplicantProcessAggregateArgs>): Prisma.PrismaPromise<GetApplicantProcessAggregateType<T>>

  /**
   * Group by ApplicantProcess.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApplicantProcessGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ApplicantProcessGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ApplicantProcessGroupByArgs['orderBy'] }
      : { orderBy?: ApplicantProcessGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ApplicantProcessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicantProcessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ApplicantProcess model
 */
readonly fields: ApplicantProcessFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ApplicantProcess.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ApplicantProcessClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  completedForms<T extends Prisma.ApplicantProcess$completedFormsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ApplicantProcess$completedFormsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$APCompletedFormPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  applicant<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  process<T extends Prisma.ProcessDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProcessDefaultArgs<ExtArgs>>): Prisma.Prisma__ProcessClient<runtime.Types.Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  processedApplications<T extends Prisma.ApplicantProcess$processedApplicationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ApplicantProcess$processedApplicationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessedApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  responses<T extends Prisma.ApplicantProcess$responsesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ApplicantProcess$responsesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  comments<T extends Prisma.ApplicantProcess$commentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ApplicantProcess$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ApplicantProcess model
 */
export interface ApplicantProcessFieldRefs {
  readonly id: Prisma.FieldRef<"ApplicantProcess", 'String'>
  readonly applicantId: Prisma.FieldRef<"ApplicantProcess", 'String'>
  readonly processId: Prisma.FieldRef<"ApplicantProcess", 'String'>
  readonly status: Prisma.FieldRef<"ApplicantProcess", 'ProcessStatus'>
  readonly createdAt: Prisma.FieldRef<"ApplicantProcess", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ApplicantProcess findUnique
 */
export type ApplicantProcessFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicantProcess
   */
  select?: Prisma.ApplicantProcessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicantProcess
   */
  omit?: Prisma.ApplicantProcessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicantProcessInclude<ExtArgs> | null
  /**
   * Filter, which ApplicantProcess to fetch.
   */
  where: Prisma.ApplicantProcessWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ApplicantProcess findUniqueOrThrow
 */
export type ApplicantProcessFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicantProcess
   */
  select?: Prisma.ApplicantProcessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicantProcess
   */
  omit?: Prisma.ApplicantProcessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicantProcessInclude<ExtArgs> | null
  /**
   * Filter, which ApplicantProcess to fetch.
   */
  where: Prisma.ApplicantProcessWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ApplicantProcess findFirst
 */
export type ApplicantProcessFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicantProcess
   */
  select?: Prisma.ApplicantProcessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicantProcess
   */
  omit?: Prisma.ApplicantProcessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicantProcessInclude<ExtArgs> | null
  /**
   * Filter, which ApplicantProcess to fetch.
   */
  where?: Prisma.ApplicantProcessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ApplicantProcesses to fetch.
   */
  orderBy?: Prisma.ApplicantProcessOrderByWithRelationInput | Prisma.ApplicantProcessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ApplicantProcesses.
   */
  cursor?: Prisma.ApplicantProcessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ApplicantProcesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ApplicantProcesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ApplicantProcesses.
   */
  distinct?: Prisma.ApplicantProcessScalarFieldEnum | Prisma.ApplicantProcessScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ApplicantProcess findFirstOrThrow
 */
export type ApplicantProcessFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicantProcess
   */
  select?: Prisma.ApplicantProcessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicantProcess
   */
  omit?: Prisma.ApplicantProcessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicantProcessInclude<ExtArgs> | null
  /**
   * Filter, which ApplicantProcess to fetch.
   */
  where?: Prisma.ApplicantProcessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ApplicantProcesses to fetch.
   */
  orderBy?: Prisma.ApplicantProcessOrderByWithRelationInput | Prisma.ApplicantProcessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ApplicantProcesses.
   */
  cursor?: Prisma.ApplicantProcessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ApplicantProcesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ApplicantProcesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ApplicantProcesses.
   */
  distinct?: Prisma.ApplicantProcessScalarFieldEnum | Prisma.ApplicantProcessScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ApplicantProcess findMany
 */
export type ApplicantProcessFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicantProcess
   */
  select?: Prisma.ApplicantProcessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicantProcess
   */
  omit?: Prisma.ApplicantProcessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicantProcessInclude<ExtArgs> | null
  /**
   * Filter, which ApplicantProcesses to fetch.
   */
  where?: Prisma.ApplicantProcessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ApplicantProcesses to fetch.
   */
  orderBy?: Prisma.ApplicantProcessOrderByWithRelationInput | Prisma.ApplicantProcessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ApplicantProcesses.
   */
  cursor?: Prisma.ApplicantProcessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ApplicantProcesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ApplicantProcesses.
   */
  skip?: number
  distinct?: Prisma.ApplicantProcessScalarFieldEnum | Prisma.ApplicantProcessScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ApplicantProcess create
 */
export type ApplicantProcessCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicantProcess
   */
  select?: Prisma.ApplicantProcessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicantProcess
   */
  omit?: Prisma.ApplicantProcessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicantProcessInclude<ExtArgs> | null
  /**
   * The data needed to create a ApplicantProcess.
   */
  data: Prisma.XOR<Prisma.ApplicantProcessCreateInput, Prisma.ApplicantProcessUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ApplicantProcess createMany
 */
export type ApplicantProcessCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ApplicantProcesses.
   */
  data: Prisma.ApplicantProcessCreateManyInput | Prisma.ApplicantProcessCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ApplicantProcess createManyAndReturn
 */
export type ApplicantProcessCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicantProcess
   */
  select?: Prisma.ApplicantProcessSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicantProcess
   */
  omit?: Prisma.ApplicantProcessOmit<ExtArgs> | null
  /**
   * The data used to create many ApplicantProcesses.
   */
  data: Prisma.ApplicantProcessCreateManyInput | Prisma.ApplicantProcessCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicantProcessIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ApplicantProcess update
 */
export type ApplicantProcessUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicantProcess
   */
  select?: Prisma.ApplicantProcessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicantProcess
   */
  omit?: Prisma.ApplicantProcessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicantProcessInclude<ExtArgs> | null
  /**
   * The data needed to update a ApplicantProcess.
   */
  data: Prisma.XOR<Prisma.ApplicantProcessUpdateInput, Prisma.ApplicantProcessUncheckedUpdateInput>
  /**
   * Choose, which ApplicantProcess to update.
   */
  where: Prisma.ApplicantProcessWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ApplicantProcess updateMany
 */
export type ApplicantProcessUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ApplicantProcesses.
   */
  data: Prisma.XOR<Prisma.ApplicantProcessUpdateManyMutationInput, Prisma.ApplicantProcessUncheckedUpdateManyInput>
  /**
   * Filter which ApplicantProcesses to update
   */
  where?: Prisma.ApplicantProcessWhereInput
  /**
   * Limit how many ApplicantProcesses to update.
   */
  limit?: number
}

/**
 * ApplicantProcess updateManyAndReturn
 */
export type ApplicantProcessUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicantProcess
   */
  select?: Prisma.ApplicantProcessSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicantProcess
   */
  omit?: Prisma.ApplicantProcessOmit<ExtArgs> | null
  /**
   * The data used to update ApplicantProcesses.
   */
  data: Prisma.XOR<Prisma.ApplicantProcessUpdateManyMutationInput, Prisma.ApplicantProcessUncheckedUpdateManyInput>
  /**
   * Filter which ApplicantProcesses to update
   */
  where?: Prisma.ApplicantProcessWhereInput
  /**
   * Limit how many ApplicantProcesses to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicantProcessIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ApplicantProcess upsert
 */
export type ApplicantProcessUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicantProcess
   */
  select?: Prisma.ApplicantProcessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicantProcess
   */
  omit?: Prisma.ApplicantProcessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicantProcessInclude<ExtArgs> | null
  /**
   * The filter to search for the ApplicantProcess to update in case it exists.
   */
  where: Prisma.ApplicantProcessWhereUniqueInput
  /**
   * In case the ApplicantProcess found by the `where` argument doesn't exist, create a new ApplicantProcess with this data.
   */
  create: Prisma.XOR<Prisma.ApplicantProcessCreateInput, Prisma.ApplicantProcessUncheckedCreateInput>
  /**
   * In case the ApplicantProcess was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ApplicantProcessUpdateInput, Prisma.ApplicantProcessUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ApplicantProcess delete
 */
export type ApplicantProcessDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicantProcess
   */
  select?: Prisma.ApplicantProcessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicantProcess
   */
  omit?: Prisma.ApplicantProcessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicantProcessInclude<ExtArgs> | null
  /**
   * Filter which ApplicantProcess to delete.
   */
  where: Prisma.ApplicantProcessWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ApplicantProcess deleteMany
 */
export type ApplicantProcessDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ApplicantProcesses to delete
   */
  where?: Prisma.ApplicantProcessWhereInput
  /**
   * Limit how many ApplicantProcesses to delete.
   */
  limit?: number
}

/**
 * ApplicantProcess.completedForms
 */
export type ApplicantProcess$completedFormsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the APCompletedForm
   */
  select?: Prisma.APCompletedFormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the APCompletedForm
   */
  omit?: Prisma.APCompletedFormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.APCompletedFormInclude<ExtArgs> | null
  where?: Prisma.APCompletedFormWhereInput
  orderBy?: Prisma.APCompletedFormOrderByWithRelationInput | Prisma.APCompletedFormOrderByWithRelationInput[]
  cursor?: Prisma.APCompletedFormWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.APCompletedFormScalarFieldEnum | Prisma.APCompletedFormScalarFieldEnum[]
}

/**
 * ApplicantProcess.processedApplications
 */
export type ApplicantProcess$processedApplicationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessedApplication
   */
  select?: Prisma.ProcessedApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessedApplication
   */
  omit?: Prisma.ProcessedApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessedApplicationInclude<ExtArgs> | null
  where?: Prisma.ProcessedApplicationWhereInput
  orderBy?: Prisma.ProcessedApplicationOrderByWithRelationInput | Prisma.ProcessedApplicationOrderByWithRelationInput[]
  cursor?: Prisma.ProcessedApplicationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProcessedApplicationScalarFieldEnum | Prisma.ProcessedApplicationScalarFieldEnum[]
}

/**
 * ApplicantProcess.responses
 */
export type ApplicantProcess$responsesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormResponse
   */
  select?: Prisma.FormResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormResponse
   */
  omit?: Prisma.FormResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormResponseInclude<ExtArgs> | null
  where?: Prisma.FormResponseWhereInput
  orderBy?: Prisma.FormResponseOrderByWithRelationInput | Prisma.FormResponseOrderByWithRelationInput[]
  cursor?: Prisma.FormResponseWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FormResponseScalarFieldEnum | Prisma.FormResponseScalarFieldEnum[]
}

/**
 * ApplicantProcess.comments
 */
export type ApplicantProcess$commentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessComment
   */
  select?: Prisma.ProcessCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessComment
   */
  omit?: Prisma.ProcessCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessCommentInclude<ExtArgs> | null
  where?: Prisma.ProcessCommentWhereInput
  orderBy?: Prisma.ProcessCommentOrderByWithRelationInput | Prisma.ProcessCommentOrderByWithRelationInput[]
  cursor?: Prisma.ProcessCommentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProcessCommentScalarFieldEnum | Prisma.ProcessCommentScalarFieldEnum[]
}

/**
 * ApplicantProcess without action
 */
export type ApplicantProcessDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApplicantProcess
   */
  select?: Prisma.ApplicantProcessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApplicantProcess
   */
  omit?: Prisma.ApplicantProcessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApplicantProcessInclude<ExtArgs> | null
}
