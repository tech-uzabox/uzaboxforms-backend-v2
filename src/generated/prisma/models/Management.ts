
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Management` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Management
 * 
 */
export type ManagementModel = runtime.Types.Result.DefaultSelection<Prisma.$ManagementPayload>

export type AggregateManagement = {
  _count: ManagementCountAggregateOutputType | null
  _min: ManagementMinAggregateOutputType | null
  _max: ManagementMaxAggregateOutputType | null
}

export type ManagementMinAggregateOutputType = {
  id: string | null
  fileName: string | null
  fileUrl: string | null
  type: $Enums.ManagementType | null
  uploadedAt: Date | null
  updatedAt: Date | null
}

export type ManagementMaxAggregateOutputType = {
  id: string | null
  fileName: string | null
  fileUrl: string | null
  type: $Enums.ManagementType | null
  uploadedAt: Date | null
  updatedAt: Date | null
}

export type ManagementCountAggregateOutputType = {
  id: number
  fileName: number
  fileUrl: number
  type: number
  uploadedAt: number
  updatedAt: number
  _all: number
}


export type ManagementMinAggregateInputType = {
  id?: true
  fileName?: true
  fileUrl?: true
  type?: true
  uploadedAt?: true
  updatedAt?: true
}

export type ManagementMaxAggregateInputType = {
  id?: true
  fileName?: true
  fileUrl?: true
  type?: true
  uploadedAt?: true
  updatedAt?: true
}

export type ManagementCountAggregateInputType = {
  id?: true
  fileName?: true
  fileUrl?: true
  type?: true
  uploadedAt?: true
  updatedAt?: true
  _all?: true
}

export type ManagementAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Management to aggregate.
   */
  where?: Prisma.ManagementWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Managements to fetch.
   */
  orderBy?: Prisma.ManagementOrderByWithRelationInput | Prisma.ManagementOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ManagementWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Managements from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Managements.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Managements
  **/
  _count?: true | ManagementCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ManagementMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ManagementMaxAggregateInputType
}

export type GetManagementAggregateType<T extends ManagementAggregateArgs> = {
      [P in keyof T & keyof AggregateManagement]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateManagement[P]>
    : Prisma.GetScalarType<T[P], AggregateManagement[P]>
}




export type ManagementGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ManagementWhereInput
  orderBy?: Prisma.ManagementOrderByWithAggregationInput | Prisma.ManagementOrderByWithAggregationInput[]
  by: Prisma.ManagementScalarFieldEnum[] | Prisma.ManagementScalarFieldEnum
  having?: Prisma.ManagementScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ManagementCountAggregateInputType | true
  _min?: ManagementMinAggregateInputType
  _max?: ManagementMaxAggregateInputType
}

export type ManagementGroupByOutputType = {
  id: string
  fileName: string
  fileUrl: string | null
  type: $Enums.ManagementType
  uploadedAt: Date
  updatedAt: Date
  _count: ManagementCountAggregateOutputType | null
  _min: ManagementMinAggregateOutputType | null
  _max: ManagementMaxAggregateOutputType | null
}

type GetManagementGroupByPayload<T extends ManagementGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ManagementGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ManagementGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ManagementGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ManagementGroupByOutputType[P]>
      }
    >
  >



export type ManagementWhereInput = {
  AND?: Prisma.ManagementWhereInput | Prisma.ManagementWhereInput[]
  OR?: Prisma.ManagementWhereInput[]
  NOT?: Prisma.ManagementWhereInput | Prisma.ManagementWhereInput[]
  id?: Prisma.UuidFilter<"Management"> | string
  fileName?: Prisma.StringFilter<"Management"> | string
  fileUrl?: Prisma.StringNullableFilter<"Management"> | string | null
  type?: Prisma.EnumManagementTypeFilter<"Management"> | $Enums.ManagementType
  uploadedAt?: Prisma.DateTimeFilter<"Management"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Management"> | Date | string
}

export type ManagementOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _relevance?: Prisma.ManagementOrderByRelevanceInput
}

export type ManagementWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ManagementWhereInput | Prisma.ManagementWhereInput[]
  OR?: Prisma.ManagementWhereInput[]
  NOT?: Prisma.ManagementWhereInput | Prisma.ManagementWhereInput[]
  fileName?: Prisma.StringFilter<"Management"> | string
  fileUrl?: Prisma.StringNullableFilter<"Management"> | string | null
  type?: Prisma.EnumManagementTypeFilter<"Management"> | $Enums.ManagementType
  uploadedAt?: Prisma.DateTimeFilter<"Management"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Management"> | Date | string
}, "id">

export type ManagementOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ManagementCountOrderByAggregateInput
  _max?: Prisma.ManagementMaxOrderByAggregateInput
  _min?: Prisma.ManagementMinOrderByAggregateInput
}

export type ManagementScalarWhereWithAggregatesInput = {
  AND?: Prisma.ManagementScalarWhereWithAggregatesInput | Prisma.ManagementScalarWhereWithAggregatesInput[]
  OR?: Prisma.ManagementScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ManagementScalarWhereWithAggregatesInput | Prisma.ManagementScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Management"> | string
  fileName?: Prisma.StringWithAggregatesFilter<"Management"> | string
  fileUrl?: Prisma.StringNullableWithAggregatesFilter<"Management"> | string | null
  type?: Prisma.EnumManagementTypeWithAggregatesFilter<"Management"> | $Enums.ManagementType
  uploadedAt?: Prisma.DateTimeWithAggregatesFilter<"Management"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Management"> | Date | string
}

export type ManagementCreateInput = {
  id?: string
  fileName: string
  fileUrl?: string | null
  type: $Enums.ManagementType
  uploadedAt?: Date | string
  updatedAt?: Date | string
}

export type ManagementUncheckedCreateInput = {
  id?: string
  fileName: string
  fileUrl?: string | null
  type: $Enums.ManagementType
  uploadedAt?: Date | string
  updatedAt?: Date | string
}

export type ManagementUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.EnumManagementTypeFieldUpdateOperationsInput | $Enums.ManagementType
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ManagementUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.EnumManagementTypeFieldUpdateOperationsInput | $Enums.ManagementType
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ManagementCreateManyInput = {
  id?: string
  fileName: string
  fileUrl?: string | null
  type: $Enums.ManagementType
  uploadedAt?: Date | string
  updatedAt?: Date | string
}

export type ManagementUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.EnumManagementTypeFieldUpdateOperationsInput | $Enums.ManagementType
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ManagementUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.EnumManagementTypeFieldUpdateOperationsInput | $Enums.ManagementType
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ManagementOrderByRelevanceInput = {
  fields: Prisma.ManagementOrderByRelevanceFieldEnum | Prisma.ManagementOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ManagementCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrder
  type?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ManagementMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrder
  type?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ManagementMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrder
  type?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EnumManagementTypeFieldUpdateOperationsInput = {
  set?: $Enums.ManagementType
}



export type ManagementSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fileName?: boolean
  fileUrl?: boolean
  type?: boolean
  uploadedAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["management"]>

export type ManagementSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fileName?: boolean
  fileUrl?: boolean
  type?: boolean
  uploadedAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["management"]>

export type ManagementSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fileName?: boolean
  fileUrl?: boolean
  type?: boolean
  uploadedAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["management"]>

export type ManagementSelectScalar = {
  id?: boolean
  fileName?: boolean
  fileUrl?: boolean
  type?: boolean
  uploadedAt?: boolean
  updatedAt?: boolean
}

export type ManagementOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "fileName" | "fileUrl" | "type" | "uploadedAt" | "updatedAt", ExtArgs["result"]["management"]>

export type $ManagementPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Management"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    fileName: string
    fileUrl: string | null
    type: $Enums.ManagementType
    uploadedAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["management"]>
  composites: {}
}

export type ManagementGetPayload<S extends boolean | null | undefined | ManagementDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ManagementPayload, S>

export type ManagementCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ManagementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: ManagementCountAggregateInputType | true
  }

export interface ManagementDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Management'], meta: { name: 'Management' } }
  /**
   * Find zero or one Management that matches the filter.
   * @param {ManagementFindUniqueArgs} args - Arguments to find a Management
   * @example
   * // Get one Management
   * const management = await prisma.management.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ManagementFindUniqueArgs>(args: Prisma.SelectSubset<T, ManagementFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ManagementClient<runtime.Types.Result.GetResult<Prisma.$ManagementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Management that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ManagementFindUniqueOrThrowArgs} args - Arguments to find a Management
   * @example
   * // Get one Management
   * const management = await prisma.management.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ManagementFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ManagementFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ManagementClient<runtime.Types.Result.GetResult<Prisma.$ManagementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Management that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagementFindFirstArgs} args - Arguments to find a Management
   * @example
   * // Get one Management
   * const management = await prisma.management.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ManagementFindFirstArgs>(args?: Prisma.SelectSubset<T, ManagementFindFirstArgs<ExtArgs>>): Prisma.Prisma__ManagementClient<runtime.Types.Result.GetResult<Prisma.$ManagementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Management that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagementFindFirstOrThrowArgs} args - Arguments to find a Management
   * @example
   * // Get one Management
   * const management = await prisma.management.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ManagementFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ManagementFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ManagementClient<runtime.Types.Result.GetResult<Prisma.$ManagementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Managements that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagementFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Managements
   * const managements = await prisma.management.findMany()
   * 
   * // Get first 10 Managements
   * const managements = await prisma.management.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const managementWithIdOnly = await prisma.management.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ManagementFindManyArgs>(args?: Prisma.SelectSubset<T, ManagementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ManagementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Management.
   * @param {ManagementCreateArgs} args - Arguments to create a Management.
   * @example
   * // Create one Management
   * const Management = await prisma.management.create({
   *   data: {
   *     // ... data to create a Management
   *   }
   * })
   * 
   */
  create<T extends ManagementCreateArgs>(args: Prisma.SelectSubset<T, ManagementCreateArgs<ExtArgs>>): Prisma.Prisma__ManagementClient<runtime.Types.Result.GetResult<Prisma.$ManagementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Managements.
   * @param {ManagementCreateManyArgs} args - Arguments to create many Managements.
   * @example
   * // Create many Managements
   * const management = await prisma.management.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ManagementCreateManyArgs>(args?: Prisma.SelectSubset<T, ManagementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Managements and returns the data saved in the database.
   * @param {ManagementCreateManyAndReturnArgs} args - Arguments to create many Managements.
   * @example
   * // Create many Managements
   * const management = await prisma.management.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Managements and only return the `id`
   * const managementWithIdOnly = await prisma.management.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ManagementCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ManagementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ManagementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Management.
   * @param {ManagementDeleteArgs} args - Arguments to delete one Management.
   * @example
   * // Delete one Management
   * const Management = await prisma.management.delete({
   *   where: {
   *     // ... filter to delete one Management
   *   }
   * })
   * 
   */
  delete<T extends ManagementDeleteArgs>(args: Prisma.SelectSubset<T, ManagementDeleteArgs<ExtArgs>>): Prisma.Prisma__ManagementClient<runtime.Types.Result.GetResult<Prisma.$ManagementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Management.
   * @param {ManagementUpdateArgs} args - Arguments to update one Management.
   * @example
   * // Update one Management
   * const management = await prisma.management.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ManagementUpdateArgs>(args: Prisma.SelectSubset<T, ManagementUpdateArgs<ExtArgs>>): Prisma.Prisma__ManagementClient<runtime.Types.Result.GetResult<Prisma.$ManagementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Managements.
   * @param {ManagementDeleteManyArgs} args - Arguments to filter Managements to delete.
   * @example
   * // Delete a few Managements
   * const { count } = await prisma.management.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ManagementDeleteManyArgs>(args?: Prisma.SelectSubset<T, ManagementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Managements.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagementUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Managements
   * const management = await prisma.management.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ManagementUpdateManyArgs>(args: Prisma.SelectSubset<T, ManagementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Managements and returns the data updated in the database.
   * @param {ManagementUpdateManyAndReturnArgs} args - Arguments to update many Managements.
   * @example
   * // Update many Managements
   * const management = await prisma.management.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Managements and only return the `id`
   * const managementWithIdOnly = await prisma.management.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ManagementUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ManagementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ManagementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Management.
   * @param {ManagementUpsertArgs} args - Arguments to update or create a Management.
   * @example
   * // Update or create a Management
   * const management = await prisma.management.upsert({
   *   create: {
   *     // ... data to create a Management
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Management we want to update
   *   }
   * })
   */
  upsert<T extends ManagementUpsertArgs>(args: Prisma.SelectSubset<T, ManagementUpsertArgs<ExtArgs>>): Prisma.Prisma__ManagementClient<runtime.Types.Result.GetResult<Prisma.$ManagementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Managements.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagementCountArgs} args - Arguments to filter Managements to count.
   * @example
   * // Count the number of Managements
   * const count = await prisma.management.count({
   *   where: {
   *     // ... the filter for the Managements we want to count
   *   }
   * })
  **/
  count<T extends ManagementCountArgs>(
    args?: Prisma.Subset<T, ManagementCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ManagementCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Management.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ManagementAggregateArgs>(args: Prisma.Subset<T, ManagementAggregateArgs>): Prisma.PrismaPromise<GetManagementAggregateType<T>>

  /**
   * Group by Management.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagementGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ManagementGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ManagementGroupByArgs['orderBy'] }
      : { orderBy?: ManagementGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ManagementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetManagementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Management model
 */
readonly fields: ManagementFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Management.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ManagementClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Management model
 */
export interface ManagementFieldRefs {
  readonly id: Prisma.FieldRef<"Management", 'String'>
  readonly fileName: Prisma.FieldRef<"Management", 'String'>
  readonly fileUrl: Prisma.FieldRef<"Management", 'String'>
  readonly type: Prisma.FieldRef<"Management", 'ManagementType'>
  readonly uploadedAt: Prisma.FieldRef<"Management", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Management", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Management findUnique
 */
export type ManagementFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Management
   */
  select?: Prisma.ManagementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Management
   */
  omit?: Prisma.ManagementOmit<ExtArgs> | null
  /**
   * Filter, which Management to fetch.
   */
  where: Prisma.ManagementWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Management findUniqueOrThrow
 */
export type ManagementFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Management
   */
  select?: Prisma.ManagementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Management
   */
  omit?: Prisma.ManagementOmit<ExtArgs> | null
  /**
   * Filter, which Management to fetch.
   */
  where: Prisma.ManagementWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Management findFirst
 */
export type ManagementFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Management
   */
  select?: Prisma.ManagementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Management
   */
  omit?: Prisma.ManagementOmit<ExtArgs> | null
  /**
   * Filter, which Management to fetch.
   */
  where?: Prisma.ManagementWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Managements to fetch.
   */
  orderBy?: Prisma.ManagementOrderByWithRelationInput | Prisma.ManagementOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Managements.
   */
  cursor?: Prisma.ManagementWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Managements from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Managements.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Managements.
   */
  distinct?: Prisma.ManagementScalarFieldEnum | Prisma.ManagementScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Management findFirstOrThrow
 */
export type ManagementFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Management
   */
  select?: Prisma.ManagementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Management
   */
  omit?: Prisma.ManagementOmit<ExtArgs> | null
  /**
   * Filter, which Management to fetch.
   */
  where?: Prisma.ManagementWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Managements to fetch.
   */
  orderBy?: Prisma.ManagementOrderByWithRelationInput | Prisma.ManagementOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Managements.
   */
  cursor?: Prisma.ManagementWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Managements from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Managements.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Managements.
   */
  distinct?: Prisma.ManagementScalarFieldEnum | Prisma.ManagementScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Management findMany
 */
export type ManagementFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Management
   */
  select?: Prisma.ManagementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Management
   */
  omit?: Prisma.ManagementOmit<ExtArgs> | null
  /**
   * Filter, which Managements to fetch.
   */
  where?: Prisma.ManagementWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Managements to fetch.
   */
  orderBy?: Prisma.ManagementOrderByWithRelationInput | Prisma.ManagementOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Managements.
   */
  cursor?: Prisma.ManagementWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Managements from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Managements.
   */
  skip?: number
  distinct?: Prisma.ManagementScalarFieldEnum | Prisma.ManagementScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Management create
 */
export type ManagementCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Management
   */
  select?: Prisma.ManagementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Management
   */
  omit?: Prisma.ManagementOmit<ExtArgs> | null
  /**
   * The data needed to create a Management.
   */
  data: Prisma.XOR<Prisma.ManagementCreateInput, Prisma.ManagementUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Management createMany
 */
export type ManagementCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Managements.
   */
  data: Prisma.ManagementCreateManyInput | Prisma.ManagementCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Management createManyAndReturn
 */
export type ManagementCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Management
   */
  select?: Prisma.ManagementSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Management
   */
  omit?: Prisma.ManagementOmit<ExtArgs> | null
  /**
   * The data used to create many Managements.
   */
  data: Prisma.ManagementCreateManyInput | Prisma.ManagementCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Management update
 */
export type ManagementUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Management
   */
  select?: Prisma.ManagementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Management
   */
  omit?: Prisma.ManagementOmit<ExtArgs> | null
  /**
   * The data needed to update a Management.
   */
  data: Prisma.XOR<Prisma.ManagementUpdateInput, Prisma.ManagementUncheckedUpdateInput>
  /**
   * Choose, which Management to update.
   */
  where: Prisma.ManagementWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Management updateMany
 */
export type ManagementUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Managements.
   */
  data: Prisma.XOR<Prisma.ManagementUpdateManyMutationInput, Prisma.ManagementUncheckedUpdateManyInput>
  /**
   * Filter which Managements to update
   */
  where?: Prisma.ManagementWhereInput
  /**
   * Limit how many Managements to update.
   */
  limit?: number
}

/**
 * Management updateManyAndReturn
 */
export type ManagementUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Management
   */
  select?: Prisma.ManagementSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Management
   */
  omit?: Prisma.ManagementOmit<ExtArgs> | null
  /**
   * The data used to update Managements.
   */
  data: Prisma.XOR<Prisma.ManagementUpdateManyMutationInput, Prisma.ManagementUncheckedUpdateManyInput>
  /**
   * Filter which Managements to update
   */
  where?: Prisma.ManagementWhereInput
  /**
   * Limit how many Managements to update.
   */
  limit?: number
}

/**
 * Management upsert
 */
export type ManagementUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Management
   */
  select?: Prisma.ManagementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Management
   */
  omit?: Prisma.ManagementOmit<ExtArgs> | null
  /**
   * The filter to search for the Management to update in case it exists.
   */
  where: Prisma.ManagementWhereUniqueInput
  /**
   * In case the Management found by the `where` argument doesn't exist, create a new Management with this data.
   */
  create: Prisma.XOR<Prisma.ManagementCreateInput, Prisma.ManagementUncheckedCreateInput>
  /**
   * In case the Management was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ManagementUpdateInput, Prisma.ManagementUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Management delete
 */
export type ManagementDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Management
   */
  select?: Prisma.ManagementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Management
   */
  omit?: Prisma.ManagementOmit<ExtArgs> | null
  /**
   * Filter which Management to delete.
   */
  where: Prisma.ManagementWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Management deleteMany
 */
export type ManagementDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Managements to delete
   */
  where?: Prisma.ManagementWhereInput
  /**
   * Limit how many Managements to delete.
   */
  limit?: number
}

/**
 * Management without action
 */
export type ManagementDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Management
   */
  select?: Prisma.ManagementSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Management
   */
  omit?: Prisma.ManagementOmit<ExtArgs> | null
}
