
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProcessForm` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model ProcessForm
 * 
 */
export type ProcessFormModel = runtime.Types.Result.DefaultSelection<Prisma.$ProcessFormPayload>

export type AggregateProcessForm = {
  _count: ProcessFormCountAggregateOutputType | null
  _avg: ProcessFormAvgAggregateOutputType | null
  _sum: ProcessFormSumAggregateOutputType | null
  _min: ProcessFormMinAggregateOutputType | null
  _max: ProcessFormMaxAggregateOutputType | null
}

export type ProcessFormAvgAggregateOutputType = {
  order: number | null
}

export type ProcessFormSumAggregateOutputType = {
  order: number | null
}

export type ProcessFormMinAggregateOutputType = {
  id: string | null
  processId: string | null
  formId: string | null
  order: number | null
  nextStepType: $Enums.NextStepType | null
  nextStaffId: string | null
  nextStepSpecifiedTo: string | null
  notificationType: $Enums.NextStepType | null
  notificationToId: string | null
  notificationComment: string | null
  notifyApplicant: boolean | null
  applicantNotificationContent: string | null
  editApplicationStatus: boolean | null
  applicantViewFormAfterCompletion: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProcessFormMaxAggregateOutputType = {
  id: string | null
  processId: string | null
  formId: string | null
  order: number | null
  nextStepType: $Enums.NextStepType | null
  nextStaffId: string | null
  nextStepSpecifiedTo: string | null
  notificationType: $Enums.NextStepType | null
  notificationToId: string | null
  notificationComment: string | null
  notifyApplicant: boolean | null
  applicantNotificationContent: string | null
  editApplicationStatus: boolean | null
  applicantViewFormAfterCompletion: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProcessFormCountAggregateOutputType = {
  id: number
  processId: number
  formId: number
  order: number
  nextStepType: number
  nextStepRoles: number
  nextStaffId: number
  nextStepSpecifiedTo: number
  notificationType: number
  notificationRoles: number
  notificationToId: number
  notificationComment: number
  notifyApplicant: number
  applicantNotificationContent: number
  editApplicationStatus: number
  applicantViewFormAfterCompletion: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProcessFormAvgAggregateInputType = {
  order?: true
}

export type ProcessFormSumAggregateInputType = {
  order?: true
}

export type ProcessFormMinAggregateInputType = {
  id?: true
  processId?: true
  formId?: true
  order?: true
  nextStepType?: true
  nextStaffId?: true
  nextStepSpecifiedTo?: true
  notificationType?: true
  notificationToId?: true
  notificationComment?: true
  notifyApplicant?: true
  applicantNotificationContent?: true
  editApplicationStatus?: true
  applicantViewFormAfterCompletion?: true
  createdAt?: true
  updatedAt?: true
}

export type ProcessFormMaxAggregateInputType = {
  id?: true
  processId?: true
  formId?: true
  order?: true
  nextStepType?: true
  nextStaffId?: true
  nextStepSpecifiedTo?: true
  notificationType?: true
  notificationToId?: true
  notificationComment?: true
  notifyApplicant?: true
  applicantNotificationContent?: true
  editApplicationStatus?: true
  applicantViewFormAfterCompletion?: true
  createdAt?: true
  updatedAt?: true
}

export type ProcessFormCountAggregateInputType = {
  id?: true
  processId?: true
  formId?: true
  order?: true
  nextStepType?: true
  nextStepRoles?: true
  nextStaffId?: true
  nextStepSpecifiedTo?: true
  notificationType?: true
  notificationRoles?: true
  notificationToId?: true
  notificationComment?: true
  notifyApplicant?: true
  applicantNotificationContent?: true
  editApplicationStatus?: true
  applicantViewFormAfterCompletion?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProcessFormAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProcessForm to aggregate.
   */
  where?: Prisma.ProcessFormWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessForms to fetch.
   */
  orderBy?: Prisma.ProcessFormOrderByWithRelationInput | Prisma.ProcessFormOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProcessFormWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessForms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessForms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProcessForms
  **/
  _count?: true | ProcessFormCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProcessFormAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProcessFormSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProcessFormMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProcessFormMaxAggregateInputType
}

export type GetProcessFormAggregateType<T extends ProcessFormAggregateArgs> = {
      [P in keyof T & keyof AggregateProcessForm]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProcessForm[P]>
    : Prisma.GetScalarType<T[P], AggregateProcessForm[P]>
}




export type ProcessFormGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProcessFormWhereInput
  orderBy?: Prisma.ProcessFormOrderByWithAggregationInput | Prisma.ProcessFormOrderByWithAggregationInput[]
  by: Prisma.ProcessFormScalarFieldEnum[] | Prisma.ProcessFormScalarFieldEnum
  having?: Prisma.ProcessFormScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProcessFormCountAggregateInputType | true
  _avg?: ProcessFormAvgAggregateInputType
  _sum?: ProcessFormSumAggregateInputType
  _min?: ProcessFormMinAggregateInputType
  _max?: ProcessFormMaxAggregateInputType
}

export type ProcessFormGroupByOutputType = {
  id: string
  processId: string
  formId: string
  order: number
  nextStepType: $Enums.NextStepType
  nextStepRoles: string[]
  nextStaffId: string | null
  nextStepSpecifiedTo: string | null
  notificationType: $Enums.NextStepType
  notificationRoles: string[]
  notificationToId: string | null
  notificationComment: string | null
  notifyApplicant: boolean
  applicantNotificationContent: string | null
  editApplicationStatus: boolean
  applicantViewFormAfterCompletion: boolean
  createdAt: Date
  updatedAt: Date
  _count: ProcessFormCountAggregateOutputType | null
  _avg: ProcessFormAvgAggregateOutputType | null
  _sum: ProcessFormSumAggregateOutputType | null
  _min: ProcessFormMinAggregateOutputType | null
  _max: ProcessFormMaxAggregateOutputType | null
}

type GetProcessFormGroupByPayload<T extends ProcessFormGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProcessFormGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProcessFormGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProcessFormGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProcessFormGroupByOutputType[P]>
      }
    >
  >



export type ProcessFormWhereInput = {
  AND?: Prisma.ProcessFormWhereInput | Prisma.ProcessFormWhereInput[]
  OR?: Prisma.ProcessFormWhereInput[]
  NOT?: Prisma.ProcessFormWhereInput | Prisma.ProcessFormWhereInput[]
  id?: Prisma.UuidFilter<"ProcessForm"> | string
  processId?: Prisma.UuidFilter<"ProcessForm"> | string
  formId?: Prisma.UuidFilter<"ProcessForm"> | string
  order?: Prisma.IntFilter<"ProcessForm"> | number
  nextStepType?: Prisma.EnumNextStepTypeFilter<"ProcessForm"> | $Enums.NextStepType
  nextStepRoles?: Prisma.StringNullableListFilter<"ProcessForm">
  nextStaffId?: Prisma.UuidNullableFilter<"ProcessForm"> | string | null
  nextStepSpecifiedTo?: Prisma.StringNullableFilter<"ProcessForm"> | string | null
  notificationType?: Prisma.EnumNextStepTypeFilter<"ProcessForm"> | $Enums.NextStepType
  notificationRoles?: Prisma.StringNullableListFilter<"ProcessForm">
  notificationToId?: Prisma.UuidNullableFilter<"ProcessForm"> | string | null
  notificationComment?: Prisma.StringNullableFilter<"ProcessForm"> | string | null
  notifyApplicant?: Prisma.BoolFilter<"ProcessForm"> | boolean
  applicantNotificationContent?: Prisma.StringNullableFilter<"ProcessForm"> | string | null
  editApplicationStatus?: Prisma.BoolFilter<"ProcessForm"> | boolean
  applicantViewFormAfterCompletion?: Prisma.BoolFilter<"ProcessForm"> | boolean
  createdAt?: Prisma.DateTimeFilter<"ProcessForm"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProcessForm"> | Date | string
  form?: Prisma.XOR<Prisma.FormScalarRelationFilter, Prisma.FormWhereInput>
  process?: Prisma.XOR<Prisma.ProcessScalarRelationFilter, Prisma.ProcessWhereInput>
}

export type ProcessFormOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  processId?: Prisma.SortOrder
  formId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  nextStepType?: Prisma.SortOrder
  nextStepRoles?: Prisma.SortOrder
  nextStaffId?: Prisma.SortOrderInput | Prisma.SortOrder
  nextStepSpecifiedTo?: Prisma.SortOrderInput | Prisma.SortOrder
  notificationType?: Prisma.SortOrder
  notificationRoles?: Prisma.SortOrder
  notificationToId?: Prisma.SortOrderInput | Prisma.SortOrder
  notificationComment?: Prisma.SortOrderInput | Prisma.SortOrder
  notifyApplicant?: Prisma.SortOrder
  applicantNotificationContent?: Prisma.SortOrderInput | Prisma.SortOrder
  editApplicationStatus?: Prisma.SortOrder
  applicantViewFormAfterCompletion?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  form?: Prisma.FormOrderByWithRelationInput
  process?: Prisma.ProcessOrderByWithRelationInput
  _relevance?: Prisma.ProcessFormOrderByRelevanceInput
}

export type ProcessFormWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProcessFormWhereInput | Prisma.ProcessFormWhereInput[]
  OR?: Prisma.ProcessFormWhereInput[]
  NOT?: Prisma.ProcessFormWhereInput | Prisma.ProcessFormWhereInput[]
  processId?: Prisma.UuidFilter<"ProcessForm"> | string
  formId?: Prisma.UuidFilter<"ProcessForm"> | string
  order?: Prisma.IntFilter<"ProcessForm"> | number
  nextStepType?: Prisma.EnumNextStepTypeFilter<"ProcessForm"> | $Enums.NextStepType
  nextStepRoles?: Prisma.StringNullableListFilter<"ProcessForm">
  nextStaffId?: Prisma.UuidNullableFilter<"ProcessForm"> | string | null
  nextStepSpecifiedTo?: Prisma.StringNullableFilter<"ProcessForm"> | string | null
  notificationType?: Prisma.EnumNextStepTypeFilter<"ProcessForm"> | $Enums.NextStepType
  notificationRoles?: Prisma.StringNullableListFilter<"ProcessForm">
  notificationToId?: Prisma.UuidNullableFilter<"ProcessForm"> | string | null
  notificationComment?: Prisma.StringNullableFilter<"ProcessForm"> | string | null
  notifyApplicant?: Prisma.BoolFilter<"ProcessForm"> | boolean
  applicantNotificationContent?: Prisma.StringNullableFilter<"ProcessForm"> | string | null
  editApplicationStatus?: Prisma.BoolFilter<"ProcessForm"> | boolean
  applicantViewFormAfterCompletion?: Prisma.BoolFilter<"ProcessForm"> | boolean
  createdAt?: Prisma.DateTimeFilter<"ProcessForm"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProcessForm"> | Date | string
  form?: Prisma.XOR<Prisma.FormScalarRelationFilter, Prisma.FormWhereInput>
  process?: Prisma.XOR<Prisma.ProcessScalarRelationFilter, Prisma.ProcessWhereInput>
}, "id">

export type ProcessFormOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  processId?: Prisma.SortOrder
  formId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  nextStepType?: Prisma.SortOrder
  nextStepRoles?: Prisma.SortOrder
  nextStaffId?: Prisma.SortOrderInput | Prisma.SortOrder
  nextStepSpecifiedTo?: Prisma.SortOrderInput | Prisma.SortOrder
  notificationType?: Prisma.SortOrder
  notificationRoles?: Prisma.SortOrder
  notificationToId?: Prisma.SortOrderInput | Prisma.SortOrder
  notificationComment?: Prisma.SortOrderInput | Prisma.SortOrder
  notifyApplicant?: Prisma.SortOrder
  applicantNotificationContent?: Prisma.SortOrderInput | Prisma.SortOrder
  editApplicationStatus?: Prisma.SortOrder
  applicantViewFormAfterCompletion?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProcessFormCountOrderByAggregateInput
  _avg?: Prisma.ProcessFormAvgOrderByAggregateInput
  _max?: Prisma.ProcessFormMaxOrderByAggregateInput
  _min?: Prisma.ProcessFormMinOrderByAggregateInput
  _sum?: Prisma.ProcessFormSumOrderByAggregateInput
}

export type ProcessFormScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProcessFormScalarWhereWithAggregatesInput | Prisma.ProcessFormScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProcessFormScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProcessFormScalarWhereWithAggregatesInput | Prisma.ProcessFormScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"ProcessForm"> | string
  processId?: Prisma.UuidWithAggregatesFilter<"ProcessForm"> | string
  formId?: Prisma.UuidWithAggregatesFilter<"ProcessForm"> | string
  order?: Prisma.IntWithAggregatesFilter<"ProcessForm"> | number
  nextStepType?: Prisma.EnumNextStepTypeWithAggregatesFilter<"ProcessForm"> | $Enums.NextStepType
  nextStepRoles?: Prisma.StringNullableListFilter<"ProcessForm">
  nextStaffId?: Prisma.UuidNullableWithAggregatesFilter<"ProcessForm"> | string | null
  nextStepSpecifiedTo?: Prisma.StringNullableWithAggregatesFilter<"ProcessForm"> | string | null
  notificationType?: Prisma.EnumNextStepTypeWithAggregatesFilter<"ProcessForm"> | $Enums.NextStepType
  notificationRoles?: Prisma.StringNullableListFilter<"ProcessForm">
  notificationToId?: Prisma.UuidNullableWithAggregatesFilter<"ProcessForm"> | string | null
  notificationComment?: Prisma.StringNullableWithAggregatesFilter<"ProcessForm"> | string | null
  notifyApplicant?: Prisma.BoolWithAggregatesFilter<"ProcessForm"> | boolean
  applicantNotificationContent?: Prisma.StringNullableWithAggregatesFilter<"ProcessForm"> | string | null
  editApplicationStatus?: Prisma.BoolWithAggregatesFilter<"ProcessForm"> | boolean
  applicantViewFormAfterCompletion?: Prisma.BoolWithAggregatesFilter<"ProcessForm"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProcessForm"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ProcessForm"> | Date | string
}

export type ProcessFormCreateInput = {
  id?: string
  order: number
  nextStepType?: $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormCreatenextStepRolesInput | string[]
  nextStaffId?: string | null
  nextStepSpecifiedTo?: string | null
  notificationType?: $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormCreatenotificationRolesInput | string[]
  notificationToId?: string | null
  notificationComment?: string | null
  notifyApplicant?: boolean
  applicantNotificationContent?: string | null
  editApplicationStatus?: boolean
  applicantViewFormAfterCompletion?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  form: Prisma.FormCreateNestedOneWithoutProcessFormsInput
  process: Prisma.ProcessCreateNestedOneWithoutFormsInput
}

export type ProcessFormUncheckedCreateInput = {
  id?: string
  processId: string
  formId: string
  order: number
  nextStepType?: $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormCreatenextStepRolesInput | string[]
  nextStaffId?: string | null
  nextStepSpecifiedTo?: string | null
  notificationType?: $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormCreatenotificationRolesInput | string[]
  notificationToId?: string | null
  notificationComment?: string | null
  notifyApplicant?: boolean
  applicantNotificationContent?: string | null
  editApplicationStatus?: boolean
  applicantViewFormAfterCompletion?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProcessFormUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  nextStepType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormUpdatenextStepRolesInput | string[]
  nextStaffId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nextStepSpecifiedTo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormUpdatenotificationRolesInput | string[]
  notificationToId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notifyApplicant?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantNotificationContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  editApplicationStatus?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantViewFormAfterCompletion?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  form?: Prisma.FormUpdateOneRequiredWithoutProcessFormsNestedInput
  process?: Prisma.ProcessUpdateOneRequiredWithoutFormsNestedInput
}

export type ProcessFormUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  nextStepType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormUpdatenextStepRolesInput | string[]
  nextStaffId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nextStepSpecifiedTo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormUpdatenotificationRolesInput | string[]
  notificationToId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notifyApplicant?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantNotificationContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  editApplicationStatus?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantViewFormAfterCompletion?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessFormCreateManyInput = {
  id?: string
  processId: string
  formId: string
  order: number
  nextStepType?: $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormCreatenextStepRolesInput | string[]
  nextStaffId?: string | null
  nextStepSpecifiedTo?: string | null
  notificationType?: $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormCreatenotificationRolesInput | string[]
  notificationToId?: string | null
  notificationComment?: string | null
  notifyApplicant?: boolean
  applicantNotificationContent?: string | null
  editApplicationStatus?: boolean
  applicantViewFormAfterCompletion?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProcessFormUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  nextStepType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormUpdatenextStepRolesInput | string[]
  nextStaffId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nextStepSpecifiedTo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormUpdatenotificationRolesInput | string[]
  notificationToId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notifyApplicant?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantNotificationContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  editApplicationStatus?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantViewFormAfterCompletion?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessFormUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  nextStepType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormUpdatenextStepRolesInput | string[]
  nextStaffId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nextStepSpecifiedTo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormUpdatenotificationRolesInput | string[]
  notificationToId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notifyApplicant?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantNotificationContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  editApplicationStatus?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantViewFormAfterCompletion?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessFormListRelationFilter = {
  every?: Prisma.ProcessFormWhereInput
  some?: Prisma.ProcessFormWhereInput
  none?: Prisma.ProcessFormWhereInput
}

export type ProcessFormOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type ProcessFormOrderByRelevanceInput = {
  fields: Prisma.ProcessFormOrderByRelevanceFieldEnum | Prisma.ProcessFormOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ProcessFormCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  processId?: Prisma.SortOrder
  formId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  nextStepType?: Prisma.SortOrder
  nextStepRoles?: Prisma.SortOrder
  nextStaffId?: Prisma.SortOrder
  nextStepSpecifiedTo?: Prisma.SortOrder
  notificationType?: Prisma.SortOrder
  notificationRoles?: Prisma.SortOrder
  notificationToId?: Prisma.SortOrder
  notificationComment?: Prisma.SortOrder
  notifyApplicant?: Prisma.SortOrder
  applicantNotificationContent?: Prisma.SortOrder
  editApplicationStatus?: Prisma.SortOrder
  applicantViewFormAfterCompletion?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProcessFormAvgOrderByAggregateInput = {
  order?: Prisma.SortOrder
}

export type ProcessFormMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  processId?: Prisma.SortOrder
  formId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  nextStepType?: Prisma.SortOrder
  nextStaffId?: Prisma.SortOrder
  nextStepSpecifiedTo?: Prisma.SortOrder
  notificationType?: Prisma.SortOrder
  notificationToId?: Prisma.SortOrder
  notificationComment?: Prisma.SortOrder
  notifyApplicant?: Prisma.SortOrder
  applicantNotificationContent?: Prisma.SortOrder
  editApplicationStatus?: Prisma.SortOrder
  applicantViewFormAfterCompletion?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProcessFormMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  processId?: Prisma.SortOrder
  formId?: Prisma.SortOrder
  order?: Prisma.SortOrder
  nextStepType?: Prisma.SortOrder
  nextStaffId?: Prisma.SortOrder
  nextStepSpecifiedTo?: Prisma.SortOrder
  notificationType?: Prisma.SortOrder
  notificationToId?: Prisma.SortOrder
  notificationComment?: Prisma.SortOrder
  notifyApplicant?: Prisma.SortOrder
  applicantNotificationContent?: Prisma.SortOrder
  editApplicationStatus?: Prisma.SortOrder
  applicantViewFormAfterCompletion?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProcessFormSumOrderByAggregateInput = {
  order?: Prisma.SortOrder
}

export type ProcessFormCreateNestedManyWithoutProcessInput = {
  create?: Prisma.XOR<Prisma.ProcessFormCreateWithoutProcessInput, Prisma.ProcessFormUncheckedCreateWithoutProcessInput> | Prisma.ProcessFormCreateWithoutProcessInput[] | Prisma.ProcessFormUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.ProcessFormCreateOrConnectWithoutProcessInput | Prisma.ProcessFormCreateOrConnectWithoutProcessInput[]
  createMany?: Prisma.ProcessFormCreateManyProcessInputEnvelope
  connect?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
}

export type ProcessFormUncheckedCreateNestedManyWithoutProcessInput = {
  create?: Prisma.XOR<Prisma.ProcessFormCreateWithoutProcessInput, Prisma.ProcessFormUncheckedCreateWithoutProcessInput> | Prisma.ProcessFormCreateWithoutProcessInput[] | Prisma.ProcessFormUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.ProcessFormCreateOrConnectWithoutProcessInput | Prisma.ProcessFormCreateOrConnectWithoutProcessInput[]
  createMany?: Prisma.ProcessFormCreateManyProcessInputEnvelope
  connect?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
}

export type ProcessFormUpdateManyWithoutProcessNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessFormCreateWithoutProcessInput, Prisma.ProcessFormUncheckedCreateWithoutProcessInput> | Prisma.ProcessFormCreateWithoutProcessInput[] | Prisma.ProcessFormUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.ProcessFormCreateOrConnectWithoutProcessInput | Prisma.ProcessFormCreateOrConnectWithoutProcessInput[]
  upsert?: Prisma.ProcessFormUpsertWithWhereUniqueWithoutProcessInput | Prisma.ProcessFormUpsertWithWhereUniqueWithoutProcessInput[]
  createMany?: Prisma.ProcessFormCreateManyProcessInputEnvelope
  set?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
  disconnect?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
  delete?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
  connect?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
  update?: Prisma.ProcessFormUpdateWithWhereUniqueWithoutProcessInput | Prisma.ProcessFormUpdateWithWhereUniqueWithoutProcessInput[]
  updateMany?: Prisma.ProcessFormUpdateManyWithWhereWithoutProcessInput | Prisma.ProcessFormUpdateManyWithWhereWithoutProcessInput[]
  deleteMany?: Prisma.ProcessFormScalarWhereInput | Prisma.ProcessFormScalarWhereInput[]
}

export type ProcessFormUncheckedUpdateManyWithoutProcessNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessFormCreateWithoutProcessInput, Prisma.ProcessFormUncheckedCreateWithoutProcessInput> | Prisma.ProcessFormCreateWithoutProcessInput[] | Prisma.ProcessFormUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.ProcessFormCreateOrConnectWithoutProcessInput | Prisma.ProcessFormCreateOrConnectWithoutProcessInput[]
  upsert?: Prisma.ProcessFormUpsertWithWhereUniqueWithoutProcessInput | Prisma.ProcessFormUpsertWithWhereUniqueWithoutProcessInput[]
  createMany?: Prisma.ProcessFormCreateManyProcessInputEnvelope
  set?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
  disconnect?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
  delete?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
  connect?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
  update?: Prisma.ProcessFormUpdateWithWhereUniqueWithoutProcessInput | Prisma.ProcessFormUpdateWithWhereUniqueWithoutProcessInput[]
  updateMany?: Prisma.ProcessFormUpdateManyWithWhereWithoutProcessInput | Prisma.ProcessFormUpdateManyWithWhereWithoutProcessInput[]
  deleteMany?: Prisma.ProcessFormScalarWhereInput | Prisma.ProcessFormScalarWhereInput[]
}

export type ProcessFormCreateNestedManyWithoutFormInput = {
  create?: Prisma.XOR<Prisma.ProcessFormCreateWithoutFormInput, Prisma.ProcessFormUncheckedCreateWithoutFormInput> | Prisma.ProcessFormCreateWithoutFormInput[] | Prisma.ProcessFormUncheckedCreateWithoutFormInput[]
  connectOrCreate?: Prisma.ProcessFormCreateOrConnectWithoutFormInput | Prisma.ProcessFormCreateOrConnectWithoutFormInput[]
  createMany?: Prisma.ProcessFormCreateManyFormInputEnvelope
  connect?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
}

export type ProcessFormUncheckedCreateNestedManyWithoutFormInput = {
  create?: Prisma.XOR<Prisma.ProcessFormCreateWithoutFormInput, Prisma.ProcessFormUncheckedCreateWithoutFormInput> | Prisma.ProcessFormCreateWithoutFormInput[] | Prisma.ProcessFormUncheckedCreateWithoutFormInput[]
  connectOrCreate?: Prisma.ProcessFormCreateOrConnectWithoutFormInput | Prisma.ProcessFormCreateOrConnectWithoutFormInput[]
  createMany?: Prisma.ProcessFormCreateManyFormInputEnvelope
  connect?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
}

export type ProcessFormUpdateManyWithoutFormNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessFormCreateWithoutFormInput, Prisma.ProcessFormUncheckedCreateWithoutFormInput> | Prisma.ProcessFormCreateWithoutFormInput[] | Prisma.ProcessFormUncheckedCreateWithoutFormInput[]
  connectOrCreate?: Prisma.ProcessFormCreateOrConnectWithoutFormInput | Prisma.ProcessFormCreateOrConnectWithoutFormInput[]
  upsert?: Prisma.ProcessFormUpsertWithWhereUniqueWithoutFormInput | Prisma.ProcessFormUpsertWithWhereUniqueWithoutFormInput[]
  createMany?: Prisma.ProcessFormCreateManyFormInputEnvelope
  set?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
  disconnect?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
  delete?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
  connect?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
  update?: Prisma.ProcessFormUpdateWithWhereUniqueWithoutFormInput | Prisma.ProcessFormUpdateWithWhereUniqueWithoutFormInput[]
  updateMany?: Prisma.ProcessFormUpdateManyWithWhereWithoutFormInput | Prisma.ProcessFormUpdateManyWithWhereWithoutFormInput[]
  deleteMany?: Prisma.ProcessFormScalarWhereInput | Prisma.ProcessFormScalarWhereInput[]
}

export type ProcessFormUncheckedUpdateManyWithoutFormNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessFormCreateWithoutFormInput, Prisma.ProcessFormUncheckedCreateWithoutFormInput> | Prisma.ProcessFormCreateWithoutFormInput[] | Prisma.ProcessFormUncheckedCreateWithoutFormInput[]
  connectOrCreate?: Prisma.ProcessFormCreateOrConnectWithoutFormInput | Prisma.ProcessFormCreateOrConnectWithoutFormInput[]
  upsert?: Prisma.ProcessFormUpsertWithWhereUniqueWithoutFormInput | Prisma.ProcessFormUpsertWithWhereUniqueWithoutFormInput[]
  createMany?: Prisma.ProcessFormCreateManyFormInputEnvelope
  set?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
  disconnect?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
  delete?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
  connect?: Prisma.ProcessFormWhereUniqueInput | Prisma.ProcessFormWhereUniqueInput[]
  update?: Prisma.ProcessFormUpdateWithWhereUniqueWithoutFormInput | Prisma.ProcessFormUpdateWithWhereUniqueWithoutFormInput[]
  updateMany?: Prisma.ProcessFormUpdateManyWithWhereWithoutFormInput | Prisma.ProcessFormUpdateManyWithWhereWithoutFormInput[]
  deleteMany?: Prisma.ProcessFormScalarWhereInput | Prisma.ProcessFormScalarWhereInput[]
}

export type ProcessFormCreatenextStepRolesInput = {
  set: string[]
}

export type ProcessFormCreatenotificationRolesInput = {
  set: string[]
}

export type EnumNextStepTypeFieldUpdateOperationsInput = {
  set?: $Enums.NextStepType
}

export type ProcessFormUpdatenextStepRolesInput = {
  set?: string[]
  push?: string | string[]
}

export type ProcessFormUpdatenotificationRolesInput = {
  set?: string[]
  push?: string | string[]
}

export type ProcessFormCreateWithoutProcessInput = {
  id?: string
  order: number
  nextStepType?: $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormCreatenextStepRolesInput | string[]
  nextStaffId?: string | null
  nextStepSpecifiedTo?: string | null
  notificationType?: $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormCreatenotificationRolesInput | string[]
  notificationToId?: string | null
  notificationComment?: string | null
  notifyApplicant?: boolean
  applicantNotificationContent?: string | null
  editApplicationStatus?: boolean
  applicantViewFormAfterCompletion?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  form: Prisma.FormCreateNestedOneWithoutProcessFormsInput
}

export type ProcessFormUncheckedCreateWithoutProcessInput = {
  id?: string
  formId: string
  order: number
  nextStepType?: $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormCreatenextStepRolesInput | string[]
  nextStaffId?: string | null
  nextStepSpecifiedTo?: string | null
  notificationType?: $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormCreatenotificationRolesInput | string[]
  notificationToId?: string | null
  notificationComment?: string | null
  notifyApplicant?: boolean
  applicantNotificationContent?: string | null
  editApplicationStatus?: boolean
  applicantViewFormAfterCompletion?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProcessFormCreateOrConnectWithoutProcessInput = {
  where: Prisma.ProcessFormWhereUniqueInput
  create: Prisma.XOR<Prisma.ProcessFormCreateWithoutProcessInput, Prisma.ProcessFormUncheckedCreateWithoutProcessInput>
}

export type ProcessFormCreateManyProcessInputEnvelope = {
  data: Prisma.ProcessFormCreateManyProcessInput | Prisma.ProcessFormCreateManyProcessInput[]
  skipDuplicates?: boolean
}

export type ProcessFormUpsertWithWhereUniqueWithoutProcessInput = {
  where: Prisma.ProcessFormWhereUniqueInput
  update: Prisma.XOR<Prisma.ProcessFormUpdateWithoutProcessInput, Prisma.ProcessFormUncheckedUpdateWithoutProcessInput>
  create: Prisma.XOR<Prisma.ProcessFormCreateWithoutProcessInput, Prisma.ProcessFormUncheckedCreateWithoutProcessInput>
}

export type ProcessFormUpdateWithWhereUniqueWithoutProcessInput = {
  where: Prisma.ProcessFormWhereUniqueInput
  data: Prisma.XOR<Prisma.ProcessFormUpdateWithoutProcessInput, Prisma.ProcessFormUncheckedUpdateWithoutProcessInput>
}

export type ProcessFormUpdateManyWithWhereWithoutProcessInput = {
  where: Prisma.ProcessFormScalarWhereInput
  data: Prisma.XOR<Prisma.ProcessFormUpdateManyMutationInput, Prisma.ProcessFormUncheckedUpdateManyWithoutProcessInput>
}

export type ProcessFormScalarWhereInput = {
  AND?: Prisma.ProcessFormScalarWhereInput | Prisma.ProcessFormScalarWhereInput[]
  OR?: Prisma.ProcessFormScalarWhereInput[]
  NOT?: Prisma.ProcessFormScalarWhereInput | Prisma.ProcessFormScalarWhereInput[]
  id?: Prisma.UuidFilter<"ProcessForm"> | string
  processId?: Prisma.UuidFilter<"ProcessForm"> | string
  formId?: Prisma.UuidFilter<"ProcessForm"> | string
  order?: Prisma.IntFilter<"ProcessForm"> | number
  nextStepType?: Prisma.EnumNextStepTypeFilter<"ProcessForm"> | $Enums.NextStepType
  nextStepRoles?: Prisma.StringNullableListFilter<"ProcessForm">
  nextStaffId?: Prisma.UuidNullableFilter<"ProcessForm"> | string | null
  nextStepSpecifiedTo?: Prisma.StringNullableFilter<"ProcessForm"> | string | null
  notificationType?: Prisma.EnumNextStepTypeFilter<"ProcessForm"> | $Enums.NextStepType
  notificationRoles?: Prisma.StringNullableListFilter<"ProcessForm">
  notificationToId?: Prisma.UuidNullableFilter<"ProcessForm"> | string | null
  notificationComment?: Prisma.StringNullableFilter<"ProcessForm"> | string | null
  notifyApplicant?: Prisma.BoolFilter<"ProcessForm"> | boolean
  applicantNotificationContent?: Prisma.StringNullableFilter<"ProcessForm"> | string | null
  editApplicationStatus?: Prisma.BoolFilter<"ProcessForm"> | boolean
  applicantViewFormAfterCompletion?: Prisma.BoolFilter<"ProcessForm"> | boolean
  createdAt?: Prisma.DateTimeFilter<"ProcessForm"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProcessForm"> | Date | string
}

export type ProcessFormCreateWithoutFormInput = {
  id?: string
  order: number
  nextStepType?: $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormCreatenextStepRolesInput | string[]
  nextStaffId?: string | null
  nextStepSpecifiedTo?: string | null
  notificationType?: $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormCreatenotificationRolesInput | string[]
  notificationToId?: string | null
  notificationComment?: string | null
  notifyApplicant?: boolean
  applicantNotificationContent?: string | null
  editApplicationStatus?: boolean
  applicantViewFormAfterCompletion?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  process: Prisma.ProcessCreateNestedOneWithoutFormsInput
}

export type ProcessFormUncheckedCreateWithoutFormInput = {
  id?: string
  processId: string
  order: number
  nextStepType?: $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormCreatenextStepRolesInput | string[]
  nextStaffId?: string | null
  nextStepSpecifiedTo?: string | null
  notificationType?: $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormCreatenotificationRolesInput | string[]
  notificationToId?: string | null
  notificationComment?: string | null
  notifyApplicant?: boolean
  applicantNotificationContent?: string | null
  editApplicationStatus?: boolean
  applicantViewFormAfterCompletion?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProcessFormCreateOrConnectWithoutFormInput = {
  where: Prisma.ProcessFormWhereUniqueInput
  create: Prisma.XOR<Prisma.ProcessFormCreateWithoutFormInput, Prisma.ProcessFormUncheckedCreateWithoutFormInput>
}

export type ProcessFormCreateManyFormInputEnvelope = {
  data: Prisma.ProcessFormCreateManyFormInput | Prisma.ProcessFormCreateManyFormInput[]
  skipDuplicates?: boolean
}

export type ProcessFormUpsertWithWhereUniqueWithoutFormInput = {
  where: Prisma.ProcessFormWhereUniqueInput
  update: Prisma.XOR<Prisma.ProcessFormUpdateWithoutFormInput, Prisma.ProcessFormUncheckedUpdateWithoutFormInput>
  create: Prisma.XOR<Prisma.ProcessFormCreateWithoutFormInput, Prisma.ProcessFormUncheckedCreateWithoutFormInput>
}

export type ProcessFormUpdateWithWhereUniqueWithoutFormInput = {
  where: Prisma.ProcessFormWhereUniqueInput
  data: Prisma.XOR<Prisma.ProcessFormUpdateWithoutFormInput, Prisma.ProcessFormUncheckedUpdateWithoutFormInput>
}

export type ProcessFormUpdateManyWithWhereWithoutFormInput = {
  where: Prisma.ProcessFormScalarWhereInput
  data: Prisma.XOR<Prisma.ProcessFormUpdateManyMutationInput, Prisma.ProcessFormUncheckedUpdateManyWithoutFormInput>
}

export type ProcessFormCreateManyProcessInput = {
  id?: string
  formId: string
  order: number
  nextStepType?: $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormCreatenextStepRolesInput | string[]
  nextStaffId?: string | null
  nextStepSpecifiedTo?: string | null
  notificationType?: $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormCreatenotificationRolesInput | string[]
  notificationToId?: string | null
  notificationComment?: string | null
  notifyApplicant?: boolean
  applicantNotificationContent?: string | null
  editApplicationStatus?: boolean
  applicantViewFormAfterCompletion?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProcessFormUpdateWithoutProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  nextStepType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormUpdatenextStepRolesInput | string[]
  nextStaffId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nextStepSpecifiedTo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormUpdatenotificationRolesInput | string[]
  notificationToId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notifyApplicant?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantNotificationContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  editApplicationStatus?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantViewFormAfterCompletion?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  form?: Prisma.FormUpdateOneRequiredWithoutProcessFormsNestedInput
}

export type ProcessFormUncheckedUpdateWithoutProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  nextStepType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormUpdatenextStepRolesInput | string[]
  nextStaffId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nextStepSpecifiedTo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormUpdatenotificationRolesInput | string[]
  notificationToId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notifyApplicant?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantNotificationContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  editApplicationStatus?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantViewFormAfterCompletion?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessFormUncheckedUpdateManyWithoutProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  nextStepType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormUpdatenextStepRolesInput | string[]
  nextStaffId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nextStepSpecifiedTo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormUpdatenotificationRolesInput | string[]
  notificationToId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notifyApplicant?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantNotificationContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  editApplicationStatus?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantViewFormAfterCompletion?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessFormCreateManyFormInput = {
  id?: string
  processId: string
  order: number
  nextStepType?: $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormCreatenextStepRolesInput | string[]
  nextStaffId?: string | null
  nextStepSpecifiedTo?: string | null
  notificationType?: $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormCreatenotificationRolesInput | string[]
  notificationToId?: string | null
  notificationComment?: string | null
  notifyApplicant?: boolean
  applicantNotificationContent?: string | null
  editApplicationStatus?: boolean
  applicantViewFormAfterCompletion?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProcessFormUpdateWithoutFormInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  nextStepType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormUpdatenextStepRolesInput | string[]
  nextStaffId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nextStepSpecifiedTo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormUpdatenotificationRolesInput | string[]
  notificationToId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notifyApplicant?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantNotificationContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  editApplicationStatus?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantViewFormAfterCompletion?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  process?: Prisma.ProcessUpdateOneRequiredWithoutFormsNestedInput
}

export type ProcessFormUncheckedUpdateWithoutFormInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  nextStepType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormUpdatenextStepRolesInput | string[]
  nextStaffId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nextStepSpecifiedTo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormUpdatenotificationRolesInput | string[]
  notificationToId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notifyApplicant?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantNotificationContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  editApplicationStatus?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantViewFormAfterCompletion?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessFormUncheckedUpdateManyWithoutFormInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  nextStepType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  nextStepRoles?: Prisma.ProcessFormUpdatenextStepRolesInput | string[]
  nextStaffId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nextStepSpecifiedTo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationType?: Prisma.EnumNextStepTypeFieldUpdateOperationsInput | $Enums.NextStepType
  notificationRoles?: Prisma.ProcessFormUpdatenotificationRolesInput | string[]
  notificationToId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notificationComment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notifyApplicant?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantNotificationContent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  editApplicationStatus?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicantViewFormAfterCompletion?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ProcessFormSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  processId?: boolean
  formId?: boolean
  order?: boolean
  nextStepType?: boolean
  nextStepRoles?: boolean
  nextStaffId?: boolean
  nextStepSpecifiedTo?: boolean
  notificationType?: boolean
  notificationRoles?: boolean
  notificationToId?: boolean
  notificationComment?: boolean
  notifyApplicant?: boolean
  applicantNotificationContent?: boolean
  editApplicationStatus?: boolean
  applicantViewFormAfterCompletion?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  form?: boolean | Prisma.FormDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["processForm"]>

export type ProcessFormSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  processId?: boolean
  formId?: boolean
  order?: boolean
  nextStepType?: boolean
  nextStepRoles?: boolean
  nextStaffId?: boolean
  nextStepSpecifiedTo?: boolean
  notificationType?: boolean
  notificationRoles?: boolean
  notificationToId?: boolean
  notificationComment?: boolean
  notifyApplicant?: boolean
  applicantNotificationContent?: boolean
  editApplicationStatus?: boolean
  applicantViewFormAfterCompletion?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  form?: boolean | Prisma.FormDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["processForm"]>

export type ProcessFormSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  processId?: boolean
  formId?: boolean
  order?: boolean
  nextStepType?: boolean
  nextStepRoles?: boolean
  nextStaffId?: boolean
  nextStepSpecifiedTo?: boolean
  notificationType?: boolean
  notificationRoles?: boolean
  notificationToId?: boolean
  notificationComment?: boolean
  notifyApplicant?: boolean
  applicantNotificationContent?: boolean
  editApplicationStatus?: boolean
  applicantViewFormAfterCompletion?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  form?: boolean | Prisma.FormDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["processForm"]>

export type ProcessFormSelectScalar = {
  id?: boolean
  processId?: boolean
  formId?: boolean
  order?: boolean
  nextStepType?: boolean
  nextStepRoles?: boolean
  nextStaffId?: boolean
  nextStepSpecifiedTo?: boolean
  notificationType?: boolean
  notificationRoles?: boolean
  notificationToId?: boolean
  notificationComment?: boolean
  notifyApplicant?: boolean
  applicantNotificationContent?: boolean
  editApplicationStatus?: boolean
  applicantViewFormAfterCompletion?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProcessFormOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "processId" | "formId" | "order" | "nextStepType" | "nextStepRoles" | "nextStaffId" | "nextStepSpecifiedTo" | "notificationType" | "notificationRoles" | "notificationToId" | "notificationComment" | "notifyApplicant" | "applicantNotificationContent" | "editApplicationStatus" | "applicantViewFormAfterCompletion" | "createdAt" | "updatedAt", ExtArgs["result"]["processForm"]>
export type ProcessFormInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  form?: boolean | Prisma.FormDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
}
export type ProcessFormIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  form?: boolean | Prisma.FormDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
}
export type ProcessFormIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  form?: boolean | Prisma.FormDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
}

export type $ProcessFormPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProcessForm"
  objects: {
    form: Prisma.$FormPayload<ExtArgs>
    process: Prisma.$ProcessPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    processId: string
    formId: string
    order: number
    nextStepType: $Enums.NextStepType
    nextStepRoles: string[]
    nextStaffId: string | null
    nextStepSpecifiedTo: string | null
    notificationType: $Enums.NextStepType
    notificationRoles: string[]
    notificationToId: string | null
    notificationComment: string | null
    notifyApplicant: boolean
    applicantNotificationContent: string | null
    editApplicationStatus: boolean
    applicantViewFormAfterCompletion: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["processForm"]>
  composites: {}
}

export type ProcessFormGetPayload<S extends boolean | null | undefined | ProcessFormDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProcessFormPayload, S>

export type ProcessFormCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProcessFormFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: ProcessFormCountAggregateInputType | true
  }

export interface ProcessFormDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProcessForm'], meta: { name: 'ProcessForm' } }
  /**
   * Find zero or one ProcessForm that matches the filter.
   * @param {ProcessFormFindUniqueArgs} args - Arguments to find a ProcessForm
   * @example
   * // Get one ProcessForm
   * const processForm = await prisma.processForm.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProcessFormFindUniqueArgs>(args: Prisma.SelectSubset<T, ProcessFormFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProcessFormClient<runtime.Types.Result.GetResult<Prisma.$ProcessFormPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProcessForm that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProcessFormFindUniqueOrThrowArgs} args - Arguments to find a ProcessForm
   * @example
   * // Get one ProcessForm
   * const processForm = await prisma.processForm.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProcessFormFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProcessFormFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProcessFormClient<runtime.Types.Result.GetResult<Prisma.$ProcessFormPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProcessForm that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessFormFindFirstArgs} args - Arguments to find a ProcessForm
   * @example
   * // Get one ProcessForm
   * const processForm = await prisma.processForm.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProcessFormFindFirstArgs>(args?: Prisma.SelectSubset<T, ProcessFormFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProcessFormClient<runtime.Types.Result.GetResult<Prisma.$ProcessFormPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProcessForm that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessFormFindFirstOrThrowArgs} args - Arguments to find a ProcessForm
   * @example
   * // Get one ProcessForm
   * const processForm = await prisma.processForm.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProcessFormFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProcessFormFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProcessFormClient<runtime.Types.Result.GetResult<Prisma.$ProcessFormPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProcessForms that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessFormFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProcessForms
   * const processForms = await prisma.processForm.findMany()
   * 
   * // Get first 10 ProcessForms
   * const processForms = await prisma.processForm.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const processFormWithIdOnly = await prisma.processForm.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProcessFormFindManyArgs>(args?: Prisma.SelectSubset<T, ProcessFormFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessFormPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProcessForm.
   * @param {ProcessFormCreateArgs} args - Arguments to create a ProcessForm.
   * @example
   * // Create one ProcessForm
   * const ProcessForm = await prisma.processForm.create({
   *   data: {
   *     // ... data to create a ProcessForm
   *   }
   * })
   * 
   */
  create<T extends ProcessFormCreateArgs>(args: Prisma.SelectSubset<T, ProcessFormCreateArgs<ExtArgs>>): Prisma.Prisma__ProcessFormClient<runtime.Types.Result.GetResult<Prisma.$ProcessFormPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProcessForms.
   * @param {ProcessFormCreateManyArgs} args - Arguments to create many ProcessForms.
   * @example
   * // Create many ProcessForms
   * const processForm = await prisma.processForm.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProcessFormCreateManyArgs>(args?: Prisma.SelectSubset<T, ProcessFormCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProcessForms and returns the data saved in the database.
   * @param {ProcessFormCreateManyAndReturnArgs} args - Arguments to create many ProcessForms.
   * @example
   * // Create many ProcessForms
   * const processForm = await prisma.processForm.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProcessForms and only return the `id`
   * const processFormWithIdOnly = await prisma.processForm.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProcessFormCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProcessFormCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessFormPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProcessForm.
   * @param {ProcessFormDeleteArgs} args - Arguments to delete one ProcessForm.
   * @example
   * // Delete one ProcessForm
   * const ProcessForm = await prisma.processForm.delete({
   *   where: {
   *     // ... filter to delete one ProcessForm
   *   }
   * })
   * 
   */
  delete<T extends ProcessFormDeleteArgs>(args: Prisma.SelectSubset<T, ProcessFormDeleteArgs<ExtArgs>>): Prisma.Prisma__ProcessFormClient<runtime.Types.Result.GetResult<Prisma.$ProcessFormPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProcessForm.
   * @param {ProcessFormUpdateArgs} args - Arguments to update one ProcessForm.
   * @example
   * // Update one ProcessForm
   * const processForm = await prisma.processForm.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProcessFormUpdateArgs>(args: Prisma.SelectSubset<T, ProcessFormUpdateArgs<ExtArgs>>): Prisma.Prisma__ProcessFormClient<runtime.Types.Result.GetResult<Prisma.$ProcessFormPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProcessForms.
   * @param {ProcessFormDeleteManyArgs} args - Arguments to filter ProcessForms to delete.
   * @example
   * // Delete a few ProcessForms
   * const { count } = await prisma.processForm.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProcessFormDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProcessFormDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProcessForms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessFormUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProcessForms
   * const processForm = await prisma.processForm.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProcessFormUpdateManyArgs>(args: Prisma.SelectSubset<T, ProcessFormUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProcessForms and returns the data updated in the database.
   * @param {ProcessFormUpdateManyAndReturnArgs} args - Arguments to update many ProcessForms.
   * @example
   * // Update many ProcessForms
   * const processForm = await prisma.processForm.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProcessForms and only return the `id`
   * const processFormWithIdOnly = await prisma.processForm.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProcessFormUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProcessFormUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessFormPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProcessForm.
   * @param {ProcessFormUpsertArgs} args - Arguments to update or create a ProcessForm.
   * @example
   * // Update or create a ProcessForm
   * const processForm = await prisma.processForm.upsert({
   *   create: {
   *     // ... data to create a ProcessForm
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProcessForm we want to update
   *   }
   * })
   */
  upsert<T extends ProcessFormUpsertArgs>(args: Prisma.SelectSubset<T, ProcessFormUpsertArgs<ExtArgs>>): Prisma.Prisma__ProcessFormClient<runtime.Types.Result.GetResult<Prisma.$ProcessFormPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProcessForms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessFormCountArgs} args - Arguments to filter ProcessForms to count.
   * @example
   * // Count the number of ProcessForms
   * const count = await prisma.processForm.count({
   *   where: {
   *     // ... the filter for the ProcessForms we want to count
   *   }
   * })
  **/
  count<T extends ProcessFormCountArgs>(
    args?: Prisma.Subset<T, ProcessFormCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProcessFormCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProcessForm.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessFormAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProcessFormAggregateArgs>(args: Prisma.Subset<T, ProcessFormAggregateArgs>): Prisma.PrismaPromise<GetProcessFormAggregateType<T>>

  /**
   * Group by ProcessForm.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessFormGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProcessFormGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProcessFormGroupByArgs['orderBy'] }
      : { orderBy?: ProcessFormGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProcessFormGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcessFormGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProcessForm model
 */
readonly fields: ProcessFormFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProcessForm.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProcessFormClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  form<T extends Prisma.FormDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FormDefaultArgs<ExtArgs>>): Prisma.Prisma__FormClient<runtime.Types.Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  process<T extends Prisma.ProcessDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProcessDefaultArgs<ExtArgs>>): Prisma.Prisma__ProcessClient<runtime.Types.Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProcessForm model
 */
export interface ProcessFormFieldRefs {
  readonly id: Prisma.FieldRef<"ProcessForm", 'String'>
  readonly processId: Prisma.FieldRef<"ProcessForm", 'String'>
  readonly formId: Prisma.FieldRef<"ProcessForm", 'String'>
  readonly order: Prisma.FieldRef<"ProcessForm", 'Int'>
  readonly nextStepType: Prisma.FieldRef<"ProcessForm", 'NextStepType'>
  readonly nextStepRoles: Prisma.FieldRef<"ProcessForm", 'String[]'>
  readonly nextStaffId: Prisma.FieldRef<"ProcessForm", 'String'>
  readonly nextStepSpecifiedTo: Prisma.FieldRef<"ProcessForm", 'String'>
  readonly notificationType: Prisma.FieldRef<"ProcessForm", 'NextStepType'>
  readonly notificationRoles: Prisma.FieldRef<"ProcessForm", 'String[]'>
  readonly notificationToId: Prisma.FieldRef<"ProcessForm", 'String'>
  readonly notificationComment: Prisma.FieldRef<"ProcessForm", 'String'>
  readonly notifyApplicant: Prisma.FieldRef<"ProcessForm", 'Boolean'>
  readonly applicantNotificationContent: Prisma.FieldRef<"ProcessForm", 'String'>
  readonly editApplicationStatus: Prisma.FieldRef<"ProcessForm", 'Boolean'>
  readonly applicantViewFormAfterCompletion: Prisma.FieldRef<"ProcessForm", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"ProcessForm", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ProcessForm", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProcessForm findUnique
 */
export type ProcessFormFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessForm
   */
  select?: Prisma.ProcessFormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessForm
   */
  omit?: Prisma.ProcessFormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFormInclude<ExtArgs> | null
  /**
   * Filter, which ProcessForm to fetch.
   */
  where: Prisma.ProcessFormWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessForm findUniqueOrThrow
 */
export type ProcessFormFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessForm
   */
  select?: Prisma.ProcessFormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessForm
   */
  omit?: Prisma.ProcessFormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFormInclude<ExtArgs> | null
  /**
   * Filter, which ProcessForm to fetch.
   */
  where: Prisma.ProcessFormWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessForm findFirst
 */
export type ProcessFormFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessForm
   */
  select?: Prisma.ProcessFormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessForm
   */
  omit?: Prisma.ProcessFormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFormInclude<ExtArgs> | null
  /**
   * Filter, which ProcessForm to fetch.
   */
  where?: Prisma.ProcessFormWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessForms to fetch.
   */
  orderBy?: Prisma.ProcessFormOrderByWithRelationInput | Prisma.ProcessFormOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProcessForms.
   */
  cursor?: Prisma.ProcessFormWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessForms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessForms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProcessForms.
   */
  distinct?: Prisma.ProcessFormScalarFieldEnum | Prisma.ProcessFormScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessForm findFirstOrThrow
 */
export type ProcessFormFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessForm
   */
  select?: Prisma.ProcessFormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessForm
   */
  omit?: Prisma.ProcessFormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFormInclude<ExtArgs> | null
  /**
   * Filter, which ProcessForm to fetch.
   */
  where?: Prisma.ProcessFormWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessForms to fetch.
   */
  orderBy?: Prisma.ProcessFormOrderByWithRelationInput | Prisma.ProcessFormOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProcessForms.
   */
  cursor?: Prisma.ProcessFormWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessForms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessForms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProcessForms.
   */
  distinct?: Prisma.ProcessFormScalarFieldEnum | Prisma.ProcessFormScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessForm findMany
 */
export type ProcessFormFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessForm
   */
  select?: Prisma.ProcessFormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessForm
   */
  omit?: Prisma.ProcessFormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFormInclude<ExtArgs> | null
  /**
   * Filter, which ProcessForms to fetch.
   */
  where?: Prisma.ProcessFormWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessForms to fetch.
   */
  orderBy?: Prisma.ProcessFormOrderByWithRelationInput | Prisma.ProcessFormOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProcessForms.
   */
  cursor?: Prisma.ProcessFormWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessForms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessForms.
   */
  skip?: number
  distinct?: Prisma.ProcessFormScalarFieldEnum | Prisma.ProcessFormScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessForm create
 */
export type ProcessFormCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessForm
   */
  select?: Prisma.ProcessFormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessForm
   */
  omit?: Prisma.ProcessFormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFormInclude<ExtArgs> | null
  /**
   * The data needed to create a ProcessForm.
   */
  data: Prisma.XOR<Prisma.ProcessFormCreateInput, Prisma.ProcessFormUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessForm createMany
 */
export type ProcessFormCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProcessForms.
   */
  data: Prisma.ProcessFormCreateManyInput | Prisma.ProcessFormCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProcessForm createManyAndReturn
 */
export type ProcessFormCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessForm
   */
  select?: Prisma.ProcessFormSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessForm
   */
  omit?: Prisma.ProcessFormOmit<ExtArgs> | null
  /**
   * The data used to create many ProcessForms.
   */
  data: Prisma.ProcessFormCreateManyInput | Prisma.ProcessFormCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFormIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProcessForm update
 */
export type ProcessFormUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessForm
   */
  select?: Prisma.ProcessFormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessForm
   */
  omit?: Prisma.ProcessFormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFormInclude<ExtArgs> | null
  /**
   * The data needed to update a ProcessForm.
   */
  data: Prisma.XOR<Prisma.ProcessFormUpdateInput, Prisma.ProcessFormUncheckedUpdateInput>
  /**
   * Choose, which ProcessForm to update.
   */
  where: Prisma.ProcessFormWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessForm updateMany
 */
export type ProcessFormUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProcessForms.
   */
  data: Prisma.XOR<Prisma.ProcessFormUpdateManyMutationInput, Prisma.ProcessFormUncheckedUpdateManyInput>
  /**
   * Filter which ProcessForms to update
   */
  where?: Prisma.ProcessFormWhereInput
  /**
   * Limit how many ProcessForms to update.
   */
  limit?: number
}

/**
 * ProcessForm updateManyAndReturn
 */
export type ProcessFormUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessForm
   */
  select?: Prisma.ProcessFormSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessForm
   */
  omit?: Prisma.ProcessFormOmit<ExtArgs> | null
  /**
   * The data used to update ProcessForms.
   */
  data: Prisma.XOR<Prisma.ProcessFormUpdateManyMutationInput, Prisma.ProcessFormUncheckedUpdateManyInput>
  /**
   * Filter which ProcessForms to update
   */
  where?: Prisma.ProcessFormWhereInput
  /**
   * Limit how many ProcessForms to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFormIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProcessForm upsert
 */
export type ProcessFormUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessForm
   */
  select?: Prisma.ProcessFormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessForm
   */
  omit?: Prisma.ProcessFormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFormInclude<ExtArgs> | null
  /**
   * The filter to search for the ProcessForm to update in case it exists.
   */
  where: Prisma.ProcessFormWhereUniqueInput
  /**
   * In case the ProcessForm found by the `where` argument doesn't exist, create a new ProcessForm with this data.
   */
  create: Prisma.XOR<Prisma.ProcessFormCreateInput, Prisma.ProcessFormUncheckedCreateInput>
  /**
   * In case the ProcessForm was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProcessFormUpdateInput, Prisma.ProcessFormUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessForm delete
 */
export type ProcessFormDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessForm
   */
  select?: Prisma.ProcessFormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessForm
   */
  omit?: Prisma.ProcessFormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFormInclude<ExtArgs> | null
  /**
   * Filter which ProcessForm to delete.
   */
  where: Prisma.ProcessFormWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessForm deleteMany
 */
export type ProcessFormDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProcessForms to delete
   */
  where?: Prisma.ProcessFormWhereInput
  /**
   * Limit how many ProcessForms to delete.
   */
  limit?: number
}

/**
 * ProcessForm without action
 */
export type ProcessFormDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessForm
   */
  select?: Prisma.ProcessFormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessForm
   */
  omit?: Prisma.ProcessFormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFormInclude<ExtArgs> | null
}
