
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Role` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Role
 * 
 */
export type RoleModel = runtime.Types.Result.DefaultSelection<Prisma.$RolePayload>

export type AggregateRole = {
  _count: RoleCountAggregateOutputType | null
  _min: RoleMinAggregateOutputType | null
  _max: RoleMaxAggregateOutputType | null
}

export type RoleMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  status: $Enums.RoleStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type RoleMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  status: $Enums.RoleStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type RoleCountAggregateOutputType = {
  id: number
  name: number
  description: number
  status: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type RoleMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type RoleMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type RoleCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type RoleAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Role to aggregate.
   */
  where?: Prisma.RoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Roles to fetch.
   */
  orderBy?: Prisma.RoleOrderByWithRelationInput | Prisma.RoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Roles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Roles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Roles
  **/
  _count?: true | RoleCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RoleMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RoleMaxAggregateInputType
}

export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
      [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRole[P]>
    : Prisma.GetScalarType<T[P], AggregateRole[P]>
}




export type RoleGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RoleWhereInput
  orderBy?: Prisma.RoleOrderByWithAggregationInput | Prisma.RoleOrderByWithAggregationInput[]
  by: Prisma.RoleScalarFieldEnum[] | Prisma.RoleScalarFieldEnum
  having?: Prisma.RoleScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RoleCountAggregateInputType | true
  _min?: RoleMinAggregateInputType
  _max?: RoleMaxAggregateInputType
}

export type RoleGroupByOutputType = {
  id: string
  name: string
  description: string | null
  status: $Enums.RoleStatus
  createdAt: Date
  updatedAt: Date
  _count: RoleCountAggregateOutputType | null
  _min: RoleMinAggregateOutputType | null
  _max: RoleMaxAggregateOutputType | null
}

type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RoleGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RoleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RoleGroupByOutputType[P]>
      }
    >
  >



export type RoleWhereInput = {
  AND?: Prisma.RoleWhereInput | Prisma.RoleWhereInput[]
  OR?: Prisma.RoleWhereInput[]
  NOT?: Prisma.RoleWhereInput | Prisma.RoleWhereInput[]
  id?: Prisma.UuidFilter<"Role"> | string
  name?: Prisma.StringFilter<"Role"> | string
  description?: Prisma.StringNullableFilter<"Role"> | string | null
  status?: Prisma.EnumRoleStatusFilter<"Role"> | $Enums.RoleStatus
  createdAt?: Prisma.DateTimeFilter<"Role"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Role"> | Date | string
  groups?: Prisma.GroupRoleListRelationFilter
  processes?: Prisma.ProcessRoleListRelationFilter
  users?: Prisma.UserRoleListRelationFilter
}

export type RoleOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  groups?: Prisma.GroupRoleOrderByRelationAggregateInput
  processes?: Prisma.ProcessRoleOrderByRelationAggregateInput
  users?: Prisma.UserRoleOrderByRelationAggregateInput
  _relevance?: Prisma.RoleOrderByRelevanceInput
}

export type RoleWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.RoleWhereInput | Prisma.RoleWhereInput[]
  OR?: Prisma.RoleWhereInput[]
  NOT?: Prisma.RoleWhereInput | Prisma.RoleWhereInput[]
  description?: Prisma.StringNullableFilter<"Role"> | string | null
  status?: Prisma.EnumRoleStatusFilter<"Role"> | $Enums.RoleStatus
  createdAt?: Prisma.DateTimeFilter<"Role"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Role"> | Date | string
  groups?: Prisma.GroupRoleListRelationFilter
  processes?: Prisma.ProcessRoleListRelationFilter
  users?: Prisma.UserRoleListRelationFilter
}, "id" | "name">

export type RoleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.RoleCountOrderByAggregateInput
  _max?: Prisma.RoleMaxOrderByAggregateInput
  _min?: Prisma.RoleMinOrderByAggregateInput
}

export type RoleScalarWhereWithAggregatesInput = {
  AND?: Prisma.RoleScalarWhereWithAggregatesInput | Prisma.RoleScalarWhereWithAggregatesInput[]
  OR?: Prisma.RoleScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RoleScalarWhereWithAggregatesInput | Prisma.RoleScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Role"> | string
  name?: Prisma.StringWithAggregatesFilter<"Role"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Role"> | string | null
  status?: Prisma.EnumRoleStatusWithAggregatesFilter<"Role"> | $Enums.RoleStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Role"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Role"> | Date | string
}

export type RoleCreateInput = {
  id?: string
  name: string
  description?: string | null
  status?: $Enums.RoleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  groups?: Prisma.GroupRoleCreateNestedManyWithoutRoleInput
  processes?: Prisma.ProcessRoleCreateNestedManyWithoutRoleInput
  users?: Prisma.UserRoleCreateNestedManyWithoutRoleInput
}

export type RoleUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  status?: $Enums.RoleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  groups?: Prisma.GroupRoleUncheckedCreateNestedManyWithoutRoleInput
  processes?: Prisma.ProcessRoleUncheckedCreateNestedManyWithoutRoleInput
  users?: Prisma.UserRoleUncheckedCreateNestedManyWithoutRoleInput
}

export type RoleUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  groups?: Prisma.GroupRoleUpdateManyWithoutRoleNestedInput
  processes?: Prisma.ProcessRoleUpdateManyWithoutRoleNestedInput
  users?: Prisma.UserRoleUpdateManyWithoutRoleNestedInput
}

export type RoleUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  groups?: Prisma.GroupRoleUncheckedUpdateManyWithoutRoleNestedInput
  processes?: Prisma.ProcessRoleUncheckedUpdateManyWithoutRoleNestedInput
  users?: Prisma.UserRoleUncheckedUpdateManyWithoutRoleNestedInput
}

export type RoleCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  status?: $Enums.RoleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RoleUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RoleUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RoleOrderByRelevanceInput = {
  fields: Prisma.RoleOrderByRelevanceFieldEnum | Prisma.RoleOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type RoleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type RoleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type RoleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type RoleScalarRelationFilter = {
  is?: Prisma.RoleWhereInput
  isNot?: Prisma.RoleWhereInput
}

export type EnumRoleStatusFieldUpdateOperationsInput = {
  set?: $Enums.RoleStatus
}

export type RoleCreateNestedOneWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.RoleCreateWithoutUsersInput, Prisma.RoleUncheckedCreateWithoutUsersInput>
  connectOrCreate?: Prisma.RoleCreateOrConnectWithoutUsersInput
  connect?: Prisma.RoleWhereUniqueInput
}

export type RoleUpdateOneRequiredWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.RoleCreateWithoutUsersInput, Prisma.RoleUncheckedCreateWithoutUsersInput>
  connectOrCreate?: Prisma.RoleCreateOrConnectWithoutUsersInput
  upsert?: Prisma.RoleUpsertWithoutUsersInput
  connect?: Prisma.RoleWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.RoleUpdateToOneWithWhereWithoutUsersInput, Prisma.RoleUpdateWithoutUsersInput>, Prisma.RoleUncheckedUpdateWithoutUsersInput>
}

export type RoleCreateNestedOneWithoutGroupsInput = {
  create?: Prisma.XOR<Prisma.RoleCreateWithoutGroupsInput, Prisma.RoleUncheckedCreateWithoutGroupsInput>
  connectOrCreate?: Prisma.RoleCreateOrConnectWithoutGroupsInput
  connect?: Prisma.RoleWhereUniqueInput
}

export type RoleUpdateOneRequiredWithoutGroupsNestedInput = {
  create?: Prisma.XOR<Prisma.RoleCreateWithoutGroupsInput, Prisma.RoleUncheckedCreateWithoutGroupsInput>
  connectOrCreate?: Prisma.RoleCreateOrConnectWithoutGroupsInput
  upsert?: Prisma.RoleUpsertWithoutGroupsInput
  connect?: Prisma.RoleWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.RoleUpdateToOneWithWhereWithoutGroupsInput, Prisma.RoleUpdateWithoutGroupsInput>, Prisma.RoleUncheckedUpdateWithoutGroupsInput>
}

export type RoleCreateNestedOneWithoutProcessesInput = {
  create?: Prisma.XOR<Prisma.RoleCreateWithoutProcessesInput, Prisma.RoleUncheckedCreateWithoutProcessesInput>
  connectOrCreate?: Prisma.RoleCreateOrConnectWithoutProcessesInput
  connect?: Prisma.RoleWhereUniqueInput
}

export type RoleUpdateOneRequiredWithoutProcessesNestedInput = {
  create?: Prisma.XOR<Prisma.RoleCreateWithoutProcessesInput, Prisma.RoleUncheckedCreateWithoutProcessesInput>
  connectOrCreate?: Prisma.RoleCreateOrConnectWithoutProcessesInput
  upsert?: Prisma.RoleUpsertWithoutProcessesInput
  connect?: Prisma.RoleWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.RoleUpdateToOneWithWhereWithoutProcessesInput, Prisma.RoleUpdateWithoutProcessesInput>, Prisma.RoleUncheckedUpdateWithoutProcessesInput>
}

export type RoleCreateWithoutUsersInput = {
  id?: string
  name: string
  description?: string | null
  status?: $Enums.RoleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  groups?: Prisma.GroupRoleCreateNestedManyWithoutRoleInput
  processes?: Prisma.ProcessRoleCreateNestedManyWithoutRoleInput
}

export type RoleUncheckedCreateWithoutUsersInput = {
  id?: string
  name: string
  description?: string | null
  status?: $Enums.RoleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  groups?: Prisma.GroupRoleUncheckedCreateNestedManyWithoutRoleInput
  processes?: Prisma.ProcessRoleUncheckedCreateNestedManyWithoutRoleInput
}

export type RoleCreateOrConnectWithoutUsersInput = {
  where: Prisma.RoleWhereUniqueInput
  create: Prisma.XOR<Prisma.RoleCreateWithoutUsersInput, Prisma.RoleUncheckedCreateWithoutUsersInput>
}

export type RoleUpsertWithoutUsersInput = {
  update: Prisma.XOR<Prisma.RoleUpdateWithoutUsersInput, Prisma.RoleUncheckedUpdateWithoutUsersInput>
  create: Prisma.XOR<Prisma.RoleCreateWithoutUsersInput, Prisma.RoleUncheckedCreateWithoutUsersInput>
  where?: Prisma.RoleWhereInput
}

export type RoleUpdateToOneWithWhereWithoutUsersInput = {
  where?: Prisma.RoleWhereInput
  data: Prisma.XOR<Prisma.RoleUpdateWithoutUsersInput, Prisma.RoleUncheckedUpdateWithoutUsersInput>
}

export type RoleUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  groups?: Prisma.GroupRoleUpdateManyWithoutRoleNestedInput
  processes?: Prisma.ProcessRoleUpdateManyWithoutRoleNestedInput
}

export type RoleUncheckedUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  groups?: Prisma.GroupRoleUncheckedUpdateManyWithoutRoleNestedInput
  processes?: Prisma.ProcessRoleUncheckedUpdateManyWithoutRoleNestedInput
}

export type RoleCreateWithoutGroupsInput = {
  id?: string
  name: string
  description?: string | null
  status?: $Enums.RoleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  processes?: Prisma.ProcessRoleCreateNestedManyWithoutRoleInput
  users?: Prisma.UserRoleCreateNestedManyWithoutRoleInput
}

export type RoleUncheckedCreateWithoutGroupsInput = {
  id?: string
  name: string
  description?: string | null
  status?: $Enums.RoleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  processes?: Prisma.ProcessRoleUncheckedCreateNestedManyWithoutRoleInput
  users?: Prisma.UserRoleUncheckedCreateNestedManyWithoutRoleInput
}

export type RoleCreateOrConnectWithoutGroupsInput = {
  where: Prisma.RoleWhereUniqueInput
  create: Prisma.XOR<Prisma.RoleCreateWithoutGroupsInput, Prisma.RoleUncheckedCreateWithoutGroupsInput>
}

export type RoleUpsertWithoutGroupsInput = {
  update: Prisma.XOR<Prisma.RoleUpdateWithoutGroupsInput, Prisma.RoleUncheckedUpdateWithoutGroupsInput>
  create: Prisma.XOR<Prisma.RoleCreateWithoutGroupsInput, Prisma.RoleUncheckedCreateWithoutGroupsInput>
  where?: Prisma.RoleWhereInput
}

export type RoleUpdateToOneWithWhereWithoutGroupsInput = {
  where?: Prisma.RoleWhereInput
  data: Prisma.XOR<Prisma.RoleUpdateWithoutGroupsInput, Prisma.RoleUncheckedUpdateWithoutGroupsInput>
}

export type RoleUpdateWithoutGroupsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  processes?: Prisma.ProcessRoleUpdateManyWithoutRoleNestedInput
  users?: Prisma.UserRoleUpdateManyWithoutRoleNestedInput
}

export type RoleUncheckedUpdateWithoutGroupsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  processes?: Prisma.ProcessRoleUncheckedUpdateManyWithoutRoleNestedInput
  users?: Prisma.UserRoleUncheckedUpdateManyWithoutRoleNestedInput
}

export type RoleCreateWithoutProcessesInput = {
  id?: string
  name: string
  description?: string | null
  status?: $Enums.RoleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  groups?: Prisma.GroupRoleCreateNestedManyWithoutRoleInput
  users?: Prisma.UserRoleCreateNestedManyWithoutRoleInput
}

export type RoleUncheckedCreateWithoutProcessesInput = {
  id?: string
  name: string
  description?: string | null
  status?: $Enums.RoleStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  groups?: Prisma.GroupRoleUncheckedCreateNestedManyWithoutRoleInput
  users?: Prisma.UserRoleUncheckedCreateNestedManyWithoutRoleInput
}

export type RoleCreateOrConnectWithoutProcessesInput = {
  where: Prisma.RoleWhereUniqueInput
  create: Prisma.XOR<Prisma.RoleCreateWithoutProcessesInput, Prisma.RoleUncheckedCreateWithoutProcessesInput>
}

export type RoleUpsertWithoutProcessesInput = {
  update: Prisma.XOR<Prisma.RoleUpdateWithoutProcessesInput, Prisma.RoleUncheckedUpdateWithoutProcessesInput>
  create: Prisma.XOR<Prisma.RoleCreateWithoutProcessesInput, Prisma.RoleUncheckedCreateWithoutProcessesInput>
  where?: Prisma.RoleWhereInput
}

export type RoleUpdateToOneWithWhereWithoutProcessesInput = {
  where?: Prisma.RoleWhereInput
  data: Prisma.XOR<Prisma.RoleUpdateWithoutProcessesInput, Prisma.RoleUncheckedUpdateWithoutProcessesInput>
}

export type RoleUpdateWithoutProcessesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  groups?: Prisma.GroupRoleUpdateManyWithoutRoleNestedInput
  users?: Prisma.UserRoleUpdateManyWithoutRoleNestedInput
}

export type RoleUncheckedUpdateWithoutProcessesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  groups?: Prisma.GroupRoleUncheckedUpdateManyWithoutRoleNestedInput
  users?: Prisma.UserRoleUncheckedUpdateManyWithoutRoleNestedInput
}


/**
 * Count Type RoleCountOutputType
 */

export type RoleCountOutputType = {
  groups: number
  processes: number
  users: number
}

export type RoleCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  groups?: boolean | RoleCountOutputTypeCountGroupsArgs
  processes?: boolean | RoleCountOutputTypeCountProcessesArgs
  users?: boolean | RoleCountOutputTypeCountUsersArgs
}

/**
 * RoleCountOutputType without action
 */
export type RoleCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RoleCountOutputType
   */
  select?: Prisma.RoleCountOutputTypeSelect<ExtArgs> | null
}

/**
 * RoleCountOutputType without action
 */
export type RoleCountOutputTypeCountGroupsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GroupRoleWhereInput
}

/**
 * RoleCountOutputType without action
 */
export type RoleCountOutputTypeCountProcessesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProcessRoleWhereInput
}

/**
 * RoleCountOutputType without action
 */
export type RoleCountOutputTypeCountUsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserRoleWhereInput
}


export type RoleSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  groups?: boolean | Prisma.Role$groupsArgs<ExtArgs>
  processes?: boolean | Prisma.Role$processesArgs<ExtArgs>
  users?: boolean | Prisma.Role$usersArgs<ExtArgs>
  _count?: boolean | Prisma.RoleCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["role"]>

export type RoleSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["role"]>

export type RoleSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["role"]>

export type RoleSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type RoleOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["role"]>
export type RoleInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  groups?: boolean | Prisma.Role$groupsArgs<ExtArgs>
  processes?: boolean | Prisma.Role$processesArgs<ExtArgs>
  users?: boolean | Prisma.Role$usersArgs<ExtArgs>
  _count?: boolean | Prisma.RoleCountOutputTypeDefaultArgs<ExtArgs>
}
export type RoleIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type RoleIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $RolePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Role"
  objects: {
    groups: Prisma.$GroupRolePayload<ExtArgs>[]
    processes: Prisma.$ProcessRolePayload<ExtArgs>[]
    users: Prisma.$UserRolePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    status: $Enums.RoleStatus
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["role"]>
  composites: {}
}

export type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RolePayload, S>

export type RoleCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: RoleCountAggregateInputType | true
  }

export interface RoleDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
  /**
   * Find zero or one Role that matches the filter.
   * @param {RoleFindUniqueArgs} args - Arguments to find a Role
   * @example
   * // Get one Role
   * const role = await prisma.role.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RoleFindUniqueArgs>(args: Prisma.SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RoleClient<runtime.Types.Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Role that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
   * @example
   * // Get one Role
   * const role = await prisma.role.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RoleClient<runtime.Types.Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Role that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RoleFindFirstArgs} args - Arguments to find a Role
   * @example
   * // Get one Role
   * const role = await prisma.role.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RoleFindFirstArgs>(args?: Prisma.SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma.Prisma__RoleClient<runtime.Types.Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Role that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
   * @example
   * // Get one Role
   * const role = await prisma.role.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RoleClient<runtime.Types.Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Roles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Roles
   * const roles = await prisma.role.findMany()
   * 
   * // Get first 10 Roles
   * const roles = await prisma.role.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RoleFindManyArgs>(args?: Prisma.SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Role.
   * @param {RoleCreateArgs} args - Arguments to create a Role.
   * @example
   * // Create one Role
   * const Role = await prisma.role.create({
   *   data: {
   *     // ... data to create a Role
   *   }
   * })
   * 
   */
  create<T extends RoleCreateArgs>(args: Prisma.SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma.Prisma__RoleClient<runtime.Types.Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Roles.
   * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
   * @example
   * // Create many Roles
   * const role = await prisma.role.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RoleCreateManyArgs>(args?: Prisma.SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Roles and returns the data saved in the database.
   * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
   * @example
   * // Create many Roles
   * const role = await prisma.role.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Roles and only return the `id`
   * const roleWithIdOnly = await prisma.role.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Role.
   * @param {RoleDeleteArgs} args - Arguments to delete one Role.
   * @example
   * // Delete one Role
   * const Role = await prisma.role.delete({
   *   where: {
   *     // ... filter to delete one Role
   *   }
   * })
   * 
   */
  delete<T extends RoleDeleteArgs>(args: Prisma.SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma.Prisma__RoleClient<runtime.Types.Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Role.
   * @param {RoleUpdateArgs} args - Arguments to update one Role.
   * @example
   * // Update one Role
   * const role = await prisma.role.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RoleUpdateArgs>(args: Prisma.SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma.Prisma__RoleClient<runtime.Types.Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Roles.
   * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
   * @example
   * // Delete a few Roles
   * const { count } = await prisma.role.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RoleDeleteManyArgs>(args?: Prisma.SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Roles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Roles
   * const role = await prisma.role.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RoleUpdateManyArgs>(args: Prisma.SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Roles and returns the data updated in the database.
   * @param {RoleUpdateManyAndReturnArgs} args - Arguments to update many Roles.
   * @example
   * // Update many Roles
   * const role = await prisma.role.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Roles and only return the `id`
   * const roleWithIdOnly = await prisma.role.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RoleUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Role.
   * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
   * @example
   * // Update or create a Role
   * const role = await prisma.role.upsert({
   *   create: {
   *     // ... data to create a Role
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Role we want to update
   *   }
   * })
   */
  upsert<T extends RoleUpsertArgs>(args: Prisma.SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma.Prisma__RoleClient<runtime.Types.Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Roles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RoleCountArgs} args - Arguments to filter Roles to count.
   * @example
   * // Count the number of Roles
   * const count = await prisma.role.count({
   *   where: {
   *     // ... the filter for the Roles we want to count
   *   }
   * })
  **/
  count<T extends RoleCountArgs>(
    args?: Prisma.Subset<T, RoleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RoleCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Role.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RoleAggregateArgs>(args: Prisma.Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

  /**
   * Group by Role.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RoleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RoleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RoleGroupByArgs['orderBy'] }
      : { orderBy?: RoleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Role model
 */
readonly fields: RoleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Role.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RoleClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  groups<T extends Prisma.Role$groupsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Role$groupsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GroupRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  processes<T extends Prisma.Role$processesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Role$processesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  users<T extends Prisma.Role$usersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Role$usersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Role model
 */
export interface RoleFieldRefs {
  readonly id: Prisma.FieldRef<"Role", 'String'>
  readonly name: Prisma.FieldRef<"Role", 'String'>
  readonly description: Prisma.FieldRef<"Role", 'String'>
  readonly status: Prisma.FieldRef<"Role", 'RoleStatus'>
  readonly createdAt: Prisma.FieldRef<"Role", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Role", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Role findUnique
 */
export type RoleFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Role
   */
  select?: Prisma.RoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Role
   */
  omit?: Prisma.RoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RoleInclude<ExtArgs> | null
  /**
   * Filter, which Role to fetch.
   */
  where: Prisma.RoleWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Role findUniqueOrThrow
 */
export type RoleFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Role
   */
  select?: Prisma.RoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Role
   */
  omit?: Prisma.RoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RoleInclude<ExtArgs> | null
  /**
   * Filter, which Role to fetch.
   */
  where: Prisma.RoleWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Role findFirst
 */
export type RoleFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Role
   */
  select?: Prisma.RoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Role
   */
  omit?: Prisma.RoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RoleInclude<ExtArgs> | null
  /**
   * Filter, which Role to fetch.
   */
  where?: Prisma.RoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Roles to fetch.
   */
  orderBy?: Prisma.RoleOrderByWithRelationInput | Prisma.RoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Roles.
   */
  cursor?: Prisma.RoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Roles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Roles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Roles.
   */
  distinct?: Prisma.RoleScalarFieldEnum | Prisma.RoleScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Role findFirstOrThrow
 */
export type RoleFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Role
   */
  select?: Prisma.RoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Role
   */
  omit?: Prisma.RoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RoleInclude<ExtArgs> | null
  /**
   * Filter, which Role to fetch.
   */
  where?: Prisma.RoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Roles to fetch.
   */
  orderBy?: Prisma.RoleOrderByWithRelationInput | Prisma.RoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Roles.
   */
  cursor?: Prisma.RoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Roles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Roles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Roles.
   */
  distinct?: Prisma.RoleScalarFieldEnum | Prisma.RoleScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Role findMany
 */
export type RoleFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Role
   */
  select?: Prisma.RoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Role
   */
  omit?: Prisma.RoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RoleInclude<ExtArgs> | null
  /**
   * Filter, which Roles to fetch.
   */
  where?: Prisma.RoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Roles to fetch.
   */
  orderBy?: Prisma.RoleOrderByWithRelationInput | Prisma.RoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Roles.
   */
  cursor?: Prisma.RoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Roles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Roles.
   */
  skip?: number
  distinct?: Prisma.RoleScalarFieldEnum | Prisma.RoleScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Role create
 */
export type RoleCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Role
   */
  select?: Prisma.RoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Role
   */
  omit?: Prisma.RoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RoleInclude<ExtArgs> | null
  /**
   * The data needed to create a Role.
   */
  data: Prisma.XOR<Prisma.RoleCreateInput, Prisma.RoleUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Role createMany
 */
export type RoleCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Roles.
   */
  data: Prisma.RoleCreateManyInput | Prisma.RoleCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Role createManyAndReturn
 */
export type RoleCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Role
   */
  select?: Prisma.RoleSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Role
   */
  omit?: Prisma.RoleOmit<ExtArgs> | null
  /**
   * The data used to create many Roles.
   */
  data: Prisma.RoleCreateManyInput | Prisma.RoleCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Role update
 */
export type RoleUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Role
   */
  select?: Prisma.RoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Role
   */
  omit?: Prisma.RoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RoleInclude<ExtArgs> | null
  /**
   * The data needed to update a Role.
   */
  data: Prisma.XOR<Prisma.RoleUpdateInput, Prisma.RoleUncheckedUpdateInput>
  /**
   * Choose, which Role to update.
   */
  where: Prisma.RoleWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Role updateMany
 */
export type RoleUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Roles.
   */
  data: Prisma.XOR<Prisma.RoleUpdateManyMutationInput, Prisma.RoleUncheckedUpdateManyInput>
  /**
   * Filter which Roles to update
   */
  where?: Prisma.RoleWhereInput
  /**
   * Limit how many Roles to update.
   */
  limit?: number
}

/**
 * Role updateManyAndReturn
 */
export type RoleUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Role
   */
  select?: Prisma.RoleSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Role
   */
  omit?: Prisma.RoleOmit<ExtArgs> | null
  /**
   * The data used to update Roles.
   */
  data: Prisma.XOR<Prisma.RoleUpdateManyMutationInput, Prisma.RoleUncheckedUpdateManyInput>
  /**
   * Filter which Roles to update
   */
  where?: Prisma.RoleWhereInput
  /**
   * Limit how many Roles to update.
   */
  limit?: number
}

/**
 * Role upsert
 */
export type RoleUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Role
   */
  select?: Prisma.RoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Role
   */
  omit?: Prisma.RoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RoleInclude<ExtArgs> | null
  /**
   * The filter to search for the Role to update in case it exists.
   */
  where: Prisma.RoleWhereUniqueInput
  /**
   * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
   */
  create: Prisma.XOR<Prisma.RoleCreateInput, Prisma.RoleUncheckedCreateInput>
  /**
   * In case the Role was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RoleUpdateInput, Prisma.RoleUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Role delete
 */
export type RoleDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Role
   */
  select?: Prisma.RoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Role
   */
  omit?: Prisma.RoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RoleInclude<ExtArgs> | null
  /**
   * Filter which Role to delete.
   */
  where: Prisma.RoleWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Role deleteMany
 */
export type RoleDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Roles to delete
   */
  where?: Prisma.RoleWhereInput
  /**
   * Limit how many Roles to delete.
   */
  limit?: number
}

/**
 * Role.groups
 */
export type Role$groupsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupRole
   */
  select?: Prisma.GroupRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupRole
   */
  omit?: Prisma.GroupRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupRoleInclude<ExtArgs> | null
  where?: Prisma.GroupRoleWhereInput
  orderBy?: Prisma.GroupRoleOrderByWithRelationInput | Prisma.GroupRoleOrderByWithRelationInput[]
  cursor?: Prisma.GroupRoleWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.GroupRoleScalarFieldEnum | Prisma.GroupRoleScalarFieldEnum[]
}

/**
 * Role.processes
 */
export type Role$processesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessRole
   */
  select?: Prisma.ProcessRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessRole
   */
  omit?: Prisma.ProcessRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessRoleInclude<ExtArgs> | null
  where?: Prisma.ProcessRoleWhereInput
  orderBy?: Prisma.ProcessRoleOrderByWithRelationInput | Prisma.ProcessRoleOrderByWithRelationInput[]
  cursor?: Prisma.ProcessRoleWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProcessRoleScalarFieldEnum | Prisma.ProcessRoleScalarFieldEnum[]
}

/**
 * Role.users
 */
export type Role$usersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserRole
   */
  select?: Prisma.UserRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserRole
   */
  omit?: Prisma.UserRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserRoleInclude<ExtArgs> | null
  where?: Prisma.UserRoleWhereInput
  orderBy?: Prisma.UserRoleOrderByWithRelationInput | Prisma.UserRoleOrderByWithRelationInput[]
  cursor?: Prisma.UserRoleWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserRoleScalarFieldEnum | Prisma.UserRoleScalarFieldEnum[]
}

/**
 * Role without action
 */
export type RoleDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Role
   */
  select?: Prisma.RoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Role
   */
  omit?: Prisma.RoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RoleInclude<ExtArgs> | null
}
