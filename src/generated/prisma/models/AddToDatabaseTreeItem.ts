
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `AddToDatabaseTreeItem` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model AddToDatabaseTreeItem
 * 
 */
export type AddToDatabaseTreeItemModel = runtime.Types.Result.DefaultSelection<Prisma.$AddToDatabaseTreeItemPayload>

export type AggregateAddToDatabaseTreeItem = {
  _count: AddToDatabaseTreeItemCountAggregateOutputType | null
  _min: AddToDatabaseTreeItemMinAggregateOutputType | null
  _max: AddToDatabaseTreeItemMaxAggregateOutputType | null
}

export type AddToDatabaseTreeItemMinAggregateOutputType = {
  id: string | null
  name: string | null
  status: $Enums.AddToDatabaseStatus | null
  parentId: string | null
  addToDatabaseId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AddToDatabaseTreeItemMaxAggregateOutputType = {
  id: string | null
  name: string | null
  status: $Enums.AddToDatabaseStatus | null
  parentId: string | null
  addToDatabaseId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AddToDatabaseTreeItemCountAggregateOutputType = {
  id: number
  name: number
  status: number
  parentId: number
  addToDatabaseId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AddToDatabaseTreeItemMinAggregateInputType = {
  id?: true
  name?: true
  status?: true
  parentId?: true
  addToDatabaseId?: true
  createdAt?: true
  updatedAt?: true
}

export type AddToDatabaseTreeItemMaxAggregateInputType = {
  id?: true
  name?: true
  status?: true
  parentId?: true
  addToDatabaseId?: true
  createdAt?: true
  updatedAt?: true
}

export type AddToDatabaseTreeItemCountAggregateInputType = {
  id?: true
  name?: true
  status?: true
  parentId?: true
  addToDatabaseId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AddToDatabaseTreeItemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AddToDatabaseTreeItem to aggregate.
   */
  where?: Prisma.AddToDatabaseTreeItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AddToDatabaseTreeItems to fetch.
   */
  orderBy?: Prisma.AddToDatabaseTreeItemOrderByWithRelationInput | Prisma.AddToDatabaseTreeItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AddToDatabaseTreeItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AddToDatabaseTreeItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AddToDatabaseTreeItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AddToDatabaseTreeItems
  **/
  _count?: true | AddToDatabaseTreeItemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AddToDatabaseTreeItemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AddToDatabaseTreeItemMaxAggregateInputType
}

export type GetAddToDatabaseTreeItemAggregateType<T extends AddToDatabaseTreeItemAggregateArgs> = {
      [P in keyof T & keyof AggregateAddToDatabaseTreeItem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAddToDatabaseTreeItem[P]>
    : Prisma.GetScalarType<T[P], AggregateAddToDatabaseTreeItem[P]>
}




export type AddToDatabaseTreeItemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AddToDatabaseTreeItemWhereInput
  orderBy?: Prisma.AddToDatabaseTreeItemOrderByWithAggregationInput | Prisma.AddToDatabaseTreeItemOrderByWithAggregationInput[]
  by: Prisma.AddToDatabaseTreeItemScalarFieldEnum[] | Prisma.AddToDatabaseTreeItemScalarFieldEnum
  having?: Prisma.AddToDatabaseTreeItemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AddToDatabaseTreeItemCountAggregateInputType | true
  _min?: AddToDatabaseTreeItemMinAggregateInputType
  _max?: AddToDatabaseTreeItemMaxAggregateInputType
}

export type AddToDatabaseTreeItemGroupByOutputType = {
  id: string
  name: string
  status: $Enums.AddToDatabaseStatus
  parentId: string | null
  addToDatabaseId: string
  createdAt: Date
  updatedAt: Date
  _count: AddToDatabaseTreeItemCountAggregateOutputType | null
  _min: AddToDatabaseTreeItemMinAggregateOutputType | null
  _max: AddToDatabaseTreeItemMaxAggregateOutputType | null
}

type GetAddToDatabaseTreeItemGroupByPayload<T extends AddToDatabaseTreeItemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AddToDatabaseTreeItemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AddToDatabaseTreeItemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AddToDatabaseTreeItemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AddToDatabaseTreeItemGroupByOutputType[P]>
      }
    >
  >



export type AddToDatabaseTreeItemWhereInput = {
  AND?: Prisma.AddToDatabaseTreeItemWhereInput | Prisma.AddToDatabaseTreeItemWhereInput[]
  OR?: Prisma.AddToDatabaseTreeItemWhereInput[]
  NOT?: Prisma.AddToDatabaseTreeItemWhereInput | Prisma.AddToDatabaseTreeItemWhereInput[]
  id?: Prisma.UuidFilter<"AddToDatabaseTreeItem"> | string
  name?: Prisma.StringFilter<"AddToDatabaseTreeItem"> | string
  status?: Prisma.EnumAddToDatabaseStatusFilter<"AddToDatabaseTreeItem"> | $Enums.AddToDatabaseStatus
  parentId?: Prisma.UuidNullableFilter<"AddToDatabaseTreeItem"> | string | null
  addToDatabaseId?: Prisma.UuidFilter<"AddToDatabaseTreeItem"> | string
  createdAt?: Prisma.DateTimeFilter<"AddToDatabaseTreeItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AddToDatabaseTreeItem"> | Date | string
  parent?: Prisma.XOR<Prisma.AddToDatabaseTreeItemNullableScalarRelationFilter, Prisma.AddToDatabaseTreeItemWhereInput> | null
  children?: Prisma.AddToDatabaseTreeItemListRelationFilter
  addToDatabase?: Prisma.XOR<Prisma.AddToDatabaseScalarRelationFilter, Prisma.AddToDatabaseWhereInput>
}

export type AddToDatabaseTreeItemOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  status?: Prisma.SortOrder
  parentId?: Prisma.SortOrderInput | Prisma.SortOrder
  addToDatabaseId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  parent?: Prisma.AddToDatabaseTreeItemOrderByWithRelationInput
  children?: Prisma.AddToDatabaseTreeItemOrderByRelationAggregateInput
  addToDatabase?: Prisma.AddToDatabaseOrderByWithRelationInput
  _relevance?: Prisma.AddToDatabaseTreeItemOrderByRelevanceInput
}

export type AddToDatabaseTreeItemWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AddToDatabaseTreeItemWhereInput | Prisma.AddToDatabaseTreeItemWhereInput[]
  OR?: Prisma.AddToDatabaseTreeItemWhereInput[]
  NOT?: Prisma.AddToDatabaseTreeItemWhereInput | Prisma.AddToDatabaseTreeItemWhereInput[]
  name?: Prisma.StringFilter<"AddToDatabaseTreeItem"> | string
  status?: Prisma.EnumAddToDatabaseStatusFilter<"AddToDatabaseTreeItem"> | $Enums.AddToDatabaseStatus
  parentId?: Prisma.UuidNullableFilter<"AddToDatabaseTreeItem"> | string | null
  addToDatabaseId?: Prisma.UuidFilter<"AddToDatabaseTreeItem"> | string
  createdAt?: Prisma.DateTimeFilter<"AddToDatabaseTreeItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AddToDatabaseTreeItem"> | Date | string
  parent?: Prisma.XOR<Prisma.AddToDatabaseTreeItemNullableScalarRelationFilter, Prisma.AddToDatabaseTreeItemWhereInput> | null
  children?: Prisma.AddToDatabaseTreeItemListRelationFilter
  addToDatabase?: Prisma.XOR<Prisma.AddToDatabaseScalarRelationFilter, Prisma.AddToDatabaseWhereInput>
}, "id">

export type AddToDatabaseTreeItemOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  status?: Prisma.SortOrder
  parentId?: Prisma.SortOrderInput | Prisma.SortOrder
  addToDatabaseId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AddToDatabaseTreeItemCountOrderByAggregateInput
  _max?: Prisma.AddToDatabaseTreeItemMaxOrderByAggregateInput
  _min?: Prisma.AddToDatabaseTreeItemMinOrderByAggregateInput
}

export type AddToDatabaseTreeItemScalarWhereWithAggregatesInput = {
  AND?: Prisma.AddToDatabaseTreeItemScalarWhereWithAggregatesInput | Prisma.AddToDatabaseTreeItemScalarWhereWithAggregatesInput[]
  OR?: Prisma.AddToDatabaseTreeItemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AddToDatabaseTreeItemScalarWhereWithAggregatesInput | Prisma.AddToDatabaseTreeItemScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"AddToDatabaseTreeItem"> | string
  name?: Prisma.StringWithAggregatesFilter<"AddToDatabaseTreeItem"> | string
  status?: Prisma.EnumAddToDatabaseStatusWithAggregatesFilter<"AddToDatabaseTreeItem"> | $Enums.AddToDatabaseStatus
  parentId?: Prisma.UuidNullableWithAggregatesFilter<"AddToDatabaseTreeItem"> | string | null
  addToDatabaseId?: Prisma.UuidWithAggregatesFilter<"AddToDatabaseTreeItem"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AddToDatabaseTreeItem"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"AddToDatabaseTreeItem"> | Date | string
}

export type AddToDatabaseTreeItemCreateInput = {
  id?: string
  name: string
  status?: $Enums.AddToDatabaseStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  parent?: Prisma.AddToDatabaseTreeItemCreateNestedOneWithoutChildrenInput
  children?: Prisma.AddToDatabaseTreeItemCreateNestedManyWithoutParentInput
  addToDatabase: Prisma.AddToDatabaseCreateNestedOneWithoutTreeItemsInput
}

export type AddToDatabaseTreeItemUncheckedCreateInput = {
  id?: string
  name: string
  status?: $Enums.AddToDatabaseStatus
  parentId?: string | null
  addToDatabaseId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  children?: Prisma.AddToDatabaseTreeItemUncheckedCreateNestedManyWithoutParentInput
}

export type AddToDatabaseTreeItemUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAddToDatabaseStatusFieldUpdateOperationsInput | $Enums.AddToDatabaseStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  parent?: Prisma.AddToDatabaseTreeItemUpdateOneWithoutChildrenNestedInput
  children?: Prisma.AddToDatabaseTreeItemUpdateManyWithoutParentNestedInput
  addToDatabase?: Prisma.AddToDatabaseUpdateOneRequiredWithoutTreeItemsNestedInput
}

export type AddToDatabaseTreeItemUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAddToDatabaseStatusFieldUpdateOperationsInput | $Enums.AddToDatabaseStatus
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  addToDatabaseId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  children?: Prisma.AddToDatabaseTreeItemUncheckedUpdateManyWithoutParentNestedInput
}

export type AddToDatabaseTreeItemCreateManyInput = {
  id?: string
  name: string
  status?: $Enums.AddToDatabaseStatus
  parentId?: string | null
  addToDatabaseId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AddToDatabaseTreeItemUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAddToDatabaseStatusFieldUpdateOperationsInput | $Enums.AddToDatabaseStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AddToDatabaseTreeItemUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAddToDatabaseStatusFieldUpdateOperationsInput | $Enums.AddToDatabaseStatus
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  addToDatabaseId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AddToDatabaseTreeItemListRelationFilter = {
  every?: Prisma.AddToDatabaseTreeItemWhereInput
  some?: Prisma.AddToDatabaseTreeItemWhereInput
  none?: Prisma.AddToDatabaseTreeItemWhereInput
}

export type AddToDatabaseTreeItemOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AddToDatabaseTreeItemNullableScalarRelationFilter = {
  is?: Prisma.AddToDatabaseTreeItemWhereInput | null
  isNot?: Prisma.AddToDatabaseTreeItemWhereInput | null
}

export type AddToDatabaseTreeItemOrderByRelevanceInput = {
  fields: Prisma.AddToDatabaseTreeItemOrderByRelevanceFieldEnum | Prisma.AddToDatabaseTreeItemOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type AddToDatabaseTreeItemCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  status?: Prisma.SortOrder
  parentId?: Prisma.SortOrder
  addToDatabaseId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AddToDatabaseTreeItemMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  status?: Prisma.SortOrder
  parentId?: Prisma.SortOrder
  addToDatabaseId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AddToDatabaseTreeItemMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  status?: Prisma.SortOrder
  parentId?: Prisma.SortOrder
  addToDatabaseId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AddToDatabaseTreeItemCreateNestedManyWithoutAddToDatabaseInput = {
  create?: Prisma.XOR<Prisma.AddToDatabaseTreeItemCreateWithoutAddToDatabaseInput, Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutAddToDatabaseInput> | Prisma.AddToDatabaseTreeItemCreateWithoutAddToDatabaseInput[] | Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutAddToDatabaseInput[]
  connectOrCreate?: Prisma.AddToDatabaseTreeItemCreateOrConnectWithoutAddToDatabaseInput | Prisma.AddToDatabaseTreeItemCreateOrConnectWithoutAddToDatabaseInput[]
  createMany?: Prisma.AddToDatabaseTreeItemCreateManyAddToDatabaseInputEnvelope
  connect?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
}

export type AddToDatabaseTreeItemUncheckedCreateNestedManyWithoutAddToDatabaseInput = {
  create?: Prisma.XOR<Prisma.AddToDatabaseTreeItemCreateWithoutAddToDatabaseInput, Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutAddToDatabaseInput> | Prisma.AddToDatabaseTreeItemCreateWithoutAddToDatabaseInput[] | Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutAddToDatabaseInput[]
  connectOrCreate?: Prisma.AddToDatabaseTreeItemCreateOrConnectWithoutAddToDatabaseInput | Prisma.AddToDatabaseTreeItemCreateOrConnectWithoutAddToDatabaseInput[]
  createMany?: Prisma.AddToDatabaseTreeItemCreateManyAddToDatabaseInputEnvelope
  connect?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
}

export type AddToDatabaseTreeItemUpdateManyWithoutAddToDatabaseNestedInput = {
  create?: Prisma.XOR<Prisma.AddToDatabaseTreeItemCreateWithoutAddToDatabaseInput, Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutAddToDatabaseInput> | Prisma.AddToDatabaseTreeItemCreateWithoutAddToDatabaseInput[] | Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutAddToDatabaseInput[]
  connectOrCreate?: Prisma.AddToDatabaseTreeItemCreateOrConnectWithoutAddToDatabaseInput | Prisma.AddToDatabaseTreeItemCreateOrConnectWithoutAddToDatabaseInput[]
  upsert?: Prisma.AddToDatabaseTreeItemUpsertWithWhereUniqueWithoutAddToDatabaseInput | Prisma.AddToDatabaseTreeItemUpsertWithWhereUniqueWithoutAddToDatabaseInput[]
  createMany?: Prisma.AddToDatabaseTreeItemCreateManyAddToDatabaseInputEnvelope
  set?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
  disconnect?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
  delete?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
  connect?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
  update?: Prisma.AddToDatabaseTreeItemUpdateWithWhereUniqueWithoutAddToDatabaseInput | Prisma.AddToDatabaseTreeItemUpdateWithWhereUniqueWithoutAddToDatabaseInput[]
  updateMany?: Prisma.AddToDatabaseTreeItemUpdateManyWithWhereWithoutAddToDatabaseInput | Prisma.AddToDatabaseTreeItemUpdateManyWithWhereWithoutAddToDatabaseInput[]
  deleteMany?: Prisma.AddToDatabaseTreeItemScalarWhereInput | Prisma.AddToDatabaseTreeItemScalarWhereInput[]
}

export type AddToDatabaseTreeItemUncheckedUpdateManyWithoutAddToDatabaseNestedInput = {
  create?: Prisma.XOR<Prisma.AddToDatabaseTreeItemCreateWithoutAddToDatabaseInput, Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutAddToDatabaseInput> | Prisma.AddToDatabaseTreeItemCreateWithoutAddToDatabaseInput[] | Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutAddToDatabaseInput[]
  connectOrCreate?: Prisma.AddToDatabaseTreeItemCreateOrConnectWithoutAddToDatabaseInput | Prisma.AddToDatabaseTreeItemCreateOrConnectWithoutAddToDatabaseInput[]
  upsert?: Prisma.AddToDatabaseTreeItemUpsertWithWhereUniqueWithoutAddToDatabaseInput | Prisma.AddToDatabaseTreeItemUpsertWithWhereUniqueWithoutAddToDatabaseInput[]
  createMany?: Prisma.AddToDatabaseTreeItemCreateManyAddToDatabaseInputEnvelope
  set?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
  disconnect?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
  delete?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
  connect?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
  update?: Prisma.AddToDatabaseTreeItemUpdateWithWhereUniqueWithoutAddToDatabaseInput | Prisma.AddToDatabaseTreeItemUpdateWithWhereUniqueWithoutAddToDatabaseInput[]
  updateMany?: Prisma.AddToDatabaseTreeItemUpdateManyWithWhereWithoutAddToDatabaseInput | Prisma.AddToDatabaseTreeItemUpdateManyWithWhereWithoutAddToDatabaseInput[]
  deleteMany?: Prisma.AddToDatabaseTreeItemScalarWhereInput | Prisma.AddToDatabaseTreeItemScalarWhereInput[]
}

export type AddToDatabaseTreeItemCreateNestedOneWithoutChildrenInput = {
  create?: Prisma.XOR<Prisma.AddToDatabaseTreeItemCreateWithoutChildrenInput, Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutChildrenInput>
  connectOrCreate?: Prisma.AddToDatabaseTreeItemCreateOrConnectWithoutChildrenInput
  connect?: Prisma.AddToDatabaseTreeItemWhereUniqueInput
}

export type AddToDatabaseTreeItemCreateNestedManyWithoutParentInput = {
  create?: Prisma.XOR<Prisma.AddToDatabaseTreeItemCreateWithoutParentInput, Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutParentInput> | Prisma.AddToDatabaseTreeItemCreateWithoutParentInput[] | Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.AddToDatabaseTreeItemCreateOrConnectWithoutParentInput | Prisma.AddToDatabaseTreeItemCreateOrConnectWithoutParentInput[]
  createMany?: Prisma.AddToDatabaseTreeItemCreateManyParentInputEnvelope
  connect?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
}

export type AddToDatabaseTreeItemUncheckedCreateNestedManyWithoutParentInput = {
  create?: Prisma.XOR<Prisma.AddToDatabaseTreeItemCreateWithoutParentInput, Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutParentInput> | Prisma.AddToDatabaseTreeItemCreateWithoutParentInput[] | Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.AddToDatabaseTreeItemCreateOrConnectWithoutParentInput | Prisma.AddToDatabaseTreeItemCreateOrConnectWithoutParentInput[]
  createMany?: Prisma.AddToDatabaseTreeItemCreateManyParentInputEnvelope
  connect?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
}

export type AddToDatabaseTreeItemUpdateOneWithoutChildrenNestedInput = {
  create?: Prisma.XOR<Prisma.AddToDatabaseTreeItemCreateWithoutChildrenInput, Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutChildrenInput>
  connectOrCreate?: Prisma.AddToDatabaseTreeItemCreateOrConnectWithoutChildrenInput
  upsert?: Prisma.AddToDatabaseTreeItemUpsertWithoutChildrenInput
  disconnect?: Prisma.AddToDatabaseTreeItemWhereInput | boolean
  delete?: Prisma.AddToDatabaseTreeItemWhereInput | boolean
  connect?: Prisma.AddToDatabaseTreeItemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AddToDatabaseTreeItemUpdateToOneWithWhereWithoutChildrenInput, Prisma.AddToDatabaseTreeItemUpdateWithoutChildrenInput>, Prisma.AddToDatabaseTreeItemUncheckedUpdateWithoutChildrenInput>
}

export type AddToDatabaseTreeItemUpdateManyWithoutParentNestedInput = {
  create?: Prisma.XOR<Prisma.AddToDatabaseTreeItemCreateWithoutParentInput, Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutParentInput> | Prisma.AddToDatabaseTreeItemCreateWithoutParentInput[] | Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.AddToDatabaseTreeItemCreateOrConnectWithoutParentInput | Prisma.AddToDatabaseTreeItemCreateOrConnectWithoutParentInput[]
  upsert?: Prisma.AddToDatabaseTreeItemUpsertWithWhereUniqueWithoutParentInput | Prisma.AddToDatabaseTreeItemUpsertWithWhereUniqueWithoutParentInput[]
  createMany?: Prisma.AddToDatabaseTreeItemCreateManyParentInputEnvelope
  set?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
  disconnect?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
  delete?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
  connect?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
  update?: Prisma.AddToDatabaseTreeItemUpdateWithWhereUniqueWithoutParentInput | Prisma.AddToDatabaseTreeItemUpdateWithWhereUniqueWithoutParentInput[]
  updateMany?: Prisma.AddToDatabaseTreeItemUpdateManyWithWhereWithoutParentInput | Prisma.AddToDatabaseTreeItemUpdateManyWithWhereWithoutParentInput[]
  deleteMany?: Prisma.AddToDatabaseTreeItemScalarWhereInput | Prisma.AddToDatabaseTreeItemScalarWhereInput[]
}

export type AddToDatabaseTreeItemUncheckedUpdateManyWithoutParentNestedInput = {
  create?: Prisma.XOR<Prisma.AddToDatabaseTreeItemCreateWithoutParentInput, Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutParentInput> | Prisma.AddToDatabaseTreeItemCreateWithoutParentInput[] | Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.AddToDatabaseTreeItemCreateOrConnectWithoutParentInput | Prisma.AddToDatabaseTreeItemCreateOrConnectWithoutParentInput[]
  upsert?: Prisma.AddToDatabaseTreeItemUpsertWithWhereUniqueWithoutParentInput | Prisma.AddToDatabaseTreeItemUpsertWithWhereUniqueWithoutParentInput[]
  createMany?: Prisma.AddToDatabaseTreeItemCreateManyParentInputEnvelope
  set?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
  disconnect?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
  delete?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
  connect?: Prisma.AddToDatabaseTreeItemWhereUniqueInput | Prisma.AddToDatabaseTreeItemWhereUniqueInput[]
  update?: Prisma.AddToDatabaseTreeItemUpdateWithWhereUniqueWithoutParentInput | Prisma.AddToDatabaseTreeItemUpdateWithWhereUniqueWithoutParentInput[]
  updateMany?: Prisma.AddToDatabaseTreeItemUpdateManyWithWhereWithoutParentInput | Prisma.AddToDatabaseTreeItemUpdateManyWithWhereWithoutParentInput[]
  deleteMany?: Prisma.AddToDatabaseTreeItemScalarWhereInput | Prisma.AddToDatabaseTreeItemScalarWhereInput[]
}

export type AddToDatabaseTreeItemCreateWithoutAddToDatabaseInput = {
  id?: string
  name: string
  status?: $Enums.AddToDatabaseStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  parent?: Prisma.AddToDatabaseTreeItemCreateNestedOneWithoutChildrenInput
  children?: Prisma.AddToDatabaseTreeItemCreateNestedManyWithoutParentInput
}

export type AddToDatabaseTreeItemUncheckedCreateWithoutAddToDatabaseInput = {
  id?: string
  name: string
  status?: $Enums.AddToDatabaseStatus
  parentId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  children?: Prisma.AddToDatabaseTreeItemUncheckedCreateNestedManyWithoutParentInput
}

export type AddToDatabaseTreeItemCreateOrConnectWithoutAddToDatabaseInput = {
  where: Prisma.AddToDatabaseTreeItemWhereUniqueInput
  create: Prisma.XOR<Prisma.AddToDatabaseTreeItemCreateWithoutAddToDatabaseInput, Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutAddToDatabaseInput>
}

export type AddToDatabaseTreeItemCreateManyAddToDatabaseInputEnvelope = {
  data: Prisma.AddToDatabaseTreeItemCreateManyAddToDatabaseInput | Prisma.AddToDatabaseTreeItemCreateManyAddToDatabaseInput[]
  skipDuplicates?: boolean
}

export type AddToDatabaseTreeItemUpsertWithWhereUniqueWithoutAddToDatabaseInput = {
  where: Prisma.AddToDatabaseTreeItemWhereUniqueInput
  update: Prisma.XOR<Prisma.AddToDatabaseTreeItemUpdateWithoutAddToDatabaseInput, Prisma.AddToDatabaseTreeItemUncheckedUpdateWithoutAddToDatabaseInput>
  create: Prisma.XOR<Prisma.AddToDatabaseTreeItemCreateWithoutAddToDatabaseInput, Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutAddToDatabaseInput>
}

export type AddToDatabaseTreeItemUpdateWithWhereUniqueWithoutAddToDatabaseInput = {
  where: Prisma.AddToDatabaseTreeItemWhereUniqueInput
  data: Prisma.XOR<Prisma.AddToDatabaseTreeItemUpdateWithoutAddToDatabaseInput, Prisma.AddToDatabaseTreeItemUncheckedUpdateWithoutAddToDatabaseInput>
}

export type AddToDatabaseTreeItemUpdateManyWithWhereWithoutAddToDatabaseInput = {
  where: Prisma.AddToDatabaseTreeItemScalarWhereInput
  data: Prisma.XOR<Prisma.AddToDatabaseTreeItemUpdateManyMutationInput, Prisma.AddToDatabaseTreeItemUncheckedUpdateManyWithoutAddToDatabaseInput>
}

export type AddToDatabaseTreeItemScalarWhereInput = {
  AND?: Prisma.AddToDatabaseTreeItemScalarWhereInput | Prisma.AddToDatabaseTreeItemScalarWhereInput[]
  OR?: Prisma.AddToDatabaseTreeItemScalarWhereInput[]
  NOT?: Prisma.AddToDatabaseTreeItemScalarWhereInput | Prisma.AddToDatabaseTreeItemScalarWhereInput[]
  id?: Prisma.UuidFilter<"AddToDatabaseTreeItem"> | string
  name?: Prisma.StringFilter<"AddToDatabaseTreeItem"> | string
  status?: Prisma.EnumAddToDatabaseStatusFilter<"AddToDatabaseTreeItem"> | $Enums.AddToDatabaseStatus
  parentId?: Prisma.UuidNullableFilter<"AddToDatabaseTreeItem"> | string | null
  addToDatabaseId?: Prisma.UuidFilter<"AddToDatabaseTreeItem"> | string
  createdAt?: Prisma.DateTimeFilter<"AddToDatabaseTreeItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AddToDatabaseTreeItem"> | Date | string
}

export type AddToDatabaseTreeItemCreateWithoutChildrenInput = {
  id?: string
  name: string
  status?: $Enums.AddToDatabaseStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  parent?: Prisma.AddToDatabaseTreeItemCreateNestedOneWithoutChildrenInput
  addToDatabase: Prisma.AddToDatabaseCreateNestedOneWithoutTreeItemsInput
}

export type AddToDatabaseTreeItemUncheckedCreateWithoutChildrenInput = {
  id?: string
  name: string
  status?: $Enums.AddToDatabaseStatus
  parentId?: string | null
  addToDatabaseId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AddToDatabaseTreeItemCreateOrConnectWithoutChildrenInput = {
  where: Prisma.AddToDatabaseTreeItemWhereUniqueInput
  create: Prisma.XOR<Prisma.AddToDatabaseTreeItemCreateWithoutChildrenInput, Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutChildrenInput>
}

export type AddToDatabaseTreeItemCreateWithoutParentInput = {
  id?: string
  name: string
  status?: $Enums.AddToDatabaseStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  children?: Prisma.AddToDatabaseTreeItemCreateNestedManyWithoutParentInput
  addToDatabase: Prisma.AddToDatabaseCreateNestedOneWithoutTreeItemsInput
}

export type AddToDatabaseTreeItemUncheckedCreateWithoutParentInput = {
  id?: string
  name: string
  status?: $Enums.AddToDatabaseStatus
  addToDatabaseId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  children?: Prisma.AddToDatabaseTreeItemUncheckedCreateNestedManyWithoutParentInput
}

export type AddToDatabaseTreeItemCreateOrConnectWithoutParentInput = {
  where: Prisma.AddToDatabaseTreeItemWhereUniqueInput
  create: Prisma.XOR<Prisma.AddToDatabaseTreeItemCreateWithoutParentInput, Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutParentInput>
}

export type AddToDatabaseTreeItemCreateManyParentInputEnvelope = {
  data: Prisma.AddToDatabaseTreeItemCreateManyParentInput | Prisma.AddToDatabaseTreeItemCreateManyParentInput[]
  skipDuplicates?: boolean
}

export type AddToDatabaseTreeItemUpsertWithoutChildrenInput = {
  update: Prisma.XOR<Prisma.AddToDatabaseTreeItemUpdateWithoutChildrenInput, Prisma.AddToDatabaseTreeItemUncheckedUpdateWithoutChildrenInput>
  create: Prisma.XOR<Prisma.AddToDatabaseTreeItemCreateWithoutChildrenInput, Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutChildrenInput>
  where?: Prisma.AddToDatabaseTreeItemWhereInput
}

export type AddToDatabaseTreeItemUpdateToOneWithWhereWithoutChildrenInput = {
  where?: Prisma.AddToDatabaseTreeItemWhereInput
  data: Prisma.XOR<Prisma.AddToDatabaseTreeItemUpdateWithoutChildrenInput, Prisma.AddToDatabaseTreeItemUncheckedUpdateWithoutChildrenInput>
}

export type AddToDatabaseTreeItemUpdateWithoutChildrenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAddToDatabaseStatusFieldUpdateOperationsInput | $Enums.AddToDatabaseStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  parent?: Prisma.AddToDatabaseTreeItemUpdateOneWithoutChildrenNestedInput
  addToDatabase?: Prisma.AddToDatabaseUpdateOneRequiredWithoutTreeItemsNestedInput
}

export type AddToDatabaseTreeItemUncheckedUpdateWithoutChildrenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAddToDatabaseStatusFieldUpdateOperationsInput | $Enums.AddToDatabaseStatus
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  addToDatabaseId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AddToDatabaseTreeItemUpsertWithWhereUniqueWithoutParentInput = {
  where: Prisma.AddToDatabaseTreeItemWhereUniqueInput
  update: Prisma.XOR<Prisma.AddToDatabaseTreeItemUpdateWithoutParentInput, Prisma.AddToDatabaseTreeItemUncheckedUpdateWithoutParentInput>
  create: Prisma.XOR<Prisma.AddToDatabaseTreeItemCreateWithoutParentInput, Prisma.AddToDatabaseTreeItemUncheckedCreateWithoutParentInput>
}

export type AddToDatabaseTreeItemUpdateWithWhereUniqueWithoutParentInput = {
  where: Prisma.AddToDatabaseTreeItemWhereUniqueInput
  data: Prisma.XOR<Prisma.AddToDatabaseTreeItemUpdateWithoutParentInput, Prisma.AddToDatabaseTreeItemUncheckedUpdateWithoutParentInput>
}

export type AddToDatabaseTreeItemUpdateManyWithWhereWithoutParentInput = {
  where: Prisma.AddToDatabaseTreeItemScalarWhereInput
  data: Prisma.XOR<Prisma.AddToDatabaseTreeItemUpdateManyMutationInput, Prisma.AddToDatabaseTreeItemUncheckedUpdateManyWithoutParentInput>
}

export type AddToDatabaseTreeItemCreateManyAddToDatabaseInput = {
  id?: string
  name: string
  status?: $Enums.AddToDatabaseStatus
  parentId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AddToDatabaseTreeItemUpdateWithoutAddToDatabaseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAddToDatabaseStatusFieldUpdateOperationsInput | $Enums.AddToDatabaseStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  parent?: Prisma.AddToDatabaseTreeItemUpdateOneWithoutChildrenNestedInput
  children?: Prisma.AddToDatabaseTreeItemUpdateManyWithoutParentNestedInput
}

export type AddToDatabaseTreeItemUncheckedUpdateWithoutAddToDatabaseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAddToDatabaseStatusFieldUpdateOperationsInput | $Enums.AddToDatabaseStatus
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  children?: Prisma.AddToDatabaseTreeItemUncheckedUpdateManyWithoutParentNestedInput
}

export type AddToDatabaseTreeItemUncheckedUpdateManyWithoutAddToDatabaseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAddToDatabaseStatusFieldUpdateOperationsInput | $Enums.AddToDatabaseStatus
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AddToDatabaseTreeItemCreateManyParentInput = {
  id?: string
  name: string
  status?: $Enums.AddToDatabaseStatus
  addToDatabaseId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AddToDatabaseTreeItemUpdateWithoutParentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAddToDatabaseStatusFieldUpdateOperationsInput | $Enums.AddToDatabaseStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  children?: Prisma.AddToDatabaseTreeItemUpdateManyWithoutParentNestedInput
  addToDatabase?: Prisma.AddToDatabaseUpdateOneRequiredWithoutTreeItemsNestedInput
}

export type AddToDatabaseTreeItemUncheckedUpdateWithoutParentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAddToDatabaseStatusFieldUpdateOperationsInput | $Enums.AddToDatabaseStatus
  addToDatabaseId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  children?: Prisma.AddToDatabaseTreeItemUncheckedUpdateManyWithoutParentNestedInput
}

export type AddToDatabaseTreeItemUncheckedUpdateManyWithoutParentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAddToDatabaseStatusFieldUpdateOperationsInput | $Enums.AddToDatabaseStatus
  addToDatabaseId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type AddToDatabaseTreeItemCountOutputType
 */

export type AddToDatabaseTreeItemCountOutputType = {
  children: number
}

export type AddToDatabaseTreeItemCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  children?: boolean | AddToDatabaseTreeItemCountOutputTypeCountChildrenArgs
}

/**
 * AddToDatabaseTreeItemCountOutputType without action
 */
export type AddToDatabaseTreeItemCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabaseTreeItemCountOutputType
   */
  select?: Prisma.AddToDatabaseTreeItemCountOutputTypeSelect<ExtArgs> | null
}

/**
 * AddToDatabaseTreeItemCountOutputType without action
 */
export type AddToDatabaseTreeItemCountOutputTypeCountChildrenArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AddToDatabaseTreeItemWhereInput
}


export type AddToDatabaseTreeItemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  status?: boolean
  parentId?: boolean
  addToDatabaseId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  parent?: boolean | Prisma.AddToDatabaseTreeItem$parentArgs<ExtArgs>
  children?: boolean | Prisma.AddToDatabaseTreeItem$childrenArgs<ExtArgs>
  addToDatabase?: boolean | Prisma.AddToDatabaseDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.AddToDatabaseTreeItemCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["addToDatabaseTreeItem"]>

export type AddToDatabaseTreeItemSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  status?: boolean
  parentId?: boolean
  addToDatabaseId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  parent?: boolean | Prisma.AddToDatabaseTreeItem$parentArgs<ExtArgs>
  addToDatabase?: boolean | Prisma.AddToDatabaseDefaultArgs<ExtArgs>
}, ExtArgs["result"]["addToDatabaseTreeItem"]>

export type AddToDatabaseTreeItemSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  status?: boolean
  parentId?: boolean
  addToDatabaseId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  parent?: boolean | Prisma.AddToDatabaseTreeItem$parentArgs<ExtArgs>
  addToDatabase?: boolean | Prisma.AddToDatabaseDefaultArgs<ExtArgs>
}, ExtArgs["result"]["addToDatabaseTreeItem"]>

export type AddToDatabaseTreeItemSelectScalar = {
  id?: boolean
  name?: boolean
  status?: boolean
  parentId?: boolean
  addToDatabaseId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AddToDatabaseTreeItemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "status" | "parentId" | "addToDatabaseId" | "createdAt" | "updatedAt", ExtArgs["result"]["addToDatabaseTreeItem"]>
export type AddToDatabaseTreeItemInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  parent?: boolean | Prisma.AddToDatabaseTreeItem$parentArgs<ExtArgs>
  children?: boolean | Prisma.AddToDatabaseTreeItem$childrenArgs<ExtArgs>
  addToDatabase?: boolean | Prisma.AddToDatabaseDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.AddToDatabaseTreeItemCountOutputTypeDefaultArgs<ExtArgs>
}
export type AddToDatabaseTreeItemIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  parent?: boolean | Prisma.AddToDatabaseTreeItem$parentArgs<ExtArgs>
  addToDatabase?: boolean | Prisma.AddToDatabaseDefaultArgs<ExtArgs>
}
export type AddToDatabaseTreeItemIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  parent?: boolean | Prisma.AddToDatabaseTreeItem$parentArgs<ExtArgs>
  addToDatabase?: boolean | Prisma.AddToDatabaseDefaultArgs<ExtArgs>
}

export type $AddToDatabaseTreeItemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AddToDatabaseTreeItem"
  objects: {
    parent: Prisma.$AddToDatabaseTreeItemPayload<ExtArgs> | null
    children: Prisma.$AddToDatabaseTreeItemPayload<ExtArgs>[]
    addToDatabase: Prisma.$AddToDatabasePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    status: $Enums.AddToDatabaseStatus
    parentId: string | null
    addToDatabaseId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["addToDatabaseTreeItem"]>
  composites: {}
}

export type AddToDatabaseTreeItemGetPayload<S extends boolean | null | undefined | AddToDatabaseTreeItemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AddToDatabaseTreeItemPayload, S>

export type AddToDatabaseTreeItemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AddToDatabaseTreeItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: AddToDatabaseTreeItemCountAggregateInputType | true
  }

export interface AddToDatabaseTreeItemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AddToDatabaseTreeItem'], meta: { name: 'AddToDatabaseTreeItem' } }
  /**
   * Find zero or one AddToDatabaseTreeItem that matches the filter.
   * @param {AddToDatabaseTreeItemFindUniqueArgs} args - Arguments to find a AddToDatabaseTreeItem
   * @example
   * // Get one AddToDatabaseTreeItem
   * const addToDatabaseTreeItem = await prisma.addToDatabaseTreeItem.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AddToDatabaseTreeItemFindUniqueArgs>(args: Prisma.SelectSubset<T, AddToDatabaseTreeItemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AddToDatabaseTreeItemClient<runtime.Types.Result.GetResult<Prisma.$AddToDatabaseTreeItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AddToDatabaseTreeItem that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AddToDatabaseTreeItemFindUniqueOrThrowArgs} args - Arguments to find a AddToDatabaseTreeItem
   * @example
   * // Get one AddToDatabaseTreeItem
   * const addToDatabaseTreeItem = await prisma.addToDatabaseTreeItem.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AddToDatabaseTreeItemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AddToDatabaseTreeItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AddToDatabaseTreeItemClient<runtime.Types.Result.GetResult<Prisma.$AddToDatabaseTreeItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AddToDatabaseTreeItem that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddToDatabaseTreeItemFindFirstArgs} args - Arguments to find a AddToDatabaseTreeItem
   * @example
   * // Get one AddToDatabaseTreeItem
   * const addToDatabaseTreeItem = await prisma.addToDatabaseTreeItem.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AddToDatabaseTreeItemFindFirstArgs>(args?: Prisma.SelectSubset<T, AddToDatabaseTreeItemFindFirstArgs<ExtArgs>>): Prisma.Prisma__AddToDatabaseTreeItemClient<runtime.Types.Result.GetResult<Prisma.$AddToDatabaseTreeItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AddToDatabaseTreeItem that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddToDatabaseTreeItemFindFirstOrThrowArgs} args - Arguments to find a AddToDatabaseTreeItem
   * @example
   * // Get one AddToDatabaseTreeItem
   * const addToDatabaseTreeItem = await prisma.addToDatabaseTreeItem.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AddToDatabaseTreeItemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AddToDatabaseTreeItemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AddToDatabaseTreeItemClient<runtime.Types.Result.GetResult<Prisma.$AddToDatabaseTreeItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AddToDatabaseTreeItems that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddToDatabaseTreeItemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AddToDatabaseTreeItems
   * const addToDatabaseTreeItems = await prisma.addToDatabaseTreeItem.findMany()
   * 
   * // Get first 10 AddToDatabaseTreeItems
   * const addToDatabaseTreeItems = await prisma.addToDatabaseTreeItem.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const addToDatabaseTreeItemWithIdOnly = await prisma.addToDatabaseTreeItem.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AddToDatabaseTreeItemFindManyArgs>(args?: Prisma.SelectSubset<T, AddToDatabaseTreeItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AddToDatabaseTreeItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AddToDatabaseTreeItem.
   * @param {AddToDatabaseTreeItemCreateArgs} args - Arguments to create a AddToDatabaseTreeItem.
   * @example
   * // Create one AddToDatabaseTreeItem
   * const AddToDatabaseTreeItem = await prisma.addToDatabaseTreeItem.create({
   *   data: {
   *     // ... data to create a AddToDatabaseTreeItem
   *   }
   * })
   * 
   */
  create<T extends AddToDatabaseTreeItemCreateArgs>(args: Prisma.SelectSubset<T, AddToDatabaseTreeItemCreateArgs<ExtArgs>>): Prisma.Prisma__AddToDatabaseTreeItemClient<runtime.Types.Result.GetResult<Prisma.$AddToDatabaseTreeItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AddToDatabaseTreeItems.
   * @param {AddToDatabaseTreeItemCreateManyArgs} args - Arguments to create many AddToDatabaseTreeItems.
   * @example
   * // Create many AddToDatabaseTreeItems
   * const addToDatabaseTreeItem = await prisma.addToDatabaseTreeItem.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AddToDatabaseTreeItemCreateManyArgs>(args?: Prisma.SelectSubset<T, AddToDatabaseTreeItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AddToDatabaseTreeItems and returns the data saved in the database.
   * @param {AddToDatabaseTreeItemCreateManyAndReturnArgs} args - Arguments to create many AddToDatabaseTreeItems.
   * @example
   * // Create many AddToDatabaseTreeItems
   * const addToDatabaseTreeItem = await prisma.addToDatabaseTreeItem.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AddToDatabaseTreeItems and only return the `id`
   * const addToDatabaseTreeItemWithIdOnly = await prisma.addToDatabaseTreeItem.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AddToDatabaseTreeItemCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AddToDatabaseTreeItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AddToDatabaseTreeItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AddToDatabaseTreeItem.
   * @param {AddToDatabaseTreeItemDeleteArgs} args - Arguments to delete one AddToDatabaseTreeItem.
   * @example
   * // Delete one AddToDatabaseTreeItem
   * const AddToDatabaseTreeItem = await prisma.addToDatabaseTreeItem.delete({
   *   where: {
   *     // ... filter to delete one AddToDatabaseTreeItem
   *   }
   * })
   * 
   */
  delete<T extends AddToDatabaseTreeItemDeleteArgs>(args: Prisma.SelectSubset<T, AddToDatabaseTreeItemDeleteArgs<ExtArgs>>): Prisma.Prisma__AddToDatabaseTreeItemClient<runtime.Types.Result.GetResult<Prisma.$AddToDatabaseTreeItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AddToDatabaseTreeItem.
   * @param {AddToDatabaseTreeItemUpdateArgs} args - Arguments to update one AddToDatabaseTreeItem.
   * @example
   * // Update one AddToDatabaseTreeItem
   * const addToDatabaseTreeItem = await prisma.addToDatabaseTreeItem.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AddToDatabaseTreeItemUpdateArgs>(args: Prisma.SelectSubset<T, AddToDatabaseTreeItemUpdateArgs<ExtArgs>>): Prisma.Prisma__AddToDatabaseTreeItemClient<runtime.Types.Result.GetResult<Prisma.$AddToDatabaseTreeItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AddToDatabaseTreeItems.
   * @param {AddToDatabaseTreeItemDeleteManyArgs} args - Arguments to filter AddToDatabaseTreeItems to delete.
   * @example
   * // Delete a few AddToDatabaseTreeItems
   * const { count } = await prisma.addToDatabaseTreeItem.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AddToDatabaseTreeItemDeleteManyArgs>(args?: Prisma.SelectSubset<T, AddToDatabaseTreeItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AddToDatabaseTreeItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddToDatabaseTreeItemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AddToDatabaseTreeItems
   * const addToDatabaseTreeItem = await prisma.addToDatabaseTreeItem.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AddToDatabaseTreeItemUpdateManyArgs>(args: Prisma.SelectSubset<T, AddToDatabaseTreeItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AddToDatabaseTreeItems and returns the data updated in the database.
   * @param {AddToDatabaseTreeItemUpdateManyAndReturnArgs} args - Arguments to update many AddToDatabaseTreeItems.
   * @example
   * // Update many AddToDatabaseTreeItems
   * const addToDatabaseTreeItem = await prisma.addToDatabaseTreeItem.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AddToDatabaseTreeItems and only return the `id`
   * const addToDatabaseTreeItemWithIdOnly = await prisma.addToDatabaseTreeItem.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AddToDatabaseTreeItemUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AddToDatabaseTreeItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AddToDatabaseTreeItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AddToDatabaseTreeItem.
   * @param {AddToDatabaseTreeItemUpsertArgs} args - Arguments to update or create a AddToDatabaseTreeItem.
   * @example
   * // Update or create a AddToDatabaseTreeItem
   * const addToDatabaseTreeItem = await prisma.addToDatabaseTreeItem.upsert({
   *   create: {
   *     // ... data to create a AddToDatabaseTreeItem
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AddToDatabaseTreeItem we want to update
   *   }
   * })
   */
  upsert<T extends AddToDatabaseTreeItemUpsertArgs>(args: Prisma.SelectSubset<T, AddToDatabaseTreeItemUpsertArgs<ExtArgs>>): Prisma.Prisma__AddToDatabaseTreeItemClient<runtime.Types.Result.GetResult<Prisma.$AddToDatabaseTreeItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AddToDatabaseTreeItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddToDatabaseTreeItemCountArgs} args - Arguments to filter AddToDatabaseTreeItems to count.
   * @example
   * // Count the number of AddToDatabaseTreeItems
   * const count = await prisma.addToDatabaseTreeItem.count({
   *   where: {
   *     // ... the filter for the AddToDatabaseTreeItems we want to count
   *   }
   * })
  **/
  count<T extends AddToDatabaseTreeItemCountArgs>(
    args?: Prisma.Subset<T, AddToDatabaseTreeItemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AddToDatabaseTreeItemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AddToDatabaseTreeItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddToDatabaseTreeItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AddToDatabaseTreeItemAggregateArgs>(args: Prisma.Subset<T, AddToDatabaseTreeItemAggregateArgs>): Prisma.PrismaPromise<GetAddToDatabaseTreeItemAggregateType<T>>

  /**
   * Group by AddToDatabaseTreeItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddToDatabaseTreeItemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AddToDatabaseTreeItemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AddToDatabaseTreeItemGroupByArgs['orderBy'] }
      : { orderBy?: AddToDatabaseTreeItemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AddToDatabaseTreeItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddToDatabaseTreeItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AddToDatabaseTreeItem model
 */
readonly fields: AddToDatabaseTreeItemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AddToDatabaseTreeItem.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AddToDatabaseTreeItemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  parent<T extends Prisma.AddToDatabaseTreeItem$parentArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AddToDatabaseTreeItem$parentArgs<ExtArgs>>): Prisma.Prisma__AddToDatabaseTreeItemClient<runtime.Types.Result.GetResult<Prisma.$AddToDatabaseTreeItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  children<T extends Prisma.AddToDatabaseTreeItem$childrenArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AddToDatabaseTreeItem$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AddToDatabaseTreeItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  addToDatabase<T extends Prisma.AddToDatabaseDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AddToDatabaseDefaultArgs<ExtArgs>>): Prisma.Prisma__AddToDatabaseClient<runtime.Types.Result.GetResult<Prisma.$AddToDatabasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AddToDatabaseTreeItem model
 */
export interface AddToDatabaseTreeItemFieldRefs {
  readonly id: Prisma.FieldRef<"AddToDatabaseTreeItem", 'String'>
  readonly name: Prisma.FieldRef<"AddToDatabaseTreeItem", 'String'>
  readonly status: Prisma.FieldRef<"AddToDatabaseTreeItem", 'AddToDatabaseStatus'>
  readonly parentId: Prisma.FieldRef<"AddToDatabaseTreeItem", 'String'>
  readonly addToDatabaseId: Prisma.FieldRef<"AddToDatabaseTreeItem", 'String'>
  readonly createdAt: Prisma.FieldRef<"AddToDatabaseTreeItem", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"AddToDatabaseTreeItem", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AddToDatabaseTreeItem findUnique
 */
export type AddToDatabaseTreeItemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabaseTreeItem
   */
  select?: Prisma.AddToDatabaseTreeItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabaseTreeItem
   */
  omit?: Prisma.AddToDatabaseTreeItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddToDatabaseTreeItemInclude<ExtArgs> | null
  /**
   * Filter, which AddToDatabaseTreeItem to fetch.
   */
  where: Prisma.AddToDatabaseTreeItemWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AddToDatabaseTreeItem findUniqueOrThrow
 */
export type AddToDatabaseTreeItemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabaseTreeItem
   */
  select?: Prisma.AddToDatabaseTreeItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabaseTreeItem
   */
  omit?: Prisma.AddToDatabaseTreeItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddToDatabaseTreeItemInclude<ExtArgs> | null
  /**
   * Filter, which AddToDatabaseTreeItem to fetch.
   */
  where: Prisma.AddToDatabaseTreeItemWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AddToDatabaseTreeItem findFirst
 */
export type AddToDatabaseTreeItemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabaseTreeItem
   */
  select?: Prisma.AddToDatabaseTreeItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabaseTreeItem
   */
  omit?: Prisma.AddToDatabaseTreeItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddToDatabaseTreeItemInclude<ExtArgs> | null
  /**
   * Filter, which AddToDatabaseTreeItem to fetch.
   */
  where?: Prisma.AddToDatabaseTreeItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AddToDatabaseTreeItems to fetch.
   */
  orderBy?: Prisma.AddToDatabaseTreeItemOrderByWithRelationInput | Prisma.AddToDatabaseTreeItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AddToDatabaseTreeItems.
   */
  cursor?: Prisma.AddToDatabaseTreeItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AddToDatabaseTreeItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AddToDatabaseTreeItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AddToDatabaseTreeItems.
   */
  distinct?: Prisma.AddToDatabaseTreeItemScalarFieldEnum | Prisma.AddToDatabaseTreeItemScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AddToDatabaseTreeItem findFirstOrThrow
 */
export type AddToDatabaseTreeItemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabaseTreeItem
   */
  select?: Prisma.AddToDatabaseTreeItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabaseTreeItem
   */
  omit?: Prisma.AddToDatabaseTreeItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddToDatabaseTreeItemInclude<ExtArgs> | null
  /**
   * Filter, which AddToDatabaseTreeItem to fetch.
   */
  where?: Prisma.AddToDatabaseTreeItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AddToDatabaseTreeItems to fetch.
   */
  orderBy?: Prisma.AddToDatabaseTreeItemOrderByWithRelationInput | Prisma.AddToDatabaseTreeItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AddToDatabaseTreeItems.
   */
  cursor?: Prisma.AddToDatabaseTreeItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AddToDatabaseTreeItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AddToDatabaseTreeItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AddToDatabaseTreeItems.
   */
  distinct?: Prisma.AddToDatabaseTreeItemScalarFieldEnum | Prisma.AddToDatabaseTreeItemScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AddToDatabaseTreeItem findMany
 */
export type AddToDatabaseTreeItemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabaseTreeItem
   */
  select?: Prisma.AddToDatabaseTreeItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabaseTreeItem
   */
  omit?: Prisma.AddToDatabaseTreeItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddToDatabaseTreeItemInclude<ExtArgs> | null
  /**
   * Filter, which AddToDatabaseTreeItems to fetch.
   */
  where?: Prisma.AddToDatabaseTreeItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AddToDatabaseTreeItems to fetch.
   */
  orderBy?: Prisma.AddToDatabaseTreeItemOrderByWithRelationInput | Prisma.AddToDatabaseTreeItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AddToDatabaseTreeItems.
   */
  cursor?: Prisma.AddToDatabaseTreeItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AddToDatabaseTreeItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AddToDatabaseTreeItems.
   */
  skip?: number
  distinct?: Prisma.AddToDatabaseTreeItemScalarFieldEnum | Prisma.AddToDatabaseTreeItemScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AddToDatabaseTreeItem create
 */
export type AddToDatabaseTreeItemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabaseTreeItem
   */
  select?: Prisma.AddToDatabaseTreeItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabaseTreeItem
   */
  omit?: Prisma.AddToDatabaseTreeItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddToDatabaseTreeItemInclude<ExtArgs> | null
  /**
   * The data needed to create a AddToDatabaseTreeItem.
   */
  data: Prisma.XOR<Prisma.AddToDatabaseTreeItemCreateInput, Prisma.AddToDatabaseTreeItemUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AddToDatabaseTreeItem createMany
 */
export type AddToDatabaseTreeItemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AddToDatabaseTreeItems.
   */
  data: Prisma.AddToDatabaseTreeItemCreateManyInput | Prisma.AddToDatabaseTreeItemCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AddToDatabaseTreeItem createManyAndReturn
 */
export type AddToDatabaseTreeItemCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabaseTreeItem
   */
  select?: Prisma.AddToDatabaseTreeItemSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabaseTreeItem
   */
  omit?: Prisma.AddToDatabaseTreeItemOmit<ExtArgs> | null
  /**
   * The data used to create many AddToDatabaseTreeItems.
   */
  data: Prisma.AddToDatabaseTreeItemCreateManyInput | Prisma.AddToDatabaseTreeItemCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddToDatabaseTreeItemIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AddToDatabaseTreeItem update
 */
export type AddToDatabaseTreeItemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabaseTreeItem
   */
  select?: Prisma.AddToDatabaseTreeItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabaseTreeItem
   */
  omit?: Prisma.AddToDatabaseTreeItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddToDatabaseTreeItemInclude<ExtArgs> | null
  /**
   * The data needed to update a AddToDatabaseTreeItem.
   */
  data: Prisma.XOR<Prisma.AddToDatabaseTreeItemUpdateInput, Prisma.AddToDatabaseTreeItemUncheckedUpdateInput>
  /**
   * Choose, which AddToDatabaseTreeItem to update.
   */
  where: Prisma.AddToDatabaseTreeItemWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AddToDatabaseTreeItem updateMany
 */
export type AddToDatabaseTreeItemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AddToDatabaseTreeItems.
   */
  data: Prisma.XOR<Prisma.AddToDatabaseTreeItemUpdateManyMutationInput, Prisma.AddToDatabaseTreeItemUncheckedUpdateManyInput>
  /**
   * Filter which AddToDatabaseTreeItems to update
   */
  where?: Prisma.AddToDatabaseTreeItemWhereInput
  /**
   * Limit how many AddToDatabaseTreeItems to update.
   */
  limit?: number
}

/**
 * AddToDatabaseTreeItem updateManyAndReturn
 */
export type AddToDatabaseTreeItemUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabaseTreeItem
   */
  select?: Prisma.AddToDatabaseTreeItemSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabaseTreeItem
   */
  omit?: Prisma.AddToDatabaseTreeItemOmit<ExtArgs> | null
  /**
   * The data used to update AddToDatabaseTreeItems.
   */
  data: Prisma.XOR<Prisma.AddToDatabaseTreeItemUpdateManyMutationInput, Prisma.AddToDatabaseTreeItemUncheckedUpdateManyInput>
  /**
   * Filter which AddToDatabaseTreeItems to update
   */
  where?: Prisma.AddToDatabaseTreeItemWhereInput
  /**
   * Limit how many AddToDatabaseTreeItems to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddToDatabaseTreeItemIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AddToDatabaseTreeItem upsert
 */
export type AddToDatabaseTreeItemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabaseTreeItem
   */
  select?: Prisma.AddToDatabaseTreeItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabaseTreeItem
   */
  omit?: Prisma.AddToDatabaseTreeItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddToDatabaseTreeItemInclude<ExtArgs> | null
  /**
   * The filter to search for the AddToDatabaseTreeItem to update in case it exists.
   */
  where: Prisma.AddToDatabaseTreeItemWhereUniqueInput
  /**
   * In case the AddToDatabaseTreeItem found by the `where` argument doesn't exist, create a new AddToDatabaseTreeItem with this data.
   */
  create: Prisma.XOR<Prisma.AddToDatabaseTreeItemCreateInput, Prisma.AddToDatabaseTreeItemUncheckedCreateInput>
  /**
   * In case the AddToDatabaseTreeItem was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AddToDatabaseTreeItemUpdateInput, Prisma.AddToDatabaseTreeItemUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AddToDatabaseTreeItem delete
 */
export type AddToDatabaseTreeItemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabaseTreeItem
   */
  select?: Prisma.AddToDatabaseTreeItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabaseTreeItem
   */
  omit?: Prisma.AddToDatabaseTreeItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddToDatabaseTreeItemInclude<ExtArgs> | null
  /**
   * Filter which AddToDatabaseTreeItem to delete.
   */
  where: Prisma.AddToDatabaseTreeItemWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AddToDatabaseTreeItem deleteMany
 */
export type AddToDatabaseTreeItemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AddToDatabaseTreeItems to delete
   */
  where?: Prisma.AddToDatabaseTreeItemWhereInput
  /**
   * Limit how many AddToDatabaseTreeItems to delete.
   */
  limit?: number
}

/**
 * AddToDatabaseTreeItem.parent
 */
export type AddToDatabaseTreeItem$parentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabaseTreeItem
   */
  select?: Prisma.AddToDatabaseTreeItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabaseTreeItem
   */
  omit?: Prisma.AddToDatabaseTreeItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddToDatabaseTreeItemInclude<ExtArgs> | null
  where?: Prisma.AddToDatabaseTreeItemWhereInput
}

/**
 * AddToDatabaseTreeItem.children
 */
export type AddToDatabaseTreeItem$childrenArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabaseTreeItem
   */
  select?: Prisma.AddToDatabaseTreeItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabaseTreeItem
   */
  omit?: Prisma.AddToDatabaseTreeItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddToDatabaseTreeItemInclude<ExtArgs> | null
  where?: Prisma.AddToDatabaseTreeItemWhereInput
  orderBy?: Prisma.AddToDatabaseTreeItemOrderByWithRelationInput | Prisma.AddToDatabaseTreeItemOrderByWithRelationInput[]
  cursor?: Prisma.AddToDatabaseTreeItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AddToDatabaseTreeItemScalarFieldEnum | Prisma.AddToDatabaseTreeItemScalarFieldEnum[]
}

/**
 * AddToDatabaseTreeItem without action
 */
export type AddToDatabaseTreeItemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabaseTreeItem
   */
  select?: Prisma.AddToDatabaseTreeItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabaseTreeItem
   */
  omit?: Prisma.AddToDatabaseTreeItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AddToDatabaseTreeItemInclude<ExtArgs> | null
}
