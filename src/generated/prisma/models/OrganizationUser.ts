
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `OrganizationUser` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model OrganizationUser
 * 
 */
export type OrganizationUserModel = runtime.Types.Result.DefaultSelection<Prisma.$OrganizationUserPayload>

export type AggregateOrganizationUser = {
  _count: OrganizationUserCountAggregateOutputType | null
  _min: OrganizationUserMinAggregateOutputType | null
  _max: OrganizationUserMaxAggregateOutputType | null
}

export type OrganizationUserMinAggregateOutputType = {
  id: string | null
  userId: string | null
  superiorId: string | null
  title: string | null
}

export type OrganizationUserMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  superiorId: string | null
  title: string | null
}

export type OrganizationUserCountAggregateOutputType = {
  id: number
  userId: number
  superiorId: number
  title: number
  _all: number
}


export type OrganizationUserMinAggregateInputType = {
  id?: true
  userId?: true
  superiorId?: true
  title?: true
}

export type OrganizationUserMaxAggregateInputType = {
  id?: true
  userId?: true
  superiorId?: true
  title?: true
}

export type OrganizationUserCountAggregateInputType = {
  id?: true
  userId?: true
  superiorId?: true
  title?: true
  _all?: true
}

export type OrganizationUserAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OrganizationUser to aggregate.
   */
  where?: Prisma.OrganizationUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrganizationUsers to fetch.
   */
  orderBy?: Prisma.OrganizationUserOrderByWithRelationInput | Prisma.OrganizationUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OrganizationUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrganizationUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrganizationUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned OrganizationUsers
  **/
  _count?: true | OrganizationUserCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OrganizationUserMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OrganizationUserMaxAggregateInputType
}

export type GetOrganizationUserAggregateType<T extends OrganizationUserAggregateArgs> = {
      [P in keyof T & keyof AggregateOrganizationUser]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOrganizationUser[P]>
    : Prisma.GetScalarType<T[P], AggregateOrganizationUser[P]>
}




export type OrganizationUserGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrganizationUserWhereInput
  orderBy?: Prisma.OrganizationUserOrderByWithAggregationInput | Prisma.OrganizationUserOrderByWithAggregationInput[]
  by: Prisma.OrganizationUserScalarFieldEnum[] | Prisma.OrganizationUserScalarFieldEnum
  having?: Prisma.OrganizationUserScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OrganizationUserCountAggregateInputType | true
  _min?: OrganizationUserMinAggregateInputType
  _max?: OrganizationUserMaxAggregateInputType
}

export type OrganizationUserGroupByOutputType = {
  id: string
  userId: string
  superiorId: string | null
  title: string
  _count: OrganizationUserCountAggregateOutputType | null
  _min: OrganizationUserMinAggregateOutputType | null
  _max: OrganizationUserMaxAggregateOutputType | null
}

type GetOrganizationUserGroupByPayload<T extends OrganizationUserGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OrganizationUserGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OrganizationUserGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OrganizationUserGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OrganizationUserGroupByOutputType[P]>
      }
    >
  >



export type OrganizationUserWhereInput = {
  AND?: Prisma.OrganizationUserWhereInput | Prisma.OrganizationUserWhereInput[]
  OR?: Prisma.OrganizationUserWhereInput[]
  NOT?: Prisma.OrganizationUserWhereInput | Prisma.OrganizationUserWhereInput[]
  id?: Prisma.UuidFilter<"OrganizationUser"> | string
  userId?: Prisma.UuidFilter<"OrganizationUser"> | string
  superiorId?: Prisma.UuidNullableFilter<"OrganizationUser"> | string | null
  title?: Prisma.StringFilter<"OrganizationUser"> | string
  superior?: Prisma.XOR<Prisma.OrganizationUserNullableScalarRelationFilter, Prisma.OrganizationUserWhereInput> | null
  subordinates?: Prisma.OrganizationUserListRelationFilter
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type OrganizationUserOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  superiorId?: Prisma.SortOrderInput | Prisma.SortOrder
  title?: Prisma.SortOrder
  superior?: Prisma.OrganizationUserOrderByWithRelationInput
  subordinates?: Prisma.OrganizationUserOrderByRelationAggregateInput
  user?: Prisma.UserOrderByWithRelationInput
  _relevance?: Prisma.OrganizationUserOrderByRelevanceInput
}

export type OrganizationUserWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId?: string
  AND?: Prisma.OrganizationUserWhereInput | Prisma.OrganizationUserWhereInput[]
  OR?: Prisma.OrganizationUserWhereInput[]
  NOT?: Prisma.OrganizationUserWhereInput | Prisma.OrganizationUserWhereInput[]
  superiorId?: Prisma.UuidNullableFilter<"OrganizationUser"> | string | null
  title?: Prisma.StringFilter<"OrganizationUser"> | string
  superior?: Prisma.XOR<Prisma.OrganizationUserNullableScalarRelationFilter, Prisma.OrganizationUserWhereInput> | null
  subordinates?: Prisma.OrganizationUserListRelationFilter
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "userId">

export type OrganizationUserOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  superiorId?: Prisma.SortOrderInput | Prisma.SortOrder
  title?: Prisma.SortOrder
  _count?: Prisma.OrganizationUserCountOrderByAggregateInput
  _max?: Prisma.OrganizationUserMaxOrderByAggregateInput
  _min?: Prisma.OrganizationUserMinOrderByAggregateInput
}

export type OrganizationUserScalarWhereWithAggregatesInput = {
  AND?: Prisma.OrganizationUserScalarWhereWithAggregatesInput | Prisma.OrganizationUserScalarWhereWithAggregatesInput[]
  OR?: Prisma.OrganizationUserScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OrganizationUserScalarWhereWithAggregatesInput | Prisma.OrganizationUserScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"OrganizationUser"> | string
  userId?: Prisma.UuidWithAggregatesFilter<"OrganizationUser"> | string
  superiorId?: Prisma.UuidNullableWithAggregatesFilter<"OrganizationUser"> | string | null
  title?: Prisma.StringWithAggregatesFilter<"OrganizationUser"> | string
}

export type OrganizationUserCreateInput = {
  id?: string
  title: string
  superior?: Prisma.OrganizationUserCreateNestedOneWithoutSubordinatesInput
  subordinates?: Prisma.OrganizationUserCreateNestedManyWithoutSuperiorInput
  user: Prisma.UserCreateNestedOneWithoutOrganizationInput
}

export type OrganizationUserUncheckedCreateInput = {
  id?: string
  userId: string
  superiorId?: string | null
  title: string
  subordinates?: Prisma.OrganizationUserUncheckedCreateNestedManyWithoutSuperiorInput
}

export type OrganizationUserUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  superior?: Prisma.OrganizationUserUpdateOneWithoutSubordinatesNestedInput
  subordinates?: Prisma.OrganizationUserUpdateManyWithoutSuperiorNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutOrganizationNestedInput
}

export type OrganizationUserUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  superiorId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  subordinates?: Prisma.OrganizationUserUncheckedUpdateManyWithoutSuperiorNestedInput
}

export type OrganizationUserCreateManyInput = {
  id?: string
  userId: string
  superiorId?: string | null
  title: string
}

export type OrganizationUserUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OrganizationUserUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  superiorId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OrganizationUserNullableScalarRelationFilter = {
  is?: Prisma.OrganizationUserWhereInput | null
  isNot?: Prisma.OrganizationUserWhereInput | null
}

export type OrganizationUserListRelationFilter = {
  every?: Prisma.OrganizationUserWhereInput
  some?: Prisma.OrganizationUserWhereInput
  none?: Prisma.OrganizationUserWhereInput
}

export type OrganizationUserOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type OrganizationUserOrderByRelevanceInput = {
  fields: Prisma.OrganizationUserOrderByRelevanceFieldEnum | Prisma.OrganizationUserOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type OrganizationUserCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  superiorId?: Prisma.SortOrder
  title?: Prisma.SortOrder
}

export type OrganizationUserMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  superiorId?: Prisma.SortOrder
  title?: Prisma.SortOrder
}

export type OrganizationUserMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  superiorId?: Prisma.SortOrder
  title?: Prisma.SortOrder
}

export type OrganizationUserCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.OrganizationUserCreateWithoutUserInput, Prisma.OrganizationUserUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.OrganizationUserCreateOrConnectWithoutUserInput
  connect?: Prisma.OrganizationUserWhereUniqueInput
}

export type OrganizationUserUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.OrganizationUserCreateWithoutUserInput, Prisma.OrganizationUserUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.OrganizationUserCreateOrConnectWithoutUserInput
  connect?: Prisma.OrganizationUserWhereUniqueInput
}

export type OrganizationUserUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.OrganizationUserCreateWithoutUserInput, Prisma.OrganizationUserUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.OrganizationUserCreateOrConnectWithoutUserInput
  upsert?: Prisma.OrganizationUserUpsertWithoutUserInput
  disconnect?: Prisma.OrganizationUserWhereInput | boolean
  delete?: Prisma.OrganizationUserWhereInput | boolean
  connect?: Prisma.OrganizationUserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.OrganizationUserUpdateToOneWithWhereWithoutUserInput, Prisma.OrganizationUserUpdateWithoutUserInput>, Prisma.OrganizationUserUncheckedUpdateWithoutUserInput>
}

export type OrganizationUserUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.OrganizationUserCreateWithoutUserInput, Prisma.OrganizationUserUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.OrganizationUserCreateOrConnectWithoutUserInput
  upsert?: Prisma.OrganizationUserUpsertWithoutUserInput
  disconnect?: Prisma.OrganizationUserWhereInput | boolean
  delete?: Prisma.OrganizationUserWhereInput | boolean
  connect?: Prisma.OrganizationUserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.OrganizationUserUpdateToOneWithWhereWithoutUserInput, Prisma.OrganizationUserUpdateWithoutUserInput>, Prisma.OrganizationUserUncheckedUpdateWithoutUserInput>
}

export type OrganizationUserCreateNestedOneWithoutSubordinatesInput = {
  create?: Prisma.XOR<Prisma.OrganizationUserCreateWithoutSubordinatesInput, Prisma.OrganizationUserUncheckedCreateWithoutSubordinatesInput>
  connectOrCreate?: Prisma.OrganizationUserCreateOrConnectWithoutSubordinatesInput
  connect?: Prisma.OrganizationUserWhereUniqueInput
}

export type OrganizationUserCreateNestedManyWithoutSuperiorInput = {
  create?: Prisma.XOR<Prisma.OrganizationUserCreateWithoutSuperiorInput, Prisma.OrganizationUserUncheckedCreateWithoutSuperiorInput> | Prisma.OrganizationUserCreateWithoutSuperiorInput[] | Prisma.OrganizationUserUncheckedCreateWithoutSuperiorInput[]
  connectOrCreate?: Prisma.OrganizationUserCreateOrConnectWithoutSuperiorInput | Prisma.OrganizationUserCreateOrConnectWithoutSuperiorInput[]
  createMany?: Prisma.OrganizationUserCreateManySuperiorInputEnvelope
  connect?: Prisma.OrganizationUserWhereUniqueInput | Prisma.OrganizationUserWhereUniqueInput[]
}

export type OrganizationUserUncheckedCreateNestedManyWithoutSuperiorInput = {
  create?: Prisma.XOR<Prisma.OrganizationUserCreateWithoutSuperiorInput, Prisma.OrganizationUserUncheckedCreateWithoutSuperiorInput> | Prisma.OrganizationUserCreateWithoutSuperiorInput[] | Prisma.OrganizationUserUncheckedCreateWithoutSuperiorInput[]
  connectOrCreate?: Prisma.OrganizationUserCreateOrConnectWithoutSuperiorInput | Prisma.OrganizationUserCreateOrConnectWithoutSuperiorInput[]
  createMany?: Prisma.OrganizationUserCreateManySuperiorInputEnvelope
  connect?: Prisma.OrganizationUserWhereUniqueInput | Prisma.OrganizationUserWhereUniqueInput[]
}

export type OrganizationUserUpdateOneWithoutSubordinatesNestedInput = {
  create?: Prisma.XOR<Prisma.OrganizationUserCreateWithoutSubordinatesInput, Prisma.OrganizationUserUncheckedCreateWithoutSubordinatesInput>
  connectOrCreate?: Prisma.OrganizationUserCreateOrConnectWithoutSubordinatesInput
  upsert?: Prisma.OrganizationUserUpsertWithoutSubordinatesInput
  disconnect?: Prisma.OrganizationUserWhereInput | boolean
  delete?: Prisma.OrganizationUserWhereInput | boolean
  connect?: Prisma.OrganizationUserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.OrganizationUserUpdateToOneWithWhereWithoutSubordinatesInput, Prisma.OrganizationUserUpdateWithoutSubordinatesInput>, Prisma.OrganizationUserUncheckedUpdateWithoutSubordinatesInput>
}

export type OrganizationUserUpdateManyWithoutSuperiorNestedInput = {
  create?: Prisma.XOR<Prisma.OrganizationUserCreateWithoutSuperiorInput, Prisma.OrganizationUserUncheckedCreateWithoutSuperiorInput> | Prisma.OrganizationUserCreateWithoutSuperiorInput[] | Prisma.OrganizationUserUncheckedCreateWithoutSuperiorInput[]
  connectOrCreate?: Prisma.OrganizationUserCreateOrConnectWithoutSuperiorInput | Prisma.OrganizationUserCreateOrConnectWithoutSuperiorInput[]
  upsert?: Prisma.OrganizationUserUpsertWithWhereUniqueWithoutSuperiorInput | Prisma.OrganizationUserUpsertWithWhereUniqueWithoutSuperiorInput[]
  createMany?: Prisma.OrganizationUserCreateManySuperiorInputEnvelope
  set?: Prisma.OrganizationUserWhereUniqueInput | Prisma.OrganizationUserWhereUniqueInput[]
  disconnect?: Prisma.OrganizationUserWhereUniqueInput | Prisma.OrganizationUserWhereUniqueInput[]
  delete?: Prisma.OrganizationUserWhereUniqueInput | Prisma.OrganizationUserWhereUniqueInput[]
  connect?: Prisma.OrganizationUserWhereUniqueInput | Prisma.OrganizationUserWhereUniqueInput[]
  update?: Prisma.OrganizationUserUpdateWithWhereUniqueWithoutSuperiorInput | Prisma.OrganizationUserUpdateWithWhereUniqueWithoutSuperiorInput[]
  updateMany?: Prisma.OrganizationUserUpdateManyWithWhereWithoutSuperiorInput | Prisma.OrganizationUserUpdateManyWithWhereWithoutSuperiorInput[]
  deleteMany?: Prisma.OrganizationUserScalarWhereInput | Prisma.OrganizationUserScalarWhereInput[]
}

export type OrganizationUserUncheckedUpdateManyWithoutSuperiorNestedInput = {
  create?: Prisma.XOR<Prisma.OrganizationUserCreateWithoutSuperiorInput, Prisma.OrganizationUserUncheckedCreateWithoutSuperiorInput> | Prisma.OrganizationUserCreateWithoutSuperiorInput[] | Prisma.OrganizationUserUncheckedCreateWithoutSuperiorInput[]
  connectOrCreate?: Prisma.OrganizationUserCreateOrConnectWithoutSuperiorInput | Prisma.OrganizationUserCreateOrConnectWithoutSuperiorInput[]
  upsert?: Prisma.OrganizationUserUpsertWithWhereUniqueWithoutSuperiorInput | Prisma.OrganizationUserUpsertWithWhereUniqueWithoutSuperiorInput[]
  createMany?: Prisma.OrganizationUserCreateManySuperiorInputEnvelope
  set?: Prisma.OrganizationUserWhereUniqueInput | Prisma.OrganizationUserWhereUniqueInput[]
  disconnect?: Prisma.OrganizationUserWhereUniqueInput | Prisma.OrganizationUserWhereUniqueInput[]
  delete?: Prisma.OrganizationUserWhereUniqueInput | Prisma.OrganizationUserWhereUniqueInput[]
  connect?: Prisma.OrganizationUserWhereUniqueInput | Prisma.OrganizationUserWhereUniqueInput[]
  update?: Prisma.OrganizationUserUpdateWithWhereUniqueWithoutSuperiorInput | Prisma.OrganizationUserUpdateWithWhereUniqueWithoutSuperiorInput[]
  updateMany?: Prisma.OrganizationUserUpdateManyWithWhereWithoutSuperiorInput | Prisma.OrganizationUserUpdateManyWithWhereWithoutSuperiorInput[]
  deleteMany?: Prisma.OrganizationUserScalarWhereInput | Prisma.OrganizationUserScalarWhereInput[]
}

export type OrganizationUserCreateWithoutUserInput = {
  id?: string
  title: string
  superior?: Prisma.OrganizationUserCreateNestedOneWithoutSubordinatesInput
  subordinates?: Prisma.OrganizationUserCreateNestedManyWithoutSuperiorInput
}

export type OrganizationUserUncheckedCreateWithoutUserInput = {
  id?: string
  superiorId?: string | null
  title: string
  subordinates?: Prisma.OrganizationUserUncheckedCreateNestedManyWithoutSuperiorInput
}

export type OrganizationUserCreateOrConnectWithoutUserInput = {
  where: Prisma.OrganizationUserWhereUniqueInput
  create: Prisma.XOR<Prisma.OrganizationUserCreateWithoutUserInput, Prisma.OrganizationUserUncheckedCreateWithoutUserInput>
}

export type OrganizationUserUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.OrganizationUserUpdateWithoutUserInput, Prisma.OrganizationUserUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.OrganizationUserCreateWithoutUserInput, Prisma.OrganizationUserUncheckedCreateWithoutUserInput>
  where?: Prisma.OrganizationUserWhereInput
}

export type OrganizationUserUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.OrganizationUserWhereInput
  data: Prisma.XOR<Prisma.OrganizationUserUpdateWithoutUserInput, Prisma.OrganizationUserUncheckedUpdateWithoutUserInput>
}

export type OrganizationUserUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  superior?: Prisma.OrganizationUserUpdateOneWithoutSubordinatesNestedInput
  subordinates?: Prisma.OrganizationUserUpdateManyWithoutSuperiorNestedInput
}

export type OrganizationUserUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  superiorId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  subordinates?: Prisma.OrganizationUserUncheckedUpdateManyWithoutSuperiorNestedInput
}

export type OrganizationUserCreateWithoutSubordinatesInput = {
  id?: string
  title: string
  superior?: Prisma.OrganizationUserCreateNestedOneWithoutSubordinatesInput
  user: Prisma.UserCreateNestedOneWithoutOrganizationInput
}

export type OrganizationUserUncheckedCreateWithoutSubordinatesInput = {
  id?: string
  userId: string
  superiorId?: string | null
  title: string
}

export type OrganizationUserCreateOrConnectWithoutSubordinatesInput = {
  where: Prisma.OrganizationUserWhereUniqueInput
  create: Prisma.XOR<Prisma.OrganizationUserCreateWithoutSubordinatesInput, Prisma.OrganizationUserUncheckedCreateWithoutSubordinatesInput>
}

export type OrganizationUserCreateWithoutSuperiorInput = {
  id?: string
  title: string
  subordinates?: Prisma.OrganizationUserCreateNestedManyWithoutSuperiorInput
  user: Prisma.UserCreateNestedOneWithoutOrganizationInput
}

export type OrganizationUserUncheckedCreateWithoutSuperiorInput = {
  id?: string
  userId: string
  title: string
  subordinates?: Prisma.OrganizationUserUncheckedCreateNestedManyWithoutSuperiorInput
}

export type OrganizationUserCreateOrConnectWithoutSuperiorInput = {
  where: Prisma.OrganizationUserWhereUniqueInput
  create: Prisma.XOR<Prisma.OrganizationUserCreateWithoutSuperiorInput, Prisma.OrganizationUserUncheckedCreateWithoutSuperiorInput>
}

export type OrganizationUserCreateManySuperiorInputEnvelope = {
  data: Prisma.OrganizationUserCreateManySuperiorInput | Prisma.OrganizationUserCreateManySuperiorInput[]
  skipDuplicates?: boolean
}

export type OrganizationUserUpsertWithoutSubordinatesInput = {
  update: Prisma.XOR<Prisma.OrganizationUserUpdateWithoutSubordinatesInput, Prisma.OrganizationUserUncheckedUpdateWithoutSubordinatesInput>
  create: Prisma.XOR<Prisma.OrganizationUserCreateWithoutSubordinatesInput, Prisma.OrganizationUserUncheckedCreateWithoutSubordinatesInput>
  where?: Prisma.OrganizationUserWhereInput
}

export type OrganizationUserUpdateToOneWithWhereWithoutSubordinatesInput = {
  where?: Prisma.OrganizationUserWhereInput
  data: Prisma.XOR<Prisma.OrganizationUserUpdateWithoutSubordinatesInput, Prisma.OrganizationUserUncheckedUpdateWithoutSubordinatesInput>
}

export type OrganizationUserUpdateWithoutSubordinatesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  superior?: Prisma.OrganizationUserUpdateOneWithoutSubordinatesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutOrganizationNestedInput
}

export type OrganizationUserUncheckedUpdateWithoutSubordinatesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  superiorId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OrganizationUserUpsertWithWhereUniqueWithoutSuperiorInput = {
  where: Prisma.OrganizationUserWhereUniqueInput
  update: Prisma.XOR<Prisma.OrganizationUserUpdateWithoutSuperiorInput, Prisma.OrganizationUserUncheckedUpdateWithoutSuperiorInput>
  create: Prisma.XOR<Prisma.OrganizationUserCreateWithoutSuperiorInput, Prisma.OrganizationUserUncheckedCreateWithoutSuperiorInput>
}

export type OrganizationUserUpdateWithWhereUniqueWithoutSuperiorInput = {
  where: Prisma.OrganizationUserWhereUniqueInput
  data: Prisma.XOR<Prisma.OrganizationUserUpdateWithoutSuperiorInput, Prisma.OrganizationUserUncheckedUpdateWithoutSuperiorInput>
}

export type OrganizationUserUpdateManyWithWhereWithoutSuperiorInput = {
  where: Prisma.OrganizationUserScalarWhereInput
  data: Prisma.XOR<Prisma.OrganizationUserUpdateManyMutationInput, Prisma.OrganizationUserUncheckedUpdateManyWithoutSuperiorInput>
}

export type OrganizationUserScalarWhereInput = {
  AND?: Prisma.OrganizationUserScalarWhereInput | Prisma.OrganizationUserScalarWhereInput[]
  OR?: Prisma.OrganizationUserScalarWhereInput[]
  NOT?: Prisma.OrganizationUserScalarWhereInput | Prisma.OrganizationUserScalarWhereInput[]
  id?: Prisma.UuidFilter<"OrganizationUser"> | string
  userId?: Prisma.UuidFilter<"OrganizationUser"> | string
  superiorId?: Prisma.UuidNullableFilter<"OrganizationUser"> | string | null
  title?: Prisma.StringFilter<"OrganizationUser"> | string
}

export type OrganizationUserCreateManySuperiorInput = {
  id?: string
  userId: string
  title: string
}

export type OrganizationUserUpdateWithoutSuperiorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  subordinates?: Prisma.OrganizationUserUpdateManyWithoutSuperiorNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutOrganizationNestedInput
}

export type OrganizationUserUncheckedUpdateWithoutSuperiorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  subordinates?: Prisma.OrganizationUserUncheckedUpdateManyWithoutSuperiorNestedInput
}

export type OrganizationUserUncheckedUpdateManyWithoutSuperiorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type OrganizationUserCountOutputType
 */

export type OrganizationUserCountOutputType = {
  subordinates: number
}

export type OrganizationUserCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  subordinates?: boolean | OrganizationUserCountOutputTypeCountSubordinatesArgs
}

/**
 * OrganizationUserCountOutputType without action
 */
export type OrganizationUserCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrganizationUserCountOutputType
   */
  select?: Prisma.OrganizationUserCountOutputTypeSelect<ExtArgs> | null
}

/**
 * OrganizationUserCountOutputType without action
 */
export type OrganizationUserCountOutputTypeCountSubordinatesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrganizationUserWhereInput
}


export type OrganizationUserSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  superiorId?: boolean
  title?: boolean
  superior?: boolean | Prisma.OrganizationUser$superiorArgs<ExtArgs>
  subordinates?: boolean | Prisma.OrganizationUser$subordinatesArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.OrganizationUserCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["organizationUser"]>

export type OrganizationUserSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  superiorId?: boolean
  title?: boolean
  superior?: boolean | Prisma.OrganizationUser$superiorArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["organizationUser"]>

export type OrganizationUserSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  superiorId?: boolean
  title?: boolean
  superior?: boolean | Prisma.OrganizationUser$superiorArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["organizationUser"]>

export type OrganizationUserSelectScalar = {
  id?: boolean
  userId?: boolean
  superiorId?: boolean
  title?: boolean
}

export type OrganizationUserOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "superiorId" | "title", ExtArgs["result"]["organizationUser"]>
export type OrganizationUserInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  superior?: boolean | Prisma.OrganizationUser$superiorArgs<ExtArgs>
  subordinates?: boolean | Prisma.OrganizationUser$subordinatesArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.OrganizationUserCountOutputTypeDefaultArgs<ExtArgs>
}
export type OrganizationUserIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  superior?: boolean | Prisma.OrganizationUser$superiorArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type OrganizationUserIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  superior?: boolean | Prisma.OrganizationUser$superiorArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $OrganizationUserPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "OrganizationUser"
  objects: {
    superior: Prisma.$OrganizationUserPayload<ExtArgs> | null
    subordinates: Prisma.$OrganizationUserPayload<ExtArgs>[]
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    superiorId: string | null
    title: string
  }, ExtArgs["result"]["organizationUser"]>
  composites: {}
}

export type OrganizationUserGetPayload<S extends boolean | null | undefined | OrganizationUserDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OrganizationUserPayload, S>

export type OrganizationUserCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OrganizationUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: OrganizationUserCountAggregateInputType | true
  }

export interface OrganizationUserDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrganizationUser'], meta: { name: 'OrganizationUser' } }
  /**
   * Find zero or one OrganizationUser that matches the filter.
   * @param {OrganizationUserFindUniqueArgs} args - Arguments to find a OrganizationUser
   * @example
   * // Get one OrganizationUser
   * const organizationUser = await prisma.organizationUser.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OrganizationUserFindUniqueArgs>(args: Prisma.SelectSubset<T, OrganizationUserFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OrganizationUserClient<runtime.Types.Result.GetResult<Prisma.$OrganizationUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one OrganizationUser that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OrganizationUserFindUniqueOrThrowArgs} args - Arguments to find a OrganizationUser
   * @example
   * // Get one OrganizationUser
   * const organizationUser = await prisma.organizationUser.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OrganizationUserFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OrganizationUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrganizationUserClient<runtime.Types.Result.GetResult<Prisma.$OrganizationUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OrganizationUser that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationUserFindFirstArgs} args - Arguments to find a OrganizationUser
   * @example
   * // Get one OrganizationUser
   * const organizationUser = await prisma.organizationUser.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OrganizationUserFindFirstArgs>(args?: Prisma.SelectSubset<T, OrganizationUserFindFirstArgs<ExtArgs>>): Prisma.Prisma__OrganizationUserClient<runtime.Types.Result.GetResult<Prisma.$OrganizationUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OrganizationUser that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationUserFindFirstOrThrowArgs} args - Arguments to find a OrganizationUser
   * @example
   * // Get one OrganizationUser
   * const organizationUser = await prisma.organizationUser.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OrganizationUserFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OrganizationUserFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrganizationUserClient<runtime.Types.Result.GetResult<Prisma.$OrganizationUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more OrganizationUsers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationUserFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all OrganizationUsers
   * const organizationUsers = await prisma.organizationUser.findMany()
   * 
   * // Get first 10 OrganizationUsers
   * const organizationUsers = await prisma.organizationUser.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const organizationUserWithIdOnly = await prisma.organizationUser.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OrganizationUserFindManyArgs>(args?: Prisma.SelectSubset<T, OrganizationUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrganizationUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a OrganizationUser.
   * @param {OrganizationUserCreateArgs} args - Arguments to create a OrganizationUser.
   * @example
   * // Create one OrganizationUser
   * const OrganizationUser = await prisma.organizationUser.create({
   *   data: {
   *     // ... data to create a OrganizationUser
   *   }
   * })
   * 
   */
  create<T extends OrganizationUserCreateArgs>(args: Prisma.SelectSubset<T, OrganizationUserCreateArgs<ExtArgs>>): Prisma.Prisma__OrganizationUserClient<runtime.Types.Result.GetResult<Prisma.$OrganizationUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many OrganizationUsers.
   * @param {OrganizationUserCreateManyArgs} args - Arguments to create many OrganizationUsers.
   * @example
   * // Create many OrganizationUsers
   * const organizationUser = await prisma.organizationUser.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OrganizationUserCreateManyArgs>(args?: Prisma.SelectSubset<T, OrganizationUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many OrganizationUsers and returns the data saved in the database.
   * @param {OrganizationUserCreateManyAndReturnArgs} args - Arguments to create many OrganizationUsers.
   * @example
   * // Create many OrganizationUsers
   * const organizationUser = await prisma.organizationUser.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many OrganizationUsers and only return the `id`
   * const organizationUserWithIdOnly = await prisma.organizationUser.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends OrganizationUserCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, OrganizationUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrganizationUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a OrganizationUser.
   * @param {OrganizationUserDeleteArgs} args - Arguments to delete one OrganizationUser.
   * @example
   * // Delete one OrganizationUser
   * const OrganizationUser = await prisma.organizationUser.delete({
   *   where: {
   *     // ... filter to delete one OrganizationUser
   *   }
   * })
   * 
   */
  delete<T extends OrganizationUserDeleteArgs>(args: Prisma.SelectSubset<T, OrganizationUserDeleteArgs<ExtArgs>>): Prisma.Prisma__OrganizationUserClient<runtime.Types.Result.GetResult<Prisma.$OrganizationUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one OrganizationUser.
   * @param {OrganizationUserUpdateArgs} args - Arguments to update one OrganizationUser.
   * @example
   * // Update one OrganizationUser
   * const organizationUser = await prisma.organizationUser.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OrganizationUserUpdateArgs>(args: Prisma.SelectSubset<T, OrganizationUserUpdateArgs<ExtArgs>>): Prisma.Prisma__OrganizationUserClient<runtime.Types.Result.GetResult<Prisma.$OrganizationUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more OrganizationUsers.
   * @param {OrganizationUserDeleteManyArgs} args - Arguments to filter OrganizationUsers to delete.
   * @example
   * // Delete a few OrganizationUsers
   * const { count } = await prisma.organizationUser.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OrganizationUserDeleteManyArgs>(args?: Prisma.SelectSubset<T, OrganizationUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OrganizationUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationUserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many OrganizationUsers
   * const organizationUser = await prisma.organizationUser.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OrganizationUserUpdateManyArgs>(args: Prisma.SelectSubset<T, OrganizationUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OrganizationUsers and returns the data updated in the database.
   * @param {OrganizationUserUpdateManyAndReturnArgs} args - Arguments to update many OrganizationUsers.
   * @example
   * // Update many OrganizationUsers
   * const organizationUser = await prisma.organizationUser.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more OrganizationUsers and only return the `id`
   * const organizationUserWithIdOnly = await prisma.organizationUser.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends OrganizationUserUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, OrganizationUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrganizationUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one OrganizationUser.
   * @param {OrganizationUserUpsertArgs} args - Arguments to update or create a OrganizationUser.
   * @example
   * // Update or create a OrganizationUser
   * const organizationUser = await prisma.organizationUser.upsert({
   *   create: {
   *     // ... data to create a OrganizationUser
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the OrganizationUser we want to update
   *   }
   * })
   */
  upsert<T extends OrganizationUserUpsertArgs>(args: Prisma.SelectSubset<T, OrganizationUserUpsertArgs<ExtArgs>>): Prisma.Prisma__OrganizationUserClient<runtime.Types.Result.GetResult<Prisma.$OrganizationUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of OrganizationUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationUserCountArgs} args - Arguments to filter OrganizationUsers to count.
   * @example
   * // Count the number of OrganizationUsers
   * const count = await prisma.organizationUser.count({
   *   where: {
   *     // ... the filter for the OrganizationUsers we want to count
   *   }
   * })
  **/
  count<T extends OrganizationUserCountArgs>(
    args?: Prisma.Subset<T, OrganizationUserCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OrganizationUserCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a OrganizationUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OrganizationUserAggregateArgs>(args: Prisma.Subset<T, OrganizationUserAggregateArgs>): Prisma.PrismaPromise<GetOrganizationUserAggregateType<T>>

  /**
   * Group by OrganizationUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationUserGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OrganizationUserGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OrganizationUserGroupByArgs['orderBy'] }
      : { orderBy?: OrganizationUserGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OrganizationUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the OrganizationUser model
 */
readonly fields: OrganizationUserFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for OrganizationUser.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OrganizationUserClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  superior<T extends Prisma.OrganizationUser$superiorArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationUser$superiorArgs<ExtArgs>>): Prisma.Prisma__OrganizationUserClient<runtime.Types.Result.GetResult<Prisma.$OrganizationUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  subordinates<T extends Prisma.OrganizationUser$subordinatesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationUser$subordinatesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrganizationUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the OrganizationUser model
 */
export interface OrganizationUserFieldRefs {
  readonly id: Prisma.FieldRef<"OrganizationUser", 'String'>
  readonly userId: Prisma.FieldRef<"OrganizationUser", 'String'>
  readonly superiorId: Prisma.FieldRef<"OrganizationUser", 'String'>
  readonly title: Prisma.FieldRef<"OrganizationUser", 'String'>
}
    

// Custom InputTypes
/**
 * OrganizationUser findUnique
 */
export type OrganizationUserFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrganizationUser
   */
  select?: Prisma.OrganizationUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrganizationUser
   */
  omit?: Prisma.OrganizationUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationUserInclude<ExtArgs> | null
  /**
   * Filter, which OrganizationUser to fetch.
   */
  where: Prisma.OrganizationUserWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * OrganizationUser findUniqueOrThrow
 */
export type OrganizationUserFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrganizationUser
   */
  select?: Prisma.OrganizationUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrganizationUser
   */
  omit?: Prisma.OrganizationUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationUserInclude<ExtArgs> | null
  /**
   * Filter, which OrganizationUser to fetch.
   */
  where: Prisma.OrganizationUserWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * OrganizationUser findFirst
 */
export type OrganizationUserFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrganizationUser
   */
  select?: Prisma.OrganizationUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrganizationUser
   */
  omit?: Prisma.OrganizationUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationUserInclude<ExtArgs> | null
  /**
   * Filter, which OrganizationUser to fetch.
   */
  where?: Prisma.OrganizationUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrganizationUsers to fetch.
   */
  orderBy?: Prisma.OrganizationUserOrderByWithRelationInput | Prisma.OrganizationUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OrganizationUsers.
   */
  cursor?: Prisma.OrganizationUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrganizationUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrganizationUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OrganizationUsers.
   */
  distinct?: Prisma.OrganizationUserScalarFieldEnum | Prisma.OrganizationUserScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * OrganizationUser findFirstOrThrow
 */
export type OrganizationUserFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrganizationUser
   */
  select?: Prisma.OrganizationUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrganizationUser
   */
  omit?: Prisma.OrganizationUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationUserInclude<ExtArgs> | null
  /**
   * Filter, which OrganizationUser to fetch.
   */
  where?: Prisma.OrganizationUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrganizationUsers to fetch.
   */
  orderBy?: Prisma.OrganizationUserOrderByWithRelationInput | Prisma.OrganizationUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OrganizationUsers.
   */
  cursor?: Prisma.OrganizationUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrganizationUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrganizationUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OrganizationUsers.
   */
  distinct?: Prisma.OrganizationUserScalarFieldEnum | Prisma.OrganizationUserScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * OrganizationUser findMany
 */
export type OrganizationUserFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrganizationUser
   */
  select?: Prisma.OrganizationUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrganizationUser
   */
  omit?: Prisma.OrganizationUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationUserInclude<ExtArgs> | null
  /**
   * Filter, which OrganizationUsers to fetch.
   */
  where?: Prisma.OrganizationUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrganizationUsers to fetch.
   */
  orderBy?: Prisma.OrganizationUserOrderByWithRelationInput | Prisma.OrganizationUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing OrganizationUsers.
   */
  cursor?: Prisma.OrganizationUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrganizationUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrganizationUsers.
   */
  skip?: number
  distinct?: Prisma.OrganizationUserScalarFieldEnum | Prisma.OrganizationUserScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * OrganizationUser create
 */
export type OrganizationUserCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrganizationUser
   */
  select?: Prisma.OrganizationUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrganizationUser
   */
  omit?: Prisma.OrganizationUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationUserInclude<ExtArgs> | null
  /**
   * The data needed to create a OrganizationUser.
   */
  data: Prisma.XOR<Prisma.OrganizationUserCreateInput, Prisma.OrganizationUserUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * OrganizationUser createMany
 */
export type OrganizationUserCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many OrganizationUsers.
   */
  data: Prisma.OrganizationUserCreateManyInput | Prisma.OrganizationUserCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * OrganizationUser createManyAndReturn
 */
export type OrganizationUserCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrganizationUser
   */
  select?: Prisma.OrganizationUserSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OrganizationUser
   */
  omit?: Prisma.OrganizationUserOmit<ExtArgs> | null
  /**
   * The data used to create many OrganizationUsers.
   */
  data: Prisma.OrganizationUserCreateManyInput | Prisma.OrganizationUserCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationUserIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * OrganizationUser update
 */
export type OrganizationUserUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrganizationUser
   */
  select?: Prisma.OrganizationUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrganizationUser
   */
  omit?: Prisma.OrganizationUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationUserInclude<ExtArgs> | null
  /**
   * The data needed to update a OrganizationUser.
   */
  data: Prisma.XOR<Prisma.OrganizationUserUpdateInput, Prisma.OrganizationUserUncheckedUpdateInput>
  /**
   * Choose, which OrganizationUser to update.
   */
  where: Prisma.OrganizationUserWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * OrganizationUser updateMany
 */
export type OrganizationUserUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update OrganizationUsers.
   */
  data: Prisma.XOR<Prisma.OrganizationUserUpdateManyMutationInput, Prisma.OrganizationUserUncheckedUpdateManyInput>
  /**
   * Filter which OrganizationUsers to update
   */
  where?: Prisma.OrganizationUserWhereInput
  /**
   * Limit how many OrganizationUsers to update.
   */
  limit?: number
}

/**
 * OrganizationUser updateManyAndReturn
 */
export type OrganizationUserUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrganizationUser
   */
  select?: Prisma.OrganizationUserSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OrganizationUser
   */
  omit?: Prisma.OrganizationUserOmit<ExtArgs> | null
  /**
   * The data used to update OrganizationUsers.
   */
  data: Prisma.XOR<Prisma.OrganizationUserUpdateManyMutationInput, Prisma.OrganizationUserUncheckedUpdateManyInput>
  /**
   * Filter which OrganizationUsers to update
   */
  where?: Prisma.OrganizationUserWhereInput
  /**
   * Limit how many OrganizationUsers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationUserIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * OrganizationUser upsert
 */
export type OrganizationUserUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrganizationUser
   */
  select?: Prisma.OrganizationUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrganizationUser
   */
  omit?: Prisma.OrganizationUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationUserInclude<ExtArgs> | null
  /**
   * The filter to search for the OrganizationUser to update in case it exists.
   */
  where: Prisma.OrganizationUserWhereUniqueInput
  /**
   * In case the OrganizationUser found by the `where` argument doesn't exist, create a new OrganizationUser with this data.
   */
  create: Prisma.XOR<Prisma.OrganizationUserCreateInput, Prisma.OrganizationUserUncheckedCreateInput>
  /**
   * In case the OrganizationUser was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OrganizationUserUpdateInput, Prisma.OrganizationUserUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * OrganizationUser delete
 */
export type OrganizationUserDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrganizationUser
   */
  select?: Prisma.OrganizationUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrganizationUser
   */
  omit?: Prisma.OrganizationUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationUserInclude<ExtArgs> | null
  /**
   * Filter which OrganizationUser to delete.
   */
  where: Prisma.OrganizationUserWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * OrganizationUser deleteMany
 */
export type OrganizationUserDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OrganizationUsers to delete
   */
  where?: Prisma.OrganizationUserWhereInput
  /**
   * Limit how many OrganizationUsers to delete.
   */
  limit?: number
}

/**
 * OrganizationUser.superior
 */
export type OrganizationUser$superiorArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrganizationUser
   */
  select?: Prisma.OrganizationUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrganizationUser
   */
  omit?: Prisma.OrganizationUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationUserInclude<ExtArgs> | null
  where?: Prisma.OrganizationUserWhereInput
}

/**
 * OrganizationUser.subordinates
 */
export type OrganizationUser$subordinatesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrganizationUser
   */
  select?: Prisma.OrganizationUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrganizationUser
   */
  omit?: Prisma.OrganizationUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationUserInclude<ExtArgs> | null
  where?: Prisma.OrganizationUserWhereInput
  orderBy?: Prisma.OrganizationUserOrderByWithRelationInput | Prisma.OrganizationUserOrderByWithRelationInput[]
  cursor?: Prisma.OrganizationUserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.OrganizationUserScalarFieldEnum | Prisma.OrganizationUserScalarFieldEnum[]
}

/**
 * OrganizationUser without action
 */
export type OrganizationUserDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrganizationUser
   */
  select?: Prisma.OrganizationUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrganizationUser
   */
  omit?: Prisma.OrganizationUserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationUserInclude<ExtArgs> | null
}
