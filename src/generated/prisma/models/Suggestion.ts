
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Suggestion` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Suggestion
 * 
 */
export type SuggestionModel = runtime.Types.Result.DefaultSelection<Prisma.$SuggestionPayload>

export type AggregateSuggestion = {
  _count: SuggestionCountAggregateOutputType | null
  _min: SuggestionMinAggregateOutputType | null
  _max: SuggestionMaxAggregateOutputType | null
}

export type SuggestionMinAggregateOutputType = {
  id: string | null
  documentId: string | null
  documentCreatedAt: Date | null
  originalText: string | null
  suggestedText: string | null
  description: string | null
  isResolved: boolean | null
  userId: string | null
  createdAt: Date | null
}

export type SuggestionMaxAggregateOutputType = {
  id: string | null
  documentId: string | null
  documentCreatedAt: Date | null
  originalText: string | null
  suggestedText: string | null
  description: string | null
  isResolved: boolean | null
  userId: string | null
  createdAt: Date | null
}

export type SuggestionCountAggregateOutputType = {
  id: number
  documentId: number
  documentCreatedAt: number
  originalText: number
  suggestedText: number
  description: number
  isResolved: number
  userId: number
  createdAt: number
  _all: number
}


export type SuggestionMinAggregateInputType = {
  id?: true
  documentId?: true
  documentCreatedAt?: true
  originalText?: true
  suggestedText?: true
  description?: true
  isResolved?: true
  userId?: true
  createdAt?: true
}

export type SuggestionMaxAggregateInputType = {
  id?: true
  documentId?: true
  documentCreatedAt?: true
  originalText?: true
  suggestedText?: true
  description?: true
  isResolved?: true
  userId?: true
  createdAt?: true
}

export type SuggestionCountAggregateInputType = {
  id?: true
  documentId?: true
  documentCreatedAt?: true
  originalText?: true
  suggestedText?: true
  description?: true
  isResolved?: true
  userId?: true
  createdAt?: true
  _all?: true
}

export type SuggestionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Suggestion to aggregate.
   */
  where?: Prisma.SuggestionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Suggestions to fetch.
   */
  orderBy?: Prisma.SuggestionOrderByWithRelationInput | Prisma.SuggestionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SuggestionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Suggestions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Suggestions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Suggestions
  **/
  _count?: true | SuggestionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SuggestionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SuggestionMaxAggregateInputType
}

export type GetSuggestionAggregateType<T extends SuggestionAggregateArgs> = {
      [P in keyof T & keyof AggregateSuggestion]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSuggestion[P]>
    : Prisma.GetScalarType<T[P], AggregateSuggestion[P]>
}




export type SuggestionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SuggestionWhereInput
  orderBy?: Prisma.SuggestionOrderByWithAggregationInput | Prisma.SuggestionOrderByWithAggregationInput[]
  by: Prisma.SuggestionScalarFieldEnum[] | Prisma.SuggestionScalarFieldEnum
  having?: Prisma.SuggestionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SuggestionCountAggregateInputType | true
  _min?: SuggestionMinAggregateInputType
  _max?: SuggestionMaxAggregateInputType
}

export type SuggestionGroupByOutputType = {
  id: string
  documentId: string
  documentCreatedAt: Date
  originalText: string
  suggestedText: string
  description: string | null
  isResolved: boolean
  userId: string
  createdAt: Date
  _count: SuggestionCountAggregateOutputType | null
  _min: SuggestionMinAggregateOutputType | null
  _max: SuggestionMaxAggregateOutputType | null
}

type GetSuggestionGroupByPayload<T extends SuggestionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SuggestionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SuggestionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SuggestionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SuggestionGroupByOutputType[P]>
      }
    >
  >



export type SuggestionWhereInput = {
  AND?: Prisma.SuggestionWhereInput | Prisma.SuggestionWhereInput[]
  OR?: Prisma.SuggestionWhereInput[]
  NOT?: Prisma.SuggestionWhereInput | Prisma.SuggestionWhereInput[]
  id?: Prisma.UuidFilter<"Suggestion"> | string
  documentId?: Prisma.UuidFilter<"Suggestion"> | string
  documentCreatedAt?: Prisma.DateTimeFilter<"Suggestion"> | Date | string
  originalText?: Prisma.StringFilter<"Suggestion"> | string
  suggestedText?: Prisma.StringFilter<"Suggestion"> | string
  description?: Prisma.StringNullableFilter<"Suggestion"> | string | null
  isResolved?: Prisma.BoolFilter<"Suggestion"> | boolean
  userId?: Prisma.UuidFilter<"Suggestion"> | string
  createdAt?: Prisma.DateTimeFilter<"Suggestion"> | Date | string
  document?: Prisma.XOR<Prisma.DocumentScalarRelationFilter, Prisma.DocumentWhereInput>
}

export type SuggestionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  documentCreatedAt?: Prisma.SortOrder
  originalText?: Prisma.SortOrder
  suggestedText?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  isResolved?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  document?: Prisma.DocumentOrderByWithRelationInput
  _relevance?: Prisma.SuggestionOrderByRelevanceInput
}

export type SuggestionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.SuggestionWhereInput | Prisma.SuggestionWhereInput[]
  OR?: Prisma.SuggestionWhereInput[]
  NOT?: Prisma.SuggestionWhereInput | Prisma.SuggestionWhereInput[]
  documentId?: Prisma.UuidFilter<"Suggestion"> | string
  documentCreatedAt?: Prisma.DateTimeFilter<"Suggestion"> | Date | string
  originalText?: Prisma.StringFilter<"Suggestion"> | string
  suggestedText?: Prisma.StringFilter<"Suggestion"> | string
  description?: Prisma.StringNullableFilter<"Suggestion"> | string | null
  isResolved?: Prisma.BoolFilter<"Suggestion"> | boolean
  userId?: Prisma.UuidFilter<"Suggestion"> | string
  createdAt?: Prisma.DateTimeFilter<"Suggestion"> | Date | string
  document?: Prisma.XOR<Prisma.DocumentScalarRelationFilter, Prisma.DocumentWhereInput>
}, "id">

export type SuggestionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  documentCreatedAt?: Prisma.SortOrder
  originalText?: Prisma.SortOrder
  suggestedText?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  isResolved?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.SuggestionCountOrderByAggregateInput
  _max?: Prisma.SuggestionMaxOrderByAggregateInput
  _min?: Prisma.SuggestionMinOrderByAggregateInput
}

export type SuggestionScalarWhereWithAggregatesInput = {
  AND?: Prisma.SuggestionScalarWhereWithAggregatesInput | Prisma.SuggestionScalarWhereWithAggregatesInput[]
  OR?: Prisma.SuggestionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SuggestionScalarWhereWithAggregatesInput | Prisma.SuggestionScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Suggestion"> | string
  documentId?: Prisma.UuidWithAggregatesFilter<"Suggestion"> | string
  documentCreatedAt?: Prisma.DateTimeWithAggregatesFilter<"Suggestion"> | Date | string
  originalText?: Prisma.StringWithAggregatesFilter<"Suggestion"> | string
  suggestedText?: Prisma.StringWithAggregatesFilter<"Suggestion"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Suggestion"> | string | null
  isResolved?: Prisma.BoolWithAggregatesFilter<"Suggestion"> | boolean
  userId?: Prisma.UuidWithAggregatesFilter<"Suggestion"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Suggestion"> | Date | string
}

export type SuggestionCreateInput = {
  id?: string
  originalText: string
  suggestedText: string
  description?: string | null
  isResolved?: boolean
  userId: string
  createdAt?: Date | string
  document: Prisma.DocumentCreateNestedOneWithoutSuggestionsInput
}

export type SuggestionUncheckedCreateInput = {
  id?: string
  documentId: string
  documentCreatedAt: Date | string
  originalText: string
  suggestedText: string
  description?: string | null
  isResolved?: boolean
  userId: string
  createdAt?: Date | string
}

export type SuggestionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  originalText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestedText?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResolved?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  document?: Prisma.DocumentUpdateOneRequiredWithoutSuggestionsNestedInput
}

export type SuggestionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentId?: Prisma.StringFieldUpdateOperationsInput | string
  documentCreatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  originalText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestedText?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResolved?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SuggestionCreateManyInput = {
  id?: string
  documentId: string
  documentCreatedAt: Date | string
  originalText: string
  suggestedText: string
  description?: string | null
  isResolved?: boolean
  userId: string
  createdAt?: Date | string
}

export type SuggestionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  originalText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestedText?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResolved?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SuggestionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentId?: Prisma.StringFieldUpdateOperationsInput | string
  documentCreatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  originalText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestedText?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResolved?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SuggestionListRelationFilter = {
  every?: Prisma.SuggestionWhereInput
  some?: Prisma.SuggestionWhereInput
  none?: Prisma.SuggestionWhereInput
}

export type SuggestionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type SuggestionOrderByRelevanceInput = {
  fields: Prisma.SuggestionOrderByRelevanceFieldEnum | Prisma.SuggestionOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type SuggestionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  documentCreatedAt?: Prisma.SortOrder
  originalText?: Prisma.SortOrder
  suggestedText?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isResolved?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SuggestionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  documentCreatedAt?: Prisma.SortOrder
  originalText?: Prisma.SortOrder
  suggestedText?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isResolved?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SuggestionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  documentCreatedAt?: Prisma.SortOrder
  originalText?: Prisma.SortOrder
  suggestedText?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isResolved?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SuggestionCreateNestedManyWithoutDocumentInput = {
  create?: Prisma.XOR<Prisma.SuggestionCreateWithoutDocumentInput, Prisma.SuggestionUncheckedCreateWithoutDocumentInput> | Prisma.SuggestionCreateWithoutDocumentInput[] | Prisma.SuggestionUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.SuggestionCreateOrConnectWithoutDocumentInput | Prisma.SuggestionCreateOrConnectWithoutDocumentInput[]
  createMany?: Prisma.SuggestionCreateManyDocumentInputEnvelope
  connect?: Prisma.SuggestionWhereUniqueInput | Prisma.SuggestionWhereUniqueInput[]
}

export type SuggestionUncheckedCreateNestedManyWithoutDocumentInput = {
  create?: Prisma.XOR<Prisma.SuggestionCreateWithoutDocumentInput, Prisma.SuggestionUncheckedCreateWithoutDocumentInput> | Prisma.SuggestionCreateWithoutDocumentInput[] | Prisma.SuggestionUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.SuggestionCreateOrConnectWithoutDocumentInput | Prisma.SuggestionCreateOrConnectWithoutDocumentInput[]
  createMany?: Prisma.SuggestionCreateManyDocumentInputEnvelope
  connect?: Prisma.SuggestionWhereUniqueInput | Prisma.SuggestionWhereUniqueInput[]
}

export type SuggestionUpdateManyWithoutDocumentNestedInput = {
  create?: Prisma.XOR<Prisma.SuggestionCreateWithoutDocumentInput, Prisma.SuggestionUncheckedCreateWithoutDocumentInput> | Prisma.SuggestionCreateWithoutDocumentInput[] | Prisma.SuggestionUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.SuggestionCreateOrConnectWithoutDocumentInput | Prisma.SuggestionCreateOrConnectWithoutDocumentInput[]
  upsert?: Prisma.SuggestionUpsertWithWhereUniqueWithoutDocumentInput | Prisma.SuggestionUpsertWithWhereUniqueWithoutDocumentInput[]
  createMany?: Prisma.SuggestionCreateManyDocumentInputEnvelope
  set?: Prisma.SuggestionWhereUniqueInput | Prisma.SuggestionWhereUniqueInput[]
  disconnect?: Prisma.SuggestionWhereUniqueInput | Prisma.SuggestionWhereUniqueInput[]
  delete?: Prisma.SuggestionWhereUniqueInput | Prisma.SuggestionWhereUniqueInput[]
  connect?: Prisma.SuggestionWhereUniqueInput | Prisma.SuggestionWhereUniqueInput[]
  update?: Prisma.SuggestionUpdateWithWhereUniqueWithoutDocumentInput | Prisma.SuggestionUpdateWithWhereUniqueWithoutDocumentInput[]
  updateMany?: Prisma.SuggestionUpdateManyWithWhereWithoutDocumentInput | Prisma.SuggestionUpdateManyWithWhereWithoutDocumentInput[]
  deleteMany?: Prisma.SuggestionScalarWhereInput | Prisma.SuggestionScalarWhereInput[]
}

export type SuggestionUncheckedUpdateManyWithoutDocumentNestedInput = {
  create?: Prisma.XOR<Prisma.SuggestionCreateWithoutDocumentInput, Prisma.SuggestionUncheckedCreateWithoutDocumentInput> | Prisma.SuggestionCreateWithoutDocumentInput[] | Prisma.SuggestionUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.SuggestionCreateOrConnectWithoutDocumentInput | Prisma.SuggestionCreateOrConnectWithoutDocumentInput[]
  upsert?: Prisma.SuggestionUpsertWithWhereUniqueWithoutDocumentInput | Prisma.SuggestionUpsertWithWhereUniqueWithoutDocumentInput[]
  createMany?: Prisma.SuggestionCreateManyDocumentInputEnvelope
  set?: Prisma.SuggestionWhereUniqueInput | Prisma.SuggestionWhereUniqueInput[]
  disconnect?: Prisma.SuggestionWhereUniqueInput | Prisma.SuggestionWhereUniqueInput[]
  delete?: Prisma.SuggestionWhereUniqueInput | Prisma.SuggestionWhereUniqueInput[]
  connect?: Prisma.SuggestionWhereUniqueInput | Prisma.SuggestionWhereUniqueInput[]
  update?: Prisma.SuggestionUpdateWithWhereUniqueWithoutDocumentInput | Prisma.SuggestionUpdateWithWhereUniqueWithoutDocumentInput[]
  updateMany?: Prisma.SuggestionUpdateManyWithWhereWithoutDocumentInput | Prisma.SuggestionUpdateManyWithWhereWithoutDocumentInput[]
  deleteMany?: Prisma.SuggestionScalarWhereInput | Prisma.SuggestionScalarWhereInput[]
}

export type SuggestionCreateWithoutDocumentInput = {
  id?: string
  originalText: string
  suggestedText: string
  description?: string | null
  isResolved?: boolean
  userId: string
  createdAt?: Date | string
}

export type SuggestionUncheckedCreateWithoutDocumentInput = {
  id?: string
  originalText: string
  suggestedText: string
  description?: string | null
  isResolved?: boolean
  userId: string
  createdAt?: Date | string
}

export type SuggestionCreateOrConnectWithoutDocumentInput = {
  where: Prisma.SuggestionWhereUniqueInput
  create: Prisma.XOR<Prisma.SuggestionCreateWithoutDocumentInput, Prisma.SuggestionUncheckedCreateWithoutDocumentInput>
}

export type SuggestionCreateManyDocumentInputEnvelope = {
  data: Prisma.SuggestionCreateManyDocumentInput | Prisma.SuggestionCreateManyDocumentInput[]
  skipDuplicates?: boolean
}

export type SuggestionUpsertWithWhereUniqueWithoutDocumentInput = {
  where: Prisma.SuggestionWhereUniqueInput
  update: Prisma.XOR<Prisma.SuggestionUpdateWithoutDocumentInput, Prisma.SuggestionUncheckedUpdateWithoutDocumentInput>
  create: Prisma.XOR<Prisma.SuggestionCreateWithoutDocumentInput, Prisma.SuggestionUncheckedCreateWithoutDocumentInput>
}

export type SuggestionUpdateWithWhereUniqueWithoutDocumentInput = {
  where: Prisma.SuggestionWhereUniqueInput
  data: Prisma.XOR<Prisma.SuggestionUpdateWithoutDocumentInput, Prisma.SuggestionUncheckedUpdateWithoutDocumentInput>
}

export type SuggestionUpdateManyWithWhereWithoutDocumentInput = {
  where: Prisma.SuggestionScalarWhereInput
  data: Prisma.XOR<Prisma.SuggestionUpdateManyMutationInput, Prisma.SuggestionUncheckedUpdateManyWithoutDocumentInput>
}

export type SuggestionScalarWhereInput = {
  AND?: Prisma.SuggestionScalarWhereInput | Prisma.SuggestionScalarWhereInput[]
  OR?: Prisma.SuggestionScalarWhereInput[]
  NOT?: Prisma.SuggestionScalarWhereInput | Prisma.SuggestionScalarWhereInput[]
  id?: Prisma.UuidFilter<"Suggestion"> | string
  documentId?: Prisma.UuidFilter<"Suggestion"> | string
  documentCreatedAt?: Prisma.DateTimeFilter<"Suggestion"> | Date | string
  originalText?: Prisma.StringFilter<"Suggestion"> | string
  suggestedText?: Prisma.StringFilter<"Suggestion"> | string
  description?: Prisma.StringNullableFilter<"Suggestion"> | string | null
  isResolved?: Prisma.BoolFilter<"Suggestion"> | boolean
  userId?: Prisma.UuidFilter<"Suggestion"> | string
  createdAt?: Prisma.DateTimeFilter<"Suggestion"> | Date | string
}

export type SuggestionCreateManyDocumentInput = {
  id?: string
  originalText: string
  suggestedText: string
  description?: string | null
  isResolved?: boolean
  userId: string
  createdAt?: Date | string
}

export type SuggestionUpdateWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  originalText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestedText?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResolved?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SuggestionUncheckedUpdateWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  originalText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestedText?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResolved?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SuggestionUncheckedUpdateManyWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  originalText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestedText?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isResolved?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type SuggestionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentId?: boolean
  documentCreatedAt?: boolean
  originalText?: boolean
  suggestedText?: boolean
  description?: boolean
  isResolved?: boolean
  userId?: boolean
  createdAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["suggestion"]>

export type SuggestionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentId?: boolean
  documentCreatedAt?: boolean
  originalText?: boolean
  suggestedText?: boolean
  description?: boolean
  isResolved?: boolean
  userId?: boolean
  createdAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["suggestion"]>

export type SuggestionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentId?: boolean
  documentCreatedAt?: boolean
  originalText?: boolean
  suggestedText?: boolean
  description?: boolean
  isResolved?: boolean
  userId?: boolean
  createdAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["suggestion"]>

export type SuggestionSelectScalar = {
  id?: boolean
  documentId?: boolean
  documentCreatedAt?: boolean
  originalText?: boolean
  suggestedText?: boolean
  description?: boolean
  isResolved?: boolean
  userId?: boolean
  createdAt?: boolean
}

export type SuggestionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "documentId" | "documentCreatedAt" | "originalText" | "suggestedText" | "description" | "isResolved" | "userId" | "createdAt", ExtArgs["result"]["suggestion"]>
export type SuggestionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}
export type SuggestionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}
export type SuggestionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}

export type $SuggestionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Suggestion"
  objects: {
    document: Prisma.$DocumentPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    documentId: string
    documentCreatedAt: Date
    originalText: string
    suggestedText: string
    description: string | null
    isResolved: boolean
    userId: string
    createdAt: Date
  }, ExtArgs["result"]["suggestion"]>
  composites: {}
}

export type SuggestionGetPayload<S extends boolean | null | undefined | SuggestionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SuggestionPayload, S>

export type SuggestionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SuggestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: SuggestionCountAggregateInputType | true
  }

export interface SuggestionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Suggestion'], meta: { name: 'Suggestion' } }
  /**
   * Find zero or one Suggestion that matches the filter.
   * @param {SuggestionFindUniqueArgs} args - Arguments to find a Suggestion
   * @example
   * // Get one Suggestion
   * const suggestion = await prisma.suggestion.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SuggestionFindUniqueArgs>(args: Prisma.SelectSubset<T, SuggestionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SuggestionClient<runtime.Types.Result.GetResult<Prisma.$SuggestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Suggestion that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SuggestionFindUniqueOrThrowArgs} args - Arguments to find a Suggestion
   * @example
   * // Get one Suggestion
   * const suggestion = await prisma.suggestion.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SuggestionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SuggestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SuggestionClient<runtime.Types.Result.GetResult<Prisma.$SuggestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Suggestion that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SuggestionFindFirstArgs} args - Arguments to find a Suggestion
   * @example
   * // Get one Suggestion
   * const suggestion = await prisma.suggestion.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SuggestionFindFirstArgs>(args?: Prisma.SelectSubset<T, SuggestionFindFirstArgs<ExtArgs>>): Prisma.Prisma__SuggestionClient<runtime.Types.Result.GetResult<Prisma.$SuggestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Suggestion that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SuggestionFindFirstOrThrowArgs} args - Arguments to find a Suggestion
   * @example
   * // Get one Suggestion
   * const suggestion = await prisma.suggestion.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SuggestionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SuggestionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SuggestionClient<runtime.Types.Result.GetResult<Prisma.$SuggestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Suggestions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SuggestionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Suggestions
   * const suggestions = await prisma.suggestion.findMany()
   * 
   * // Get first 10 Suggestions
   * const suggestions = await prisma.suggestion.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const suggestionWithIdOnly = await prisma.suggestion.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SuggestionFindManyArgs>(args?: Prisma.SelectSubset<T, SuggestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SuggestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Suggestion.
   * @param {SuggestionCreateArgs} args - Arguments to create a Suggestion.
   * @example
   * // Create one Suggestion
   * const Suggestion = await prisma.suggestion.create({
   *   data: {
   *     // ... data to create a Suggestion
   *   }
   * })
   * 
   */
  create<T extends SuggestionCreateArgs>(args: Prisma.SelectSubset<T, SuggestionCreateArgs<ExtArgs>>): Prisma.Prisma__SuggestionClient<runtime.Types.Result.GetResult<Prisma.$SuggestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Suggestions.
   * @param {SuggestionCreateManyArgs} args - Arguments to create many Suggestions.
   * @example
   * // Create many Suggestions
   * const suggestion = await prisma.suggestion.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SuggestionCreateManyArgs>(args?: Prisma.SelectSubset<T, SuggestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Suggestions and returns the data saved in the database.
   * @param {SuggestionCreateManyAndReturnArgs} args - Arguments to create many Suggestions.
   * @example
   * // Create many Suggestions
   * const suggestion = await prisma.suggestion.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Suggestions and only return the `id`
   * const suggestionWithIdOnly = await prisma.suggestion.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SuggestionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SuggestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SuggestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Suggestion.
   * @param {SuggestionDeleteArgs} args - Arguments to delete one Suggestion.
   * @example
   * // Delete one Suggestion
   * const Suggestion = await prisma.suggestion.delete({
   *   where: {
   *     // ... filter to delete one Suggestion
   *   }
   * })
   * 
   */
  delete<T extends SuggestionDeleteArgs>(args: Prisma.SelectSubset<T, SuggestionDeleteArgs<ExtArgs>>): Prisma.Prisma__SuggestionClient<runtime.Types.Result.GetResult<Prisma.$SuggestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Suggestion.
   * @param {SuggestionUpdateArgs} args - Arguments to update one Suggestion.
   * @example
   * // Update one Suggestion
   * const suggestion = await prisma.suggestion.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SuggestionUpdateArgs>(args: Prisma.SelectSubset<T, SuggestionUpdateArgs<ExtArgs>>): Prisma.Prisma__SuggestionClient<runtime.Types.Result.GetResult<Prisma.$SuggestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Suggestions.
   * @param {SuggestionDeleteManyArgs} args - Arguments to filter Suggestions to delete.
   * @example
   * // Delete a few Suggestions
   * const { count } = await prisma.suggestion.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SuggestionDeleteManyArgs>(args?: Prisma.SelectSubset<T, SuggestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Suggestions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SuggestionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Suggestions
   * const suggestion = await prisma.suggestion.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SuggestionUpdateManyArgs>(args: Prisma.SelectSubset<T, SuggestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Suggestions and returns the data updated in the database.
   * @param {SuggestionUpdateManyAndReturnArgs} args - Arguments to update many Suggestions.
   * @example
   * // Update many Suggestions
   * const suggestion = await prisma.suggestion.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Suggestions and only return the `id`
   * const suggestionWithIdOnly = await prisma.suggestion.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SuggestionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SuggestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SuggestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Suggestion.
   * @param {SuggestionUpsertArgs} args - Arguments to update or create a Suggestion.
   * @example
   * // Update or create a Suggestion
   * const suggestion = await prisma.suggestion.upsert({
   *   create: {
   *     // ... data to create a Suggestion
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Suggestion we want to update
   *   }
   * })
   */
  upsert<T extends SuggestionUpsertArgs>(args: Prisma.SelectSubset<T, SuggestionUpsertArgs<ExtArgs>>): Prisma.Prisma__SuggestionClient<runtime.Types.Result.GetResult<Prisma.$SuggestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Suggestions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SuggestionCountArgs} args - Arguments to filter Suggestions to count.
   * @example
   * // Count the number of Suggestions
   * const count = await prisma.suggestion.count({
   *   where: {
   *     // ... the filter for the Suggestions we want to count
   *   }
   * })
  **/
  count<T extends SuggestionCountArgs>(
    args?: Prisma.Subset<T, SuggestionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SuggestionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Suggestion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SuggestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SuggestionAggregateArgs>(args: Prisma.Subset<T, SuggestionAggregateArgs>): Prisma.PrismaPromise<GetSuggestionAggregateType<T>>

  /**
   * Group by Suggestion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SuggestionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SuggestionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SuggestionGroupByArgs['orderBy'] }
      : { orderBy?: SuggestionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SuggestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuggestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Suggestion model
 */
readonly fields: SuggestionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Suggestion.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SuggestionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  document<T extends Prisma.DocumentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DocumentDefaultArgs<ExtArgs>>): Prisma.Prisma__DocumentClient<runtime.Types.Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Suggestion model
 */
export interface SuggestionFieldRefs {
  readonly id: Prisma.FieldRef<"Suggestion", 'String'>
  readonly documentId: Prisma.FieldRef<"Suggestion", 'String'>
  readonly documentCreatedAt: Prisma.FieldRef<"Suggestion", 'DateTime'>
  readonly originalText: Prisma.FieldRef<"Suggestion", 'String'>
  readonly suggestedText: Prisma.FieldRef<"Suggestion", 'String'>
  readonly description: Prisma.FieldRef<"Suggestion", 'String'>
  readonly isResolved: Prisma.FieldRef<"Suggestion", 'Boolean'>
  readonly userId: Prisma.FieldRef<"Suggestion", 'String'>
  readonly createdAt: Prisma.FieldRef<"Suggestion", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Suggestion findUnique
 */
export type SuggestionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Suggestion
   */
  select?: Prisma.SuggestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Suggestion
   */
  omit?: Prisma.SuggestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SuggestionInclude<ExtArgs> | null
  /**
   * Filter, which Suggestion to fetch.
   */
  where: Prisma.SuggestionWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Suggestion findUniqueOrThrow
 */
export type SuggestionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Suggestion
   */
  select?: Prisma.SuggestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Suggestion
   */
  omit?: Prisma.SuggestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SuggestionInclude<ExtArgs> | null
  /**
   * Filter, which Suggestion to fetch.
   */
  where: Prisma.SuggestionWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Suggestion findFirst
 */
export type SuggestionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Suggestion
   */
  select?: Prisma.SuggestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Suggestion
   */
  omit?: Prisma.SuggestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SuggestionInclude<ExtArgs> | null
  /**
   * Filter, which Suggestion to fetch.
   */
  where?: Prisma.SuggestionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Suggestions to fetch.
   */
  orderBy?: Prisma.SuggestionOrderByWithRelationInput | Prisma.SuggestionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Suggestions.
   */
  cursor?: Prisma.SuggestionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Suggestions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Suggestions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Suggestions.
   */
  distinct?: Prisma.SuggestionScalarFieldEnum | Prisma.SuggestionScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Suggestion findFirstOrThrow
 */
export type SuggestionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Suggestion
   */
  select?: Prisma.SuggestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Suggestion
   */
  omit?: Prisma.SuggestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SuggestionInclude<ExtArgs> | null
  /**
   * Filter, which Suggestion to fetch.
   */
  where?: Prisma.SuggestionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Suggestions to fetch.
   */
  orderBy?: Prisma.SuggestionOrderByWithRelationInput | Prisma.SuggestionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Suggestions.
   */
  cursor?: Prisma.SuggestionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Suggestions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Suggestions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Suggestions.
   */
  distinct?: Prisma.SuggestionScalarFieldEnum | Prisma.SuggestionScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Suggestion findMany
 */
export type SuggestionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Suggestion
   */
  select?: Prisma.SuggestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Suggestion
   */
  omit?: Prisma.SuggestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SuggestionInclude<ExtArgs> | null
  /**
   * Filter, which Suggestions to fetch.
   */
  where?: Prisma.SuggestionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Suggestions to fetch.
   */
  orderBy?: Prisma.SuggestionOrderByWithRelationInput | Prisma.SuggestionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Suggestions.
   */
  cursor?: Prisma.SuggestionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Suggestions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Suggestions.
   */
  skip?: number
  distinct?: Prisma.SuggestionScalarFieldEnum | Prisma.SuggestionScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Suggestion create
 */
export type SuggestionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Suggestion
   */
  select?: Prisma.SuggestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Suggestion
   */
  omit?: Prisma.SuggestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SuggestionInclude<ExtArgs> | null
  /**
   * The data needed to create a Suggestion.
   */
  data: Prisma.XOR<Prisma.SuggestionCreateInput, Prisma.SuggestionUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Suggestion createMany
 */
export type SuggestionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Suggestions.
   */
  data: Prisma.SuggestionCreateManyInput | Prisma.SuggestionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Suggestion createManyAndReturn
 */
export type SuggestionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Suggestion
   */
  select?: Prisma.SuggestionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Suggestion
   */
  omit?: Prisma.SuggestionOmit<ExtArgs> | null
  /**
   * The data used to create many Suggestions.
   */
  data: Prisma.SuggestionCreateManyInput | Prisma.SuggestionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SuggestionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Suggestion update
 */
export type SuggestionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Suggestion
   */
  select?: Prisma.SuggestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Suggestion
   */
  omit?: Prisma.SuggestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SuggestionInclude<ExtArgs> | null
  /**
   * The data needed to update a Suggestion.
   */
  data: Prisma.XOR<Prisma.SuggestionUpdateInput, Prisma.SuggestionUncheckedUpdateInput>
  /**
   * Choose, which Suggestion to update.
   */
  where: Prisma.SuggestionWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Suggestion updateMany
 */
export type SuggestionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Suggestions.
   */
  data: Prisma.XOR<Prisma.SuggestionUpdateManyMutationInput, Prisma.SuggestionUncheckedUpdateManyInput>
  /**
   * Filter which Suggestions to update
   */
  where?: Prisma.SuggestionWhereInput
  /**
   * Limit how many Suggestions to update.
   */
  limit?: number
}

/**
 * Suggestion updateManyAndReturn
 */
export type SuggestionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Suggestion
   */
  select?: Prisma.SuggestionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Suggestion
   */
  omit?: Prisma.SuggestionOmit<ExtArgs> | null
  /**
   * The data used to update Suggestions.
   */
  data: Prisma.XOR<Prisma.SuggestionUpdateManyMutationInput, Prisma.SuggestionUncheckedUpdateManyInput>
  /**
   * Filter which Suggestions to update
   */
  where?: Prisma.SuggestionWhereInput
  /**
   * Limit how many Suggestions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SuggestionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Suggestion upsert
 */
export type SuggestionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Suggestion
   */
  select?: Prisma.SuggestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Suggestion
   */
  omit?: Prisma.SuggestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SuggestionInclude<ExtArgs> | null
  /**
   * The filter to search for the Suggestion to update in case it exists.
   */
  where: Prisma.SuggestionWhereUniqueInput
  /**
   * In case the Suggestion found by the `where` argument doesn't exist, create a new Suggestion with this data.
   */
  create: Prisma.XOR<Prisma.SuggestionCreateInput, Prisma.SuggestionUncheckedCreateInput>
  /**
   * In case the Suggestion was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SuggestionUpdateInput, Prisma.SuggestionUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Suggestion delete
 */
export type SuggestionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Suggestion
   */
  select?: Prisma.SuggestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Suggestion
   */
  omit?: Prisma.SuggestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SuggestionInclude<ExtArgs> | null
  /**
   * Filter which Suggestion to delete.
   */
  where: Prisma.SuggestionWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Suggestion deleteMany
 */
export type SuggestionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Suggestions to delete
   */
  where?: Prisma.SuggestionWhereInput
  /**
   * Limit how many Suggestions to delete.
   */
  limit?: number
}

/**
 * Suggestion without action
 */
export type SuggestionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Suggestion
   */
  select?: Prisma.SuggestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Suggestion
   */
  omit?: Prisma.SuggestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SuggestionInclude<ExtArgs> | null
}
