
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Folder` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Folder
 * 
 */
export type FolderModel = runtime.Types.Result.DefaultSelection<Prisma.$FolderPayload>

export type AggregateFolder = {
  _count: FolderCountAggregateOutputType | null
  _min: FolderMinAggregateOutputType | null
  _max: FolderMaxAggregateOutputType | null
}

export type FolderMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  creatorId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FolderMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  creatorId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FolderCountAggregateOutputType = {
  id: number
  name: number
  description: number
  creatorId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type FolderMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  creatorId?: true
  createdAt?: true
  updatedAt?: true
}

export type FolderMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  creatorId?: true
  createdAt?: true
  updatedAt?: true
}

export type FolderCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  creatorId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type FolderAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Folder to aggregate.
   */
  where?: Prisma.FolderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Folders to fetch.
   */
  orderBy?: Prisma.FolderOrderByWithRelationInput | Prisma.FolderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FolderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Folders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Folders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Folders
  **/
  _count?: true | FolderCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FolderMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FolderMaxAggregateInputType
}

export type GetFolderAggregateType<T extends FolderAggregateArgs> = {
      [P in keyof T & keyof AggregateFolder]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFolder[P]>
    : Prisma.GetScalarType<T[P], AggregateFolder[P]>
}




export type FolderGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FolderWhereInput
  orderBy?: Prisma.FolderOrderByWithAggregationInput | Prisma.FolderOrderByWithAggregationInput[]
  by: Prisma.FolderScalarFieldEnum[] | Prisma.FolderScalarFieldEnum
  having?: Prisma.FolderScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FolderCountAggregateInputType | true
  _min?: FolderMinAggregateInputType
  _max?: FolderMaxAggregateInputType
}

export type FolderGroupByOutputType = {
  id: string
  name: string
  description: string | null
  creatorId: string
  createdAt: Date
  updatedAt: Date
  _count: FolderCountAggregateOutputType | null
  _min: FolderMinAggregateOutputType | null
  _max: FolderMaxAggregateOutputType | null
}

type GetFolderGroupByPayload<T extends FolderGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FolderGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FolderGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FolderGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FolderGroupByOutputType[P]>
      }
    >
  >



export type FolderWhereInput = {
  AND?: Prisma.FolderWhereInput | Prisma.FolderWhereInput[]
  OR?: Prisma.FolderWhereInput[]
  NOT?: Prisma.FolderWhereInput | Prisma.FolderWhereInput[]
  id?: Prisma.UuidFilter<"Folder"> | string
  name?: Prisma.StringFilter<"Folder"> | string
  description?: Prisma.StringNullableFilter<"Folder"> | string | null
  creatorId?: Prisma.UuidFilter<"Folder"> | string
  createdAt?: Prisma.DateTimeFilter<"Folder"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Folder"> | Date | string
  creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  forms?: Prisma.FormListRelationFilter
}

export type FolderOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  creator?: Prisma.UserOrderByWithRelationInput
  forms?: Prisma.FormOrderByRelationAggregateInput
  _relevance?: Prisma.FolderOrderByRelevanceInput
}

export type FolderWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FolderWhereInput | Prisma.FolderWhereInput[]
  OR?: Prisma.FolderWhereInput[]
  NOT?: Prisma.FolderWhereInput | Prisma.FolderWhereInput[]
  name?: Prisma.StringFilter<"Folder"> | string
  description?: Prisma.StringNullableFilter<"Folder"> | string | null
  creatorId?: Prisma.UuidFilter<"Folder"> | string
  createdAt?: Prisma.DateTimeFilter<"Folder"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Folder"> | Date | string
  creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  forms?: Prisma.FormListRelationFilter
}, "id">

export type FolderOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.FolderCountOrderByAggregateInput
  _max?: Prisma.FolderMaxOrderByAggregateInput
  _min?: Prisma.FolderMinOrderByAggregateInput
}

export type FolderScalarWhereWithAggregatesInput = {
  AND?: Prisma.FolderScalarWhereWithAggregatesInput | Prisma.FolderScalarWhereWithAggregatesInput[]
  OR?: Prisma.FolderScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FolderScalarWhereWithAggregatesInput | Prisma.FolderScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Folder"> | string
  name?: Prisma.StringWithAggregatesFilter<"Folder"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Folder"> | string | null
  creatorId?: Prisma.UuidWithAggregatesFilter<"Folder"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Folder"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Folder"> | Date | string
}

export type FolderCreateInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creator: Prisma.UserCreateNestedOneWithoutCreatedFoldersInput
  forms?: Prisma.FormCreateNestedManyWithoutFolderInput
}

export type FolderUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  creatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  forms?: Prisma.FormUncheckedCreateNestedManyWithoutFolderInput
}

export type FolderUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator?: Prisma.UserUpdateOneRequiredWithoutCreatedFoldersNestedInput
  forms?: Prisma.FormUpdateManyWithoutFolderNestedInput
}

export type FolderUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  forms?: Prisma.FormUncheckedUpdateManyWithoutFolderNestedInput
}

export type FolderCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  creatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FolderUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FolderUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FolderListRelationFilter = {
  every?: Prisma.FolderWhereInput
  some?: Prisma.FolderWhereInput
  none?: Prisma.FolderWhereInput
}

export type FolderOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FolderOrderByRelevanceInput = {
  fields: Prisma.FolderOrderByRelevanceFieldEnum | Prisma.FolderOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type FolderCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FolderMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FolderMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FolderNullableScalarRelationFilter = {
  is?: Prisma.FolderWhereInput | null
  isNot?: Prisma.FolderWhereInput | null
}

export type FolderCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.FolderCreateWithoutCreatorInput, Prisma.FolderUncheckedCreateWithoutCreatorInput> | Prisma.FolderCreateWithoutCreatorInput[] | Prisma.FolderUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.FolderCreateOrConnectWithoutCreatorInput | Prisma.FolderCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.FolderCreateManyCreatorInputEnvelope
  connect?: Prisma.FolderWhereUniqueInput | Prisma.FolderWhereUniqueInput[]
}

export type FolderUncheckedCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.FolderCreateWithoutCreatorInput, Prisma.FolderUncheckedCreateWithoutCreatorInput> | Prisma.FolderCreateWithoutCreatorInput[] | Prisma.FolderUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.FolderCreateOrConnectWithoutCreatorInput | Prisma.FolderCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.FolderCreateManyCreatorInputEnvelope
  connect?: Prisma.FolderWhereUniqueInput | Prisma.FolderWhereUniqueInput[]
}

export type FolderUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.FolderCreateWithoutCreatorInput, Prisma.FolderUncheckedCreateWithoutCreatorInput> | Prisma.FolderCreateWithoutCreatorInput[] | Prisma.FolderUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.FolderCreateOrConnectWithoutCreatorInput | Prisma.FolderCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.FolderUpsertWithWhereUniqueWithoutCreatorInput | Prisma.FolderUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.FolderCreateManyCreatorInputEnvelope
  set?: Prisma.FolderWhereUniqueInput | Prisma.FolderWhereUniqueInput[]
  disconnect?: Prisma.FolderWhereUniqueInput | Prisma.FolderWhereUniqueInput[]
  delete?: Prisma.FolderWhereUniqueInput | Prisma.FolderWhereUniqueInput[]
  connect?: Prisma.FolderWhereUniqueInput | Prisma.FolderWhereUniqueInput[]
  update?: Prisma.FolderUpdateWithWhereUniqueWithoutCreatorInput | Prisma.FolderUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.FolderUpdateManyWithWhereWithoutCreatorInput | Prisma.FolderUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.FolderScalarWhereInput | Prisma.FolderScalarWhereInput[]
}

export type FolderUncheckedUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.FolderCreateWithoutCreatorInput, Prisma.FolderUncheckedCreateWithoutCreatorInput> | Prisma.FolderCreateWithoutCreatorInput[] | Prisma.FolderUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.FolderCreateOrConnectWithoutCreatorInput | Prisma.FolderCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.FolderUpsertWithWhereUniqueWithoutCreatorInput | Prisma.FolderUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.FolderCreateManyCreatorInputEnvelope
  set?: Prisma.FolderWhereUniqueInput | Prisma.FolderWhereUniqueInput[]
  disconnect?: Prisma.FolderWhereUniqueInput | Prisma.FolderWhereUniqueInput[]
  delete?: Prisma.FolderWhereUniqueInput | Prisma.FolderWhereUniqueInput[]
  connect?: Prisma.FolderWhereUniqueInput | Prisma.FolderWhereUniqueInput[]
  update?: Prisma.FolderUpdateWithWhereUniqueWithoutCreatorInput | Prisma.FolderUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.FolderUpdateManyWithWhereWithoutCreatorInput | Prisma.FolderUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.FolderScalarWhereInput | Prisma.FolderScalarWhereInput[]
}

export type FolderCreateNestedOneWithoutFormsInput = {
  create?: Prisma.XOR<Prisma.FolderCreateWithoutFormsInput, Prisma.FolderUncheckedCreateWithoutFormsInput>
  connectOrCreate?: Prisma.FolderCreateOrConnectWithoutFormsInput
  connect?: Prisma.FolderWhereUniqueInput
}

export type FolderUpdateOneWithoutFormsNestedInput = {
  create?: Prisma.XOR<Prisma.FolderCreateWithoutFormsInput, Prisma.FolderUncheckedCreateWithoutFormsInput>
  connectOrCreate?: Prisma.FolderCreateOrConnectWithoutFormsInput
  upsert?: Prisma.FolderUpsertWithoutFormsInput
  disconnect?: Prisma.FolderWhereInput | boolean
  delete?: Prisma.FolderWhereInput | boolean
  connect?: Prisma.FolderWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FolderUpdateToOneWithWhereWithoutFormsInput, Prisma.FolderUpdateWithoutFormsInput>, Prisma.FolderUncheckedUpdateWithoutFormsInput>
}

export type FolderCreateWithoutCreatorInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  forms?: Prisma.FormCreateNestedManyWithoutFolderInput
}

export type FolderUncheckedCreateWithoutCreatorInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  forms?: Prisma.FormUncheckedCreateNestedManyWithoutFolderInput
}

export type FolderCreateOrConnectWithoutCreatorInput = {
  where: Prisma.FolderWhereUniqueInput
  create: Prisma.XOR<Prisma.FolderCreateWithoutCreatorInput, Prisma.FolderUncheckedCreateWithoutCreatorInput>
}

export type FolderCreateManyCreatorInputEnvelope = {
  data: Prisma.FolderCreateManyCreatorInput | Prisma.FolderCreateManyCreatorInput[]
  skipDuplicates?: boolean
}

export type FolderUpsertWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.FolderWhereUniqueInput
  update: Prisma.XOR<Prisma.FolderUpdateWithoutCreatorInput, Prisma.FolderUncheckedUpdateWithoutCreatorInput>
  create: Prisma.XOR<Prisma.FolderCreateWithoutCreatorInput, Prisma.FolderUncheckedCreateWithoutCreatorInput>
}

export type FolderUpdateWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.FolderWhereUniqueInput
  data: Prisma.XOR<Prisma.FolderUpdateWithoutCreatorInput, Prisma.FolderUncheckedUpdateWithoutCreatorInput>
}

export type FolderUpdateManyWithWhereWithoutCreatorInput = {
  where: Prisma.FolderScalarWhereInput
  data: Prisma.XOR<Prisma.FolderUpdateManyMutationInput, Prisma.FolderUncheckedUpdateManyWithoutCreatorInput>
}

export type FolderScalarWhereInput = {
  AND?: Prisma.FolderScalarWhereInput | Prisma.FolderScalarWhereInput[]
  OR?: Prisma.FolderScalarWhereInput[]
  NOT?: Prisma.FolderScalarWhereInput | Prisma.FolderScalarWhereInput[]
  id?: Prisma.UuidFilter<"Folder"> | string
  name?: Prisma.StringFilter<"Folder"> | string
  description?: Prisma.StringNullableFilter<"Folder"> | string | null
  creatorId?: Prisma.UuidFilter<"Folder"> | string
  createdAt?: Prisma.DateTimeFilter<"Folder"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Folder"> | Date | string
}

export type FolderCreateWithoutFormsInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creator: Prisma.UserCreateNestedOneWithoutCreatedFoldersInput
}

export type FolderUncheckedCreateWithoutFormsInput = {
  id?: string
  name: string
  description?: string | null
  creatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FolderCreateOrConnectWithoutFormsInput = {
  where: Prisma.FolderWhereUniqueInput
  create: Prisma.XOR<Prisma.FolderCreateWithoutFormsInput, Prisma.FolderUncheckedCreateWithoutFormsInput>
}

export type FolderUpsertWithoutFormsInput = {
  update: Prisma.XOR<Prisma.FolderUpdateWithoutFormsInput, Prisma.FolderUncheckedUpdateWithoutFormsInput>
  create: Prisma.XOR<Prisma.FolderCreateWithoutFormsInput, Prisma.FolderUncheckedCreateWithoutFormsInput>
  where?: Prisma.FolderWhereInput
}

export type FolderUpdateToOneWithWhereWithoutFormsInput = {
  where?: Prisma.FolderWhereInput
  data: Prisma.XOR<Prisma.FolderUpdateWithoutFormsInput, Prisma.FolderUncheckedUpdateWithoutFormsInput>
}

export type FolderUpdateWithoutFormsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator?: Prisma.UserUpdateOneRequiredWithoutCreatedFoldersNestedInput
}

export type FolderUncheckedUpdateWithoutFormsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FolderCreateManyCreatorInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FolderUpdateWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  forms?: Prisma.FormUpdateManyWithoutFolderNestedInput
}

export type FolderUncheckedUpdateWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  forms?: Prisma.FormUncheckedUpdateManyWithoutFolderNestedInput
}

export type FolderUncheckedUpdateManyWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type FolderCountOutputType
 */

export type FolderCountOutputType = {
  forms: number
}

export type FolderCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  forms?: boolean | FolderCountOutputTypeCountFormsArgs
}

/**
 * FolderCountOutputType without action
 */
export type FolderCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FolderCountOutputType
   */
  select?: Prisma.FolderCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FolderCountOutputType without action
 */
export type FolderCountOutputTypeCountFormsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormWhereInput
}


export type FolderSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  creatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  forms?: boolean | Prisma.Folder$formsArgs<ExtArgs>
  _count?: boolean | Prisma.FolderCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["folder"]>

export type FolderSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  creatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["folder"]>

export type FolderSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  creatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["folder"]>

export type FolderSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  creatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type FolderOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "creatorId" | "createdAt" | "updatedAt", ExtArgs["result"]["folder"]>
export type FolderInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  forms?: boolean | Prisma.Folder$formsArgs<ExtArgs>
  _count?: boolean | Prisma.FolderCountOutputTypeDefaultArgs<ExtArgs>
}
export type FolderIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type FolderIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $FolderPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Folder"
  objects: {
    creator: Prisma.$UserPayload<ExtArgs>
    forms: Prisma.$FormPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    creatorId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["folder"]>
  composites: {}
}

export type FolderGetPayload<S extends boolean | null | undefined | FolderDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FolderPayload, S>

export type FolderCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FolderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: FolderCountAggregateInputType | true
  }

export interface FolderDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Folder'], meta: { name: 'Folder' } }
  /**
   * Find zero or one Folder that matches the filter.
   * @param {FolderFindUniqueArgs} args - Arguments to find a Folder
   * @example
   * // Get one Folder
   * const folder = await prisma.folder.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FolderFindUniqueArgs>(args: Prisma.SelectSubset<T, FolderFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FolderClient<runtime.Types.Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Folder that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FolderFindUniqueOrThrowArgs} args - Arguments to find a Folder
   * @example
   * // Get one Folder
   * const folder = await prisma.folder.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FolderFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FolderFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FolderClient<runtime.Types.Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Folder that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FolderFindFirstArgs} args - Arguments to find a Folder
   * @example
   * // Get one Folder
   * const folder = await prisma.folder.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FolderFindFirstArgs>(args?: Prisma.SelectSubset<T, FolderFindFirstArgs<ExtArgs>>): Prisma.Prisma__FolderClient<runtime.Types.Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Folder that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FolderFindFirstOrThrowArgs} args - Arguments to find a Folder
   * @example
   * // Get one Folder
   * const folder = await prisma.folder.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FolderFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FolderFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FolderClient<runtime.Types.Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Folders that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FolderFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Folders
   * const folders = await prisma.folder.findMany()
   * 
   * // Get first 10 Folders
   * const folders = await prisma.folder.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const folderWithIdOnly = await prisma.folder.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FolderFindManyArgs>(args?: Prisma.SelectSubset<T, FolderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Folder.
   * @param {FolderCreateArgs} args - Arguments to create a Folder.
   * @example
   * // Create one Folder
   * const Folder = await prisma.folder.create({
   *   data: {
   *     // ... data to create a Folder
   *   }
   * })
   * 
   */
  create<T extends FolderCreateArgs>(args: Prisma.SelectSubset<T, FolderCreateArgs<ExtArgs>>): Prisma.Prisma__FolderClient<runtime.Types.Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Folders.
   * @param {FolderCreateManyArgs} args - Arguments to create many Folders.
   * @example
   * // Create many Folders
   * const folder = await prisma.folder.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FolderCreateManyArgs>(args?: Prisma.SelectSubset<T, FolderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Folders and returns the data saved in the database.
   * @param {FolderCreateManyAndReturnArgs} args - Arguments to create many Folders.
   * @example
   * // Create many Folders
   * const folder = await prisma.folder.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Folders and only return the `id`
   * const folderWithIdOnly = await prisma.folder.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FolderCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FolderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Folder.
   * @param {FolderDeleteArgs} args - Arguments to delete one Folder.
   * @example
   * // Delete one Folder
   * const Folder = await prisma.folder.delete({
   *   where: {
   *     // ... filter to delete one Folder
   *   }
   * })
   * 
   */
  delete<T extends FolderDeleteArgs>(args: Prisma.SelectSubset<T, FolderDeleteArgs<ExtArgs>>): Prisma.Prisma__FolderClient<runtime.Types.Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Folder.
   * @param {FolderUpdateArgs} args - Arguments to update one Folder.
   * @example
   * // Update one Folder
   * const folder = await prisma.folder.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FolderUpdateArgs>(args: Prisma.SelectSubset<T, FolderUpdateArgs<ExtArgs>>): Prisma.Prisma__FolderClient<runtime.Types.Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Folders.
   * @param {FolderDeleteManyArgs} args - Arguments to filter Folders to delete.
   * @example
   * // Delete a few Folders
   * const { count } = await prisma.folder.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FolderDeleteManyArgs>(args?: Prisma.SelectSubset<T, FolderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Folders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FolderUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Folders
   * const folder = await prisma.folder.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FolderUpdateManyArgs>(args: Prisma.SelectSubset<T, FolderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Folders and returns the data updated in the database.
   * @param {FolderUpdateManyAndReturnArgs} args - Arguments to update many Folders.
   * @example
   * // Update many Folders
   * const folder = await prisma.folder.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Folders and only return the `id`
   * const folderWithIdOnly = await prisma.folder.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FolderUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FolderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Folder.
   * @param {FolderUpsertArgs} args - Arguments to update or create a Folder.
   * @example
   * // Update or create a Folder
   * const folder = await prisma.folder.upsert({
   *   create: {
   *     // ... data to create a Folder
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Folder we want to update
   *   }
   * })
   */
  upsert<T extends FolderUpsertArgs>(args: Prisma.SelectSubset<T, FolderUpsertArgs<ExtArgs>>): Prisma.Prisma__FolderClient<runtime.Types.Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Folders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FolderCountArgs} args - Arguments to filter Folders to count.
   * @example
   * // Count the number of Folders
   * const count = await prisma.folder.count({
   *   where: {
   *     // ... the filter for the Folders we want to count
   *   }
   * })
  **/
  count<T extends FolderCountArgs>(
    args?: Prisma.Subset<T, FolderCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FolderCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Folder.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FolderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FolderAggregateArgs>(args: Prisma.Subset<T, FolderAggregateArgs>): Prisma.PrismaPromise<GetFolderAggregateType<T>>

  /**
   * Group by Folder.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FolderGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FolderGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FolderGroupByArgs['orderBy'] }
      : { orderBy?: FolderGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FolderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFolderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Folder model
 */
readonly fields: FolderFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Folder.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FolderClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  creator<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  forms<T extends Prisma.Folder$formsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Folder$formsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Folder model
 */
export interface FolderFieldRefs {
  readonly id: Prisma.FieldRef<"Folder", 'String'>
  readonly name: Prisma.FieldRef<"Folder", 'String'>
  readonly description: Prisma.FieldRef<"Folder", 'String'>
  readonly creatorId: Prisma.FieldRef<"Folder", 'String'>
  readonly createdAt: Prisma.FieldRef<"Folder", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Folder", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Folder findUnique
 */
export type FolderFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Folder
   */
  select?: Prisma.FolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Folder
   */
  omit?: Prisma.FolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FolderInclude<ExtArgs> | null
  /**
   * Filter, which Folder to fetch.
   */
  where: Prisma.FolderWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Folder findUniqueOrThrow
 */
export type FolderFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Folder
   */
  select?: Prisma.FolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Folder
   */
  omit?: Prisma.FolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FolderInclude<ExtArgs> | null
  /**
   * Filter, which Folder to fetch.
   */
  where: Prisma.FolderWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Folder findFirst
 */
export type FolderFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Folder
   */
  select?: Prisma.FolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Folder
   */
  omit?: Prisma.FolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FolderInclude<ExtArgs> | null
  /**
   * Filter, which Folder to fetch.
   */
  where?: Prisma.FolderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Folders to fetch.
   */
  orderBy?: Prisma.FolderOrderByWithRelationInput | Prisma.FolderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Folders.
   */
  cursor?: Prisma.FolderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Folders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Folders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Folders.
   */
  distinct?: Prisma.FolderScalarFieldEnum | Prisma.FolderScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Folder findFirstOrThrow
 */
export type FolderFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Folder
   */
  select?: Prisma.FolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Folder
   */
  omit?: Prisma.FolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FolderInclude<ExtArgs> | null
  /**
   * Filter, which Folder to fetch.
   */
  where?: Prisma.FolderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Folders to fetch.
   */
  orderBy?: Prisma.FolderOrderByWithRelationInput | Prisma.FolderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Folders.
   */
  cursor?: Prisma.FolderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Folders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Folders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Folders.
   */
  distinct?: Prisma.FolderScalarFieldEnum | Prisma.FolderScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Folder findMany
 */
export type FolderFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Folder
   */
  select?: Prisma.FolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Folder
   */
  omit?: Prisma.FolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FolderInclude<ExtArgs> | null
  /**
   * Filter, which Folders to fetch.
   */
  where?: Prisma.FolderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Folders to fetch.
   */
  orderBy?: Prisma.FolderOrderByWithRelationInput | Prisma.FolderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Folders.
   */
  cursor?: Prisma.FolderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Folders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Folders.
   */
  skip?: number
  distinct?: Prisma.FolderScalarFieldEnum | Prisma.FolderScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Folder create
 */
export type FolderCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Folder
   */
  select?: Prisma.FolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Folder
   */
  omit?: Prisma.FolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FolderInclude<ExtArgs> | null
  /**
   * The data needed to create a Folder.
   */
  data: Prisma.XOR<Prisma.FolderCreateInput, Prisma.FolderUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Folder createMany
 */
export type FolderCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Folders.
   */
  data: Prisma.FolderCreateManyInput | Prisma.FolderCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Folder createManyAndReturn
 */
export type FolderCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Folder
   */
  select?: Prisma.FolderSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Folder
   */
  omit?: Prisma.FolderOmit<ExtArgs> | null
  /**
   * The data used to create many Folders.
   */
  data: Prisma.FolderCreateManyInput | Prisma.FolderCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FolderIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Folder update
 */
export type FolderUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Folder
   */
  select?: Prisma.FolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Folder
   */
  omit?: Prisma.FolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FolderInclude<ExtArgs> | null
  /**
   * The data needed to update a Folder.
   */
  data: Prisma.XOR<Prisma.FolderUpdateInput, Prisma.FolderUncheckedUpdateInput>
  /**
   * Choose, which Folder to update.
   */
  where: Prisma.FolderWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Folder updateMany
 */
export type FolderUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Folders.
   */
  data: Prisma.XOR<Prisma.FolderUpdateManyMutationInput, Prisma.FolderUncheckedUpdateManyInput>
  /**
   * Filter which Folders to update
   */
  where?: Prisma.FolderWhereInput
  /**
   * Limit how many Folders to update.
   */
  limit?: number
}

/**
 * Folder updateManyAndReturn
 */
export type FolderUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Folder
   */
  select?: Prisma.FolderSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Folder
   */
  omit?: Prisma.FolderOmit<ExtArgs> | null
  /**
   * The data used to update Folders.
   */
  data: Prisma.XOR<Prisma.FolderUpdateManyMutationInput, Prisma.FolderUncheckedUpdateManyInput>
  /**
   * Filter which Folders to update
   */
  where?: Prisma.FolderWhereInput
  /**
   * Limit how many Folders to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FolderIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Folder upsert
 */
export type FolderUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Folder
   */
  select?: Prisma.FolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Folder
   */
  omit?: Prisma.FolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FolderInclude<ExtArgs> | null
  /**
   * The filter to search for the Folder to update in case it exists.
   */
  where: Prisma.FolderWhereUniqueInput
  /**
   * In case the Folder found by the `where` argument doesn't exist, create a new Folder with this data.
   */
  create: Prisma.XOR<Prisma.FolderCreateInput, Prisma.FolderUncheckedCreateInput>
  /**
   * In case the Folder was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FolderUpdateInput, Prisma.FolderUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Folder delete
 */
export type FolderDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Folder
   */
  select?: Prisma.FolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Folder
   */
  omit?: Prisma.FolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FolderInclude<ExtArgs> | null
  /**
   * Filter which Folder to delete.
   */
  where: Prisma.FolderWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Folder deleteMany
 */
export type FolderDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Folders to delete
   */
  where?: Prisma.FolderWhereInput
  /**
   * Limit how many Folders to delete.
   */
  limit?: number
}

/**
 * Folder.forms
 */
export type Folder$formsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Form
   */
  select?: Prisma.FormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Form
   */
  omit?: Prisma.FormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormInclude<ExtArgs> | null
  where?: Prisma.FormWhereInput
  orderBy?: Prisma.FormOrderByWithRelationInput | Prisma.FormOrderByWithRelationInput[]
  cursor?: Prisma.FormWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FormScalarFieldEnum | Prisma.FormScalarFieldEnum[]
}

/**
 * Folder without action
 */
export type FolderDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Folder
   */
  select?: Prisma.FolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Folder
   */
  omit?: Prisma.FolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FolderInclude<ExtArgs> | null
}
