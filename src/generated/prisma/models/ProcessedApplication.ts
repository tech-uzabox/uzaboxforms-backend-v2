
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProcessedApplication` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model ProcessedApplication
 * 
 */
export type ProcessedApplicationModel = runtime.Types.Result.DefaultSelection<Prisma.$ProcessedApplicationPayload>

export type AggregateProcessedApplication = {
  _count: ProcessedApplicationCountAggregateOutputType | null
  _min: ProcessedApplicationMinAggregateOutputType | null
  _max: ProcessedApplicationMaxAggregateOutputType | null
}

export type ProcessedApplicationMinAggregateOutputType = {
  id: string | null
  userId: string | null
  processId: string | null
  applicantProcessId: string | null
  formId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProcessedApplicationMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  processId: string | null
  applicantProcessId: string | null
  formId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProcessedApplicationCountAggregateOutputType = {
  id: number
  userId: number
  processId: number
  applicantProcessId: number
  formId: number
  formRoleIds: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProcessedApplicationMinAggregateInputType = {
  id?: true
  userId?: true
  processId?: true
  applicantProcessId?: true
  formId?: true
  createdAt?: true
  updatedAt?: true
}

export type ProcessedApplicationMaxAggregateInputType = {
  id?: true
  userId?: true
  processId?: true
  applicantProcessId?: true
  formId?: true
  createdAt?: true
  updatedAt?: true
}

export type ProcessedApplicationCountAggregateInputType = {
  id?: true
  userId?: true
  processId?: true
  applicantProcessId?: true
  formId?: true
  formRoleIds?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProcessedApplicationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProcessedApplication to aggregate.
   */
  where?: Prisma.ProcessedApplicationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessedApplications to fetch.
   */
  orderBy?: Prisma.ProcessedApplicationOrderByWithRelationInput | Prisma.ProcessedApplicationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProcessedApplicationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessedApplications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessedApplications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProcessedApplications
  **/
  _count?: true | ProcessedApplicationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProcessedApplicationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProcessedApplicationMaxAggregateInputType
}

export type GetProcessedApplicationAggregateType<T extends ProcessedApplicationAggregateArgs> = {
      [P in keyof T & keyof AggregateProcessedApplication]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProcessedApplication[P]>
    : Prisma.GetScalarType<T[P], AggregateProcessedApplication[P]>
}




export type ProcessedApplicationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProcessedApplicationWhereInput
  orderBy?: Prisma.ProcessedApplicationOrderByWithAggregationInput | Prisma.ProcessedApplicationOrderByWithAggregationInput[]
  by: Prisma.ProcessedApplicationScalarFieldEnum[] | Prisma.ProcessedApplicationScalarFieldEnum
  having?: Prisma.ProcessedApplicationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProcessedApplicationCountAggregateInputType | true
  _min?: ProcessedApplicationMinAggregateInputType
  _max?: ProcessedApplicationMaxAggregateInputType
}

export type ProcessedApplicationGroupByOutputType = {
  id: string
  userId: string
  processId: string
  applicantProcessId: string
  formId: string
  formRoleIds: string[]
  createdAt: Date
  updatedAt: Date
  _count: ProcessedApplicationCountAggregateOutputType | null
  _min: ProcessedApplicationMinAggregateOutputType | null
  _max: ProcessedApplicationMaxAggregateOutputType | null
}

type GetProcessedApplicationGroupByPayload<T extends ProcessedApplicationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProcessedApplicationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProcessedApplicationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProcessedApplicationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProcessedApplicationGroupByOutputType[P]>
      }
    >
  >



export type ProcessedApplicationWhereInput = {
  AND?: Prisma.ProcessedApplicationWhereInput | Prisma.ProcessedApplicationWhereInput[]
  OR?: Prisma.ProcessedApplicationWhereInput[]
  NOT?: Prisma.ProcessedApplicationWhereInput | Prisma.ProcessedApplicationWhereInput[]
  id?: Prisma.UuidFilter<"ProcessedApplication"> | string
  userId?: Prisma.UuidFilter<"ProcessedApplication"> | string
  processId?: Prisma.UuidFilter<"ProcessedApplication"> | string
  applicantProcessId?: Prisma.UuidFilter<"ProcessedApplication"> | string
  formId?: Prisma.UuidFilter<"ProcessedApplication"> | string
  formRoleIds?: Prisma.StringNullableListFilter<"ProcessedApplication">
  createdAt?: Prisma.DateTimeFilter<"ProcessedApplication"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProcessedApplication"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  process?: Prisma.XOR<Prisma.ProcessScalarRelationFilter, Prisma.ProcessWhereInput>
  applicantProcess?: Prisma.XOR<Prisma.ApplicantProcessScalarRelationFilter, Prisma.ApplicantProcessWhereInput>
}

export type ProcessedApplicationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  processId?: Prisma.SortOrder
  applicantProcessId?: Prisma.SortOrder
  formId?: Prisma.SortOrder
  formRoleIds?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  process?: Prisma.ProcessOrderByWithRelationInput
  applicantProcess?: Prisma.ApplicantProcessOrderByWithRelationInput
  _relevance?: Prisma.ProcessedApplicationOrderByRelevanceInput
}

export type ProcessedApplicationWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProcessedApplicationWhereInput | Prisma.ProcessedApplicationWhereInput[]
  OR?: Prisma.ProcessedApplicationWhereInput[]
  NOT?: Prisma.ProcessedApplicationWhereInput | Prisma.ProcessedApplicationWhereInput[]
  userId?: Prisma.UuidFilter<"ProcessedApplication"> | string
  processId?: Prisma.UuidFilter<"ProcessedApplication"> | string
  applicantProcessId?: Prisma.UuidFilter<"ProcessedApplication"> | string
  formId?: Prisma.UuidFilter<"ProcessedApplication"> | string
  formRoleIds?: Prisma.StringNullableListFilter<"ProcessedApplication">
  createdAt?: Prisma.DateTimeFilter<"ProcessedApplication"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProcessedApplication"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  process?: Prisma.XOR<Prisma.ProcessScalarRelationFilter, Prisma.ProcessWhereInput>
  applicantProcess?: Prisma.XOR<Prisma.ApplicantProcessScalarRelationFilter, Prisma.ApplicantProcessWhereInput>
}, "id">

export type ProcessedApplicationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  processId?: Prisma.SortOrder
  applicantProcessId?: Prisma.SortOrder
  formId?: Prisma.SortOrder
  formRoleIds?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProcessedApplicationCountOrderByAggregateInput
  _max?: Prisma.ProcessedApplicationMaxOrderByAggregateInput
  _min?: Prisma.ProcessedApplicationMinOrderByAggregateInput
}

export type ProcessedApplicationScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProcessedApplicationScalarWhereWithAggregatesInput | Prisma.ProcessedApplicationScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProcessedApplicationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProcessedApplicationScalarWhereWithAggregatesInput | Prisma.ProcessedApplicationScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"ProcessedApplication"> | string
  userId?: Prisma.UuidWithAggregatesFilter<"ProcessedApplication"> | string
  processId?: Prisma.UuidWithAggregatesFilter<"ProcessedApplication"> | string
  applicantProcessId?: Prisma.UuidWithAggregatesFilter<"ProcessedApplication"> | string
  formId?: Prisma.UuidWithAggregatesFilter<"ProcessedApplication"> | string
  formRoleIds?: Prisma.StringNullableListFilter<"ProcessedApplication">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProcessedApplication"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ProcessedApplication"> | Date | string
}

export type ProcessedApplicationCreateInput = {
  id?: string
  formId: string
  formRoleIds?: Prisma.ProcessedApplicationCreateformRoleIdsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutProcessedApplicationsInput
  process: Prisma.ProcessCreateNestedOneWithoutProcessedApplicationsInput
  applicantProcess: Prisma.ApplicantProcessCreateNestedOneWithoutProcessedApplicationsInput
}

export type ProcessedApplicationUncheckedCreateInput = {
  id?: string
  userId: string
  processId: string
  applicantProcessId: string
  formId: string
  formRoleIds?: Prisma.ProcessedApplicationCreateformRoleIdsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProcessedApplicationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  formRoleIds?: Prisma.ProcessedApplicationUpdateformRoleIdsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutProcessedApplicationsNestedInput
  process?: Prisma.ProcessUpdateOneRequiredWithoutProcessedApplicationsNestedInput
  applicantProcess?: Prisma.ApplicantProcessUpdateOneRequiredWithoutProcessedApplicationsNestedInput
}

export type ProcessedApplicationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  applicantProcessId?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  formRoleIds?: Prisma.ProcessedApplicationUpdateformRoleIdsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessedApplicationCreateManyInput = {
  id?: string
  userId: string
  processId: string
  applicantProcessId: string
  formId: string
  formRoleIds?: Prisma.ProcessedApplicationCreateformRoleIdsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProcessedApplicationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  formRoleIds?: Prisma.ProcessedApplicationUpdateformRoleIdsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessedApplicationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  applicantProcessId?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  formRoleIds?: Prisma.ProcessedApplicationUpdateformRoleIdsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessedApplicationListRelationFilter = {
  every?: Prisma.ProcessedApplicationWhereInput
  some?: Prisma.ProcessedApplicationWhereInput
  none?: Prisma.ProcessedApplicationWhereInput
}

export type ProcessedApplicationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProcessedApplicationOrderByRelevanceInput = {
  fields: Prisma.ProcessedApplicationOrderByRelevanceFieldEnum | Prisma.ProcessedApplicationOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ProcessedApplicationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  processId?: Prisma.SortOrder
  applicantProcessId?: Prisma.SortOrder
  formId?: Prisma.SortOrder
  formRoleIds?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProcessedApplicationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  processId?: Prisma.SortOrder
  applicantProcessId?: Prisma.SortOrder
  formId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProcessedApplicationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  processId?: Prisma.SortOrder
  applicantProcessId?: Prisma.SortOrder
  formId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProcessedApplicationCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ProcessedApplicationCreateWithoutUserInput, Prisma.ProcessedApplicationUncheckedCreateWithoutUserInput> | Prisma.ProcessedApplicationCreateWithoutUserInput[] | Prisma.ProcessedApplicationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProcessedApplicationCreateOrConnectWithoutUserInput | Prisma.ProcessedApplicationCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ProcessedApplicationCreateManyUserInputEnvelope
  connect?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
}

export type ProcessedApplicationUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ProcessedApplicationCreateWithoutUserInput, Prisma.ProcessedApplicationUncheckedCreateWithoutUserInput> | Prisma.ProcessedApplicationCreateWithoutUserInput[] | Prisma.ProcessedApplicationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProcessedApplicationCreateOrConnectWithoutUserInput | Prisma.ProcessedApplicationCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ProcessedApplicationCreateManyUserInputEnvelope
  connect?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
}

export type ProcessedApplicationUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessedApplicationCreateWithoutUserInput, Prisma.ProcessedApplicationUncheckedCreateWithoutUserInput> | Prisma.ProcessedApplicationCreateWithoutUserInput[] | Prisma.ProcessedApplicationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProcessedApplicationCreateOrConnectWithoutUserInput | Prisma.ProcessedApplicationCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ProcessedApplicationUpsertWithWhereUniqueWithoutUserInput | Prisma.ProcessedApplicationUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ProcessedApplicationCreateManyUserInputEnvelope
  set?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  disconnect?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  delete?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  connect?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  update?: Prisma.ProcessedApplicationUpdateWithWhereUniqueWithoutUserInput | Prisma.ProcessedApplicationUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ProcessedApplicationUpdateManyWithWhereWithoutUserInput | Prisma.ProcessedApplicationUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ProcessedApplicationScalarWhereInput | Prisma.ProcessedApplicationScalarWhereInput[]
}

export type ProcessedApplicationUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessedApplicationCreateWithoutUserInput, Prisma.ProcessedApplicationUncheckedCreateWithoutUserInput> | Prisma.ProcessedApplicationCreateWithoutUserInput[] | Prisma.ProcessedApplicationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProcessedApplicationCreateOrConnectWithoutUserInput | Prisma.ProcessedApplicationCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ProcessedApplicationUpsertWithWhereUniqueWithoutUserInput | Prisma.ProcessedApplicationUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ProcessedApplicationCreateManyUserInputEnvelope
  set?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  disconnect?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  delete?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  connect?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  update?: Prisma.ProcessedApplicationUpdateWithWhereUniqueWithoutUserInput | Prisma.ProcessedApplicationUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ProcessedApplicationUpdateManyWithWhereWithoutUserInput | Prisma.ProcessedApplicationUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ProcessedApplicationScalarWhereInput | Prisma.ProcessedApplicationScalarWhereInput[]
}

export type ProcessedApplicationCreateNestedManyWithoutProcessInput = {
  create?: Prisma.XOR<Prisma.ProcessedApplicationCreateWithoutProcessInput, Prisma.ProcessedApplicationUncheckedCreateWithoutProcessInput> | Prisma.ProcessedApplicationCreateWithoutProcessInput[] | Prisma.ProcessedApplicationUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.ProcessedApplicationCreateOrConnectWithoutProcessInput | Prisma.ProcessedApplicationCreateOrConnectWithoutProcessInput[]
  createMany?: Prisma.ProcessedApplicationCreateManyProcessInputEnvelope
  connect?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
}

export type ProcessedApplicationUncheckedCreateNestedManyWithoutProcessInput = {
  create?: Prisma.XOR<Prisma.ProcessedApplicationCreateWithoutProcessInput, Prisma.ProcessedApplicationUncheckedCreateWithoutProcessInput> | Prisma.ProcessedApplicationCreateWithoutProcessInput[] | Prisma.ProcessedApplicationUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.ProcessedApplicationCreateOrConnectWithoutProcessInput | Prisma.ProcessedApplicationCreateOrConnectWithoutProcessInput[]
  createMany?: Prisma.ProcessedApplicationCreateManyProcessInputEnvelope
  connect?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
}

export type ProcessedApplicationUpdateManyWithoutProcessNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessedApplicationCreateWithoutProcessInput, Prisma.ProcessedApplicationUncheckedCreateWithoutProcessInput> | Prisma.ProcessedApplicationCreateWithoutProcessInput[] | Prisma.ProcessedApplicationUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.ProcessedApplicationCreateOrConnectWithoutProcessInput | Prisma.ProcessedApplicationCreateOrConnectWithoutProcessInput[]
  upsert?: Prisma.ProcessedApplicationUpsertWithWhereUniqueWithoutProcessInput | Prisma.ProcessedApplicationUpsertWithWhereUniqueWithoutProcessInput[]
  createMany?: Prisma.ProcessedApplicationCreateManyProcessInputEnvelope
  set?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  disconnect?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  delete?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  connect?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  update?: Prisma.ProcessedApplicationUpdateWithWhereUniqueWithoutProcessInput | Prisma.ProcessedApplicationUpdateWithWhereUniqueWithoutProcessInput[]
  updateMany?: Prisma.ProcessedApplicationUpdateManyWithWhereWithoutProcessInput | Prisma.ProcessedApplicationUpdateManyWithWhereWithoutProcessInput[]
  deleteMany?: Prisma.ProcessedApplicationScalarWhereInput | Prisma.ProcessedApplicationScalarWhereInput[]
}

export type ProcessedApplicationUncheckedUpdateManyWithoutProcessNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessedApplicationCreateWithoutProcessInput, Prisma.ProcessedApplicationUncheckedCreateWithoutProcessInput> | Prisma.ProcessedApplicationCreateWithoutProcessInput[] | Prisma.ProcessedApplicationUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.ProcessedApplicationCreateOrConnectWithoutProcessInput | Prisma.ProcessedApplicationCreateOrConnectWithoutProcessInput[]
  upsert?: Prisma.ProcessedApplicationUpsertWithWhereUniqueWithoutProcessInput | Prisma.ProcessedApplicationUpsertWithWhereUniqueWithoutProcessInput[]
  createMany?: Prisma.ProcessedApplicationCreateManyProcessInputEnvelope
  set?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  disconnect?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  delete?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  connect?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  update?: Prisma.ProcessedApplicationUpdateWithWhereUniqueWithoutProcessInput | Prisma.ProcessedApplicationUpdateWithWhereUniqueWithoutProcessInput[]
  updateMany?: Prisma.ProcessedApplicationUpdateManyWithWhereWithoutProcessInput | Prisma.ProcessedApplicationUpdateManyWithWhereWithoutProcessInput[]
  deleteMany?: Prisma.ProcessedApplicationScalarWhereInput | Prisma.ProcessedApplicationScalarWhereInput[]
}

export type ProcessedApplicationCreateNestedManyWithoutApplicantProcessInput = {
  create?: Prisma.XOR<Prisma.ProcessedApplicationCreateWithoutApplicantProcessInput, Prisma.ProcessedApplicationUncheckedCreateWithoutApplicantProcessInput> | Prisma.ProcessedApplicationCreateWithoutApplicantProcessInput[] | Prisma.ProcessedApplicationUncheckedCreateWithoutApplicantProcessInput[]
  connectOrCreate?: Prisma.ProcessedApplicationCreateOrConnectWithoutApplicantProcessInput | Prisma.ProcessedApplicationCreateOrConnectWithoutApplicantProcessInput[]
  createMany?: Prisma.ProcessedApplicationCreateManyApplicantProcessInputEnvelope
  connect?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
}

export type ProcessedApplicationUncheckedCreateNestedManyWithoutApplicantProcessInput = {
  create?: Prisma.XOR<Prisma.ProcessedApplicationCreateWithoutApplicantProcessInput, Prisma.ProcessedApplicationUncheckedCreateWithoutApplicantProcessInput> | Prisma.ProcessedApplicationCreateWithoutApplicantProcessInput[] | Prisma.ProcessedApplicationUncheckedCreateWithoutApplicantProcessInput[]
  connectOrCreate?: Prisma.ProcessedApplicationCreateOrConnectWithoutApplicantProcessInput | Prisma.ProcessedApplicationCreateOrConnectWithoutApplicantProcessInput[]
  createMany?: Prisma.ProcessedApplicationCreateManyApplicantProcessInputEnvelope
  connect?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
}

export type ProcessedApplicationUpdateManyWithoutApplicantProcessNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessedApplicationCreateWithoutApplicantProcessInput, Prisma.ProcessedApplicationUncheckedCreateWithoutApplicantProcessInput> | Prisma.ProcessedApplicationCreateWithoutApplicantProcessInput[] | Prisma.ProcessedApplicationUncheckedCreateWithoutApplicantProcessInput[]
  connectOrCreate?: Prisma.ProcessedApplicationCreateOrConnectWithoutApplicantProcessInput | Prisma.ProcessedApplicationCreateOrConnectWithoutApplicantProcessInput[]
  upsert?: Prisma.ProcessedApplicationUpsertWithWhereUniqueWithoutApplicantProcessInput | Prisma.ProcessedApplicationUpsertWithWhereUniqueWithoutApplicantProcessInput[]
  createMany?: Prisma.ProcessedApplicationCreateManyApplicantProcessInputEnvelope
  set?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  disconnect?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  delete?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  connect?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  update?: Prisma.ProcessedApplicationUpdateWithWhereUniqueWithoutApplicantProcessInput | Prisma.ProcessedApplicationUpdateWithWhereUniqueWithoutApplicantProcessInput[]
  updateMany?: Prisma.ProcessedApplicationUpdateManyWithWhereWithoutApplicantProcessInput | Prisma.ProcessedApplicationUpdateManyWithWhereWithoutApplicantProcessInput[]
  deleteMany?: Prisma.ProcessedApplicationScalarWhereInput | Prisma.ProcessedApplicationScalarWhereInput[]
}

export type ProcessedApplicationUncheckedUpdateManyWithoutApplicantProcessNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessedApplicationCreateWithoutApplicantProcessInput, Prisma.ProcessedApplicationUncheckedCreateWithoutApplicantProcessInput> | Prisma.ProcessedApplicationCreateWithoutApplicantProcessInput[] | Prisma.ProcessedApplicationUncheckedCreateWithoutApplicantProcessInput[]
  connectOrCreate?: Prisma.ProcessedApplicationCreateOrConnectWithoutApplicantProcessInput | Prisma.ProcessedApplicationCreateOrConnectWithoutApplicantProcessInput[]
  upsert?: Prisma.ProcessedApplicationUpsertWithWhereUniqueWithoutApplicantProcessInput | Prisma.ProcessedApplicationUpsertWithWhereUniqueWithoutApplicantProcessInput[]
  createMany?: Prisma.ProcessedApplicationCreateManyApplicantProcessInputEnvelope
  set?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  disconnect?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  delete?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  connect?: Prisma.ProcessedApplicationWhereUniqueInput | Prisma.ProcessedApplicationWhereUniqueInput[]
  update?: Prisma.ProcessedApplicationUpdateWithWhereUniqueWithoutApplicantProcessInput | Prisma.ProcessedApplicationUpdateWithWhereUniqueWithoutApplicantProcessInput[]
  updateMany?: Prisma.ProcessedApplicationUpdateManyWithWhereWithoutApplicantProcessInput | Prisma.ProcessedApplicationUpdateManyWithWhereWithoutApplicantProcessInput[]
  deleteMany?: Prisma.ProcessedApplicationScalarWhereInput | Prisma.ProcessedApplicationScalarWhereInput[]
}

export type ProcessedApplicationCreateformRoleIdsInput = {
  set: string[]
}

export type ProcessedApplicationUpdateformRoleIdsInput = {
  set?: string[]
  push?: string | string[]
}

export type ProcessedApplicationCreateWithoutUserInput = {
  id?: string
  formId: string
  formRoleIds?: Prisma.ProcessedApplicationCreateformRoleIdsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  process: Prisma.ProcessCreateNestedOneWithoutProcessedApplicationsInput
  applicantProcess: Prisma.ApplicantProcessCreateNestedOneWithoutProcessedApplicationsInput
}

export type ProcessedApplicationUncheckedCreateWithoutUserInput = {
  id?: string
  processId: string
  applicantProcessId: string
  formId: string
  formRoleIds?: Prisma.ProcessedApplicationCreateformRoleIdsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProcessedApplicationCreateOrConnectWithoutUserInput = {
  where: Prisma.ProcessedApplicationWhereUniqueInput
  create: Prisma.XOR<Prisma.ProcessedApplicationCreateWithoutUserInput, Prisma.ProcessedApplicationUncheckedCreateWithoutUserInput>
}

export type ProcessedApplicationCreateManyUserInputEnvelope = {
  data: Prisma.ProcessedApplicationCreateManyUserInput | Prisma.ProcessedApplicationCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ProcessedApplicationUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProcessedApplicationWhereUniqueInput
  update: Prisma.XOR<Prisma.ProcessedApplicationUpdateWithoutUserInput, Prisma.ProcessedApplicationUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ProcessedApplicationCreateWithoutUserInput, Prisma.ProcessedApplicationUncheckedCreateWithoutUserInput>
}

export type ProcessedApplicationUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProcessedApplicationWhereUniqueInput
  data: Prisma.XOR<Prisma.ProcessedApplicationUpdateWithoutUserInput, Prisma.ProcessedApplicationUncheckedUpdateWithoutUserInput>
}

export type ProcessedApplicationUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ProcessedApplicationScalarWhereInput
  data: Prisma.XOR<Prisma.ProcessedApplicationUpdateManyMutationInput, Prisma.ProcessedApplicationUncheckedUpdateManyWithoutUserInput>
}

export type ProcessedApplicationScalarWhereInput = {
  AND?: Prisma.ProcessedApplicationScalarWhereInput | Prisma.ProcessedApplicationScalarWhereInput[]
  OR?: Prisma.ProcessedApplicationScalarWhereInput[]
  NOT?: Prisma.ProcessedApplicationScalarWhereInput | Prisma.ProcessedApplicationScalarWhereInput[]
  id?: Prisma.UuidFilter<"ProcessedApplication"> | string
  userId?: Prisma.UuidFilter<"ProcessedApplication"> | string
  processId?: Prisma.UuidFilter<"ProcessedApplication"> | string
  applicantProcessId?: Prisma.UuidFilter<"ProcessedApplication"> | string
  formId?: Prisma.UuidFilter<"ProcessedApplication"> | string
  formRoleIds?: Prisma.StringNullableListFilter<"ProcessedApplication">
  createdAt?: Prisma.DateTimeFilter<"ProcessedApplication"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProcessedApplication"> | Date | string
}

export type ProcessedApplicationCreateWithoutProcessInput = {
  id?: string
  formId: string
  formRoleIds?: Prisma.ProcessedApplicationCreateformRoleIdsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutProcessedApplicationsInput
  applicantProcess: Prisma.ApplicantProcessCreateNestedOneWithoutProcessedApplicationsInput
}

export type ProcessedApplicationUncheckedCreateWithoutProcessInput = {
  id?: string
  userId: string
  applicantProcessId: string
  formId: string
  formRoleIds?: Prisma.ProcessedApplicationCreateformRoleIdsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProcessedApplicationCreateOrConnectWithoutProcessInput = {
  where: Prisma.ProcessedApplicationWhereUniqueInput
  create: Prisma.XOR<Prisma.ProcessedApplicationCreateWithoutProcessInput, Prisma.ProcessedApplicationUncheckedCreateWithoutProcessInput>
}

export type ProcessedApplicationCreateManyProcessInputEnvelope = {
  data: Prisma.ProcessedApplicationCreateManyProcessInput | Prisma.ProcessedApplicationCreateManyProcessInput[]
  skipDuplicates?: boolean
}

export type ProcessedApplicationUpsertWithWhereUniqueWithoutProcessInput = {
  where: Prisma.ProcessedApplicationWhereUniqueInput
  update: Prisma.XOR<Prisma.ProcessedApplicationUpdateWithoutProcessInput, Prisma.ProcessedApplicationUncheckedUpdateWithoutProcessInput>
  create: Prisma.XOR<Prisma.ProcessedApplicationCreateWithoutProcessInput, Prisma.ProcessedApplicationUncheckedCreateWithoutProcessInput>
}

export type ProcessedApplicationUpdateWithWhereUniqueWithoutProcessInput = {
  where: Prisma.ProcessedApplicationWhereUniqueInput
  data: Prisma.XOR<Prisma.ProcessedApplicationUpdateWithoutProcessInput, Prisma.ProcessedApplicationUncheckedUpdateWithoutProcessInput>
}

export type ProcessedApplicationUpdateManyWithWhereWithoutProcessInput = {
  where: Prisma.ProcessedApplicationScalarWhereInput
  data: Prisma.XOR<Prisma.ProcessedApplicationUpdateManyMutationInput, Prisma.ProcessedApplicationUncheckedUpdateManyWithoutProcessInput>
}

export type ProcessedApplicationCreateWithoutApplicantProcessInput = {
  id?: string
  formId: string
  formRoleIds?: Prisma.ProcessedApplicationCreateformRoleIdsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutProcessedApplicationsInput
  process: Prisma.ProcessCreateNestedOneWithoutProcessedApplicationsInput
}

export type ProcessedApplicationUncheckedCreateWithoutApplicantProcessInput = {
  id?: string
  userId: string
  processId: string
  formId: string
  formRoleIds?: Prisma.ProcessedApplicationCreateformRoleIdsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProcessedApplicationCreateOrConnectWithoutApplicantProcessInput = {
  where: Prisma.ProcessedApplicationWhereUniqueInput
  create: Prisma.XOR<Prisma.ProcessedApplicationCreateWithoutApplicantProcessInput, Prisma.ProcessedApplicationUncheckedCreateWithoutApplicantProcessInput>
}

export type ProcessedApplicationCreateManyApplicantProcessInputEnvelope = {
  data: Prisma.ProcessedApplicationCreateManyApplicantProcessInput | Prisma.ProcessedApplicationCreateManyApplicantProcessInput[]
  skipDuplicates?: boolean
}

export type ProcessedApplicationUpsertWithWhereUniqueWithoutApplicantProcessInput = {
  where: Prisma.ProcessedApplicationWhereUniqueInput
  update: Prisma.XOR<Prisma.ProcessedApplicationUpdateWithoutApplicantProcessInput, Prisma.ProcessedApplicationUncheckedUpdateWithoutApplicantProcessInput>
  create: Prisma.XOR<Prisma.ProcessedApplicationCreateWithoutApplicantProcessInput, Prisma.ProcessedApplicationUncheckedCreateWithoutApplicantProcessInput>
}

export type ProcessedApplicationUpdateWithWhereUniqueWithoutApplicantProcessInput = {
  where: Prisma.ProcessedApplicationWhereUniqueInput
  data: Prisma.XOR<Prisma.ProcessedApplicationUpdateWithoutApplicantProcessInput, Prisma.ProcessedApplicationUncheckedUpdateWithoutApplicantProcessInput>
}

export type ProcessedApplicationUpdateManyWithWhereWithoutApplicantProcessInput = {
  where: Prisma.ProcessedApplicationScalarWhereInput
  data: Prisma.XOR<Prisma.ProcessedApplicationUpdateManyMutationInput, Prisma.ProcessedApplicationUncheckedUpdateManyWithoutApplicantProcessInput>
}

export type ProcessedApplicationCreateManyUserInput = {
  id?: string
  processId: string
  applicantProcessId: string
  formId: string
  formRoleIds?: Prisma.ProcessedApplicationCreateformRoleIdsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProcessedApplicationUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  formRoleIds?: Prisma.ProcessedApplicationUpdateformRoleIdsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  process?: Prisma.ProcessUpdateOneRequiredWithoutProcessedApplicationsNestedInput
  applicantProcess?: Prisma.ApplicantProcessUpdateOneRequiredWithoutProcessedApplicationsNestedInput
}

export type ProcessedApplicationUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  applicantProcessId?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  formRoleIds?: Prisma.ProcessedApplicationUpdateformRoleIdsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessedApplicationUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  applicantProcessId?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  formRoleIds?: Prisma.ProcessedApplicationUpdateformRoleIdsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessedApplicationCreateManyProcessInput = {
  id?: string
  userId: string
  applicantProcessId: string
  formId: string
  formRoleIds?: Prisma.ProcessedApplicationCreateformRoleIdsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProcessedApplicationUpdateWithoutProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  formRoleIds?: Prisma.ProcessedApplicationUpdateformRoleIdsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutProcessedApplicationsNestedInput
  applicantProcess?: Prisma.ApplicantProcessUpdateOneRequiredWithoutProcessedApplicationsNestedInput
}

export type ProcessedApplicationUncheckedUpdateWithoutProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  applicantProcessId?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  formRoleIds?: Prisma.ProcessedApplicationUpdateformRoleIdsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessedApplicationUncheckedUpdateManyWithoutProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  applicantProcessId?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  formRoleIds?: Prisma.ProcessedApplicationUpdateformRoleIdsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessedApplicationCreateManyApplicantProcessInput = {
  id?: string
  userId: string
  processId: string
  formId: string
  formRoleIds?: Prisma.ProcessedApplicationCreateformRoleIdsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProcessedApplicationUpdateWithoutApplicantProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  formRoleIds?: Prisma.ProcessedApplicationUpdateformRoleIdsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutProcessedApplicationsNestedInput
  process?: Prisma.ProcessUpdateOneRequiredWithoutProcessedApplicationsNestedInput
}

export type ProcessedApplicationUncheckedUpdateWithoutApplicantProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  formRoleIds?: Prisma.ProcessedApplicationUpdateformRoleIdsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessedApplicationUncheckedUpdateManyWithoutApplicantProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  formRoleIds?: Prisma.ProcessedApplicationUpdateformRoleIdsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ProcessedApplicationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  processId?: boolean
  applicantProcessId?: boolean
  formId?: boolean
  formRoleIds?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
  applicantProcess?: boolean | Prisma.ApplicantProcessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["processedApplication"]>

export type ProcessedApplicationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  processId?: boolean
  applicantProcessId?: boolean
  formId?: boolean
  formRoleIds?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
  applicantProcess?: boolean | Prisma.ApplicantProcessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["processedApplication"]>

export type ProcessedApplicationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  processId?: boolean
  applicantProcessId?: boolean
  formId?: boolean
  formRoleIds?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
  applicantProcess?: boolean | Prisma.ApplicantProcessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["processedApplication"]>

export type ProcessedApplicationSelectScalar = {
  id?: boolean
  userId?: boolean
  processId?: boolean
  applicantProcessId?: boolean
  formId?: boolean
  formRoleIds?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProcessedApplicationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "processId" | "applicantProcessId" | "formId" | "formRoleIds" | "createdAt" | "updatedAt", ExtArgs["result"]["processedApplication"]>
export type ProcessedApplicationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
  applicantProcess?: boolean | Prisma.ApplicantProcessDefaultArgs<ExtArgs>
}
export type ProcessedApplicationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
  applicantProcess?: boolean | Prisma.ApplicantProcessDefaultArgs<ExtArgs>
}
export type ProcessedApplicationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
  applicantProcess?: boolean | Prisma.ApplicantProcessDefaultArgs<ExtArgs>
}

export type $ProcessedApplicationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProcessedApplication"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    process: Prisma.$ProcessPayload<ExtArgs>
    applicantProcess: Prisma.$ApplicantProcessPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    processId: string
    applicantProcessId: string
    formId: string
    formRoleIds: string[]
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["processedApplication"]>
  composites: {}
}

export type ProcessedApplicationGetPayload<S extends boolean | null | undefined | ProcessedApplicationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProcessedApplicationPayload, S>

export type ProcessedApplicationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProcessedApplicationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: ProcessedApplicationCountAggregateInputType | true
  }

export interface ProcessedApplicationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProcessedApplication'], meta: { name: 'ProcessedApplication' } }
  /**
   * Find zero or one ProcessedApplication that matches the filter.
   * @param {ProcessedApplicationFindUniqueArgs} args - Arguments to find a ProcessedApplication
   * @example
   * // Get one ProcessedApplication
   * const processedApplication = await prisma.processedApplication.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProcessedApplicationFindUniqueArgs>(args: Prisma.SelectSubset<T, ProcessedApplicationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProcessedApplicationClient<runtime.Types.Result.GetResult<Prisma.$ProcessedApplicationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProcessedApplication that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProcessedApplicationFindUniqueOrThrowArgs} args - Arguments to find a ProcessedApplication
   * @example
   * // Get one ProcessedApplication
   * const processedApplication = await prisma.processedApplication.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProcessedApplicationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProcessedApplicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProcessedApplicationClient<runtime.Types.Result.GetResult<Prisma.$ProcessedApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProcessedApplication that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessedApplicationFindFirstArgs} args - Arguments to find a ProcessedApplication
   * @example
   * // Get one ProcessedApplication
   * const processedApplication = await prisma.processedApplication.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProcessedApplicationFindFirstArgs>(args?: Prisma.SelectSubset<T, ProcessedApplicationFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProcessedApplicationClient<runtime.Types.Result.GetResult<Prisma.$ProcessedApplicationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProcessedApplication that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessedApplicationFindFirstOrThrowArgs} args - Arguments to find a ProcessedApplication
   * @example
   * // Get one ProcessedApplication
   * const processedApplication = await prisma.processedApplication.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProcessedApplicationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProcessedApplicationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProcessedApplicationClient<runtime.Types.Result.GetResult<Prisma.$ProcessedApplicationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProcessedApplications that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessedApplicationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProcessedApplications
   * const processedApplications = await prisma.processedApplication.findMany()
   * 
   * // Get first 10 ProcessedApplications
   * const processedApplications = await prisma.processedApplication.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const processedApplicationWithIdOnly = await prisma.processedApplication.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProcessedApplicationFindManyArgs>(args?: Prisma.SelectSubset<T, ProcessedApplicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessedApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProcessedApplication.
   * @param {ProcessedApplicationCreateArgs} args - Arguments to create a ProcessedApplication.
   * @example
   * // Create one ProcessedApplication
   * const ProcessedApplication = await prisma.processedApplication.create({
   *   data: {
   *     // ... data to create a ProcessedApplication
   *   }
   * })
   * 
   */
  create<T extends ProcessedApplicationCreateArgs>(args: Prisma.SelectSubset<T, ProcessedApplicationCreateArgs<ExtArgs>>): Prisma.Prisma__ProcessedApplicationClient<runtime.Types.Result.GetResult<Prisma.$ProcessedApplicationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProcessedApplications.
   * @param {ProcessedApplicationCreateManyArgs} args - Arguments to create many ProcessedApplications.
   * @example
   * // Create many ProcessedApplications
   * const processedApplication = await prisma.processedApplication.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProcessedApplicationCreateManyArgs>(args?: Prisma.SelectSubset<T, ProcessedApplicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProcessedApplications and returns the data saved in the database.
   * @param {ProcessedApplicationCreateManyAndReturnArgs} args - Arguments to create many ProcessedApplications.
   * @example
   * // Create many ProcessedApplications
   * const processedApplication = await prisma.processedApplication.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProcessedApplications and only return the `id`
   * const processedApplicationWithIdOnly = await prisma.processedApplication.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProcessedApplicationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProcessedApplicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessedApplicationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProcessedApplication.
   * @param {ProcessedApplicationDeleteArgs} args - Arguments to delete one ProcessedApplication.
   * @example
   * // Delete one ProcessedApplication
   * const ProcessedApplication = await prisma.processedApplication.delete({
   *   where: {
   *     // ... filter to delete one ProcessedApplication
   *   }
   * })
   * 
   */
  delete<T extends ProcessedApplicationDeleteArgs>(args: Prisma.SelectSubset<T, ProcessedApplicationDeleteArgs<ExtArgs>>): Prisma.Prisma__ProcessedApplicationClient<runtime.Types.Result.GetResult<Prisma.$ProcessedApplicationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProcessedApplication.
   * @param {ProcessedApplicationUpdateArgs} args - Arguments to update one ProcessedApplication.
   * @example
   * // Update one ProcessedApplication
   * const processedApplication = await prisma.processedApplication.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProcessedApplicationUpdateArgs>(args: Prisma.SelectSubset<T, ProcessedApplicationUpdateArgs<ExtArgs>>): Prisma.Prisma__ProcessedApplicationClient<runtime.Types.Result.GetResult<Prisma.$ProcessedApplicationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProcessedApplications.
   * @param {ProcessedApplicationDeleteManyArgs} args - Arguments to filter ProcessedApplications to delete.
   * @example
   * // Delete a few ProcessedApplications
   * const { count } = await prisma.processedApplication.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProcessedApplicationDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProcessedApplicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProcessedApplications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessedApplicationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProcessedApplications
   * const processedApplication = await prisma.processedApplication.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProcessedApplicationUpdateManyArgs>(args: Prisma.SelectSubset<T, ProcessedApplicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProcessedApplications and returns the data updated in the database.
   * @param {ProcessedApplicationUpdateManyAndReturnArgs} args - Arguments to update many ProcessedApplications.
   * @example
   * // Update many ProcessedApplications
   * const processedApplication = await prisma.processedApplication.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProcessedApplications and only return the `id`
   * const processedApplicationWithIdOnly = await prisma.processedApplication.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProcessedApplicationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProcessedApplicationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessedApplicationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProcessedApplication.
   * @param {ProcessedApplicationUpsertArgs} args - Arguments to update or create a ProcessedApplication.
   * @example
   * // Update or create a ProcessedApplication
   * const processedApplication = await prisma.processedApplication.upsert({
   *   create: {
   *     // ... data to create a ProcessedApplication
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProcessedApplication we want to update
   *   }
   * })
   */
  upsert<T extends ProcessedApplicationUpsertArgs>(args: Prisma.SelectSubset<T, ProcessedApplicationUpsertArgs<ExtArgs>>): Prisma.Prisma__ProcessedApplicationClient<runtime.Types.Result.GetResult<Prisma.$ProcessedApplicationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProcessedApplications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessedApplicationCountArgs} args - Arguments to filter ProcessedApplications to count.
   * @example
   * // Count the number of ProcessedApplications
   * const count = await prisma.processedApplication.count({
   *   where: {
   *     // ... the filter for the ProcessedApplications we want to count
   *   }
   * })
  **/
  count<T extends ProcessedApplicationCountArgs>(
    args?: Prisma.Subset<T, ProcessedApplicationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProcessedApplicationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProcessedApplication.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessedApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProcessedApplicationAggregateArgs>(args: Prisma.Subset<T, ProcessedApplicationAggregateArgs>): Prisma.PrismaPromise<GetProcessedApplicationAggregateType<T>>

  /**
   * Group by ProcessedApplication.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessedApplicationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProcessedApplicationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProcessedApplicationGroupByArgs['orderBy'] }
      : { orderBy?: ProcessedApplicationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProcessedApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcessedApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProcessedApplication model
 */
readonly fields: ProcessedApplicationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProcessedApplication.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProcessedApplicationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  process<T extends Prisma.ProcessDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProcessDefaultArgs<ExtArgs>>): Prisma.Prisma__ProcessClient<runtime.Types.Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  applicantProcess<T extends Prisma.ApplicantProcessDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ApplicantProcessDefaultArgs<ExtArgs>>): Prisma.Prisma__ApplicantProcessClient<runtime.Types.Result.GetResult<Prisma.$ApplicantProcessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProcessedApplication model
 */
export interface ProcessedApplicationFieldRefs {
  readonly id: Prisma.FieldRef<"ProcessedApplication", 'String'>
  readonly userId: Prisma.FieldRef<"ProcessedApplication", 'String'>
  readonly processId: Prisma.FieldRef<"ProcessedApplication", 'String'>
  readonly applicantProcessId: Prisma.FieldRef<"ProcessedApplication", 'String'>
  readonly formId: Prisma.FieldRef<"ProcessedApplication", 'String'>
  readonly formRoleIds: Prisma.FieldRef<"ProcessedApplication", 'String[]'>
  readonly createdAt: Prisma.FieldRef<"ProcessedApplication", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ProcessedApplication", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProcessedApplication findUnique
 */
export type ProcessedApplicationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessedApplication
   */
  select?: Prisma.ProcessedApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessedApplication
   */
  omit?: Prisma.ProcessedApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessedApplicationInclude<ExtArgs> | null
  /**
   * Filter, which ProcessedApplication to fetch.
   */
  where: Prisma.ProcessedApplicationWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessedApplication findUniqueOrThrow
 */
export type ProcessedApplicationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessedApplication
   */
  select?: Prisma.ProcessedApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessedApplication
   */
  omit?: Prisma.ProcessedApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessedApplicationInclude<ExtArgs> | null
  /**
   * Filter, which ProcessedApplication to fetch.
   */
  where: Prisma.ProcessedApplicationWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessedApplication findFirst
 */
export type ProcessedApplicationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessedApplication
   */
  select?: Prisma.ProcessedApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessedApplication
   */
  omit?: Prisma.ProcessedApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessedApplicationInclude<ExtArgs> | null
  /**
   * Filter, which ProcessedApplication to fetch.
   */
  where?: Prisma.ProcessedApplicationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessedApplications to fetch.
   */
  orderBy?: Prisma.ProcessedApplicationOrderByWithRelationInput | Prisma.ProcessedApplicationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProcessedApplications.
   */
  cursor?: Prisma.ProcessedApplicationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessedApplications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessedApplications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProcessedApplications.
   */
  distinct?: Prisma.ProcessedApplicationScalarFieldEnum | Prisma.ProcessedApplicationScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessedApplication findFirstOrThrow
 */
export type ProcessedApplicationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessedApplication
   */
  select?: Prisma.ProcessedApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessedApplication
   */
  omit?: Prisma.ProcessedApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessedApplicationInclude<ExtArgs> | null
  /**
   * Filter, which ProcessedApplication to fetch.
   */
  where?: Prisma.ProcessedApplicationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessedApplications to fetch.
   */
  orderBy?: Prisma.ProcessedApplicationOrderByWithRelationInput | Prisma.ProcessedApplicationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProcessedApplications.
   */
  cursor?: Prisma.ProcessedApplicationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessedApplications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessedApplications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProcessedApplications.
   */
  distinct?: Prisma.ProcessedApplicationScalarFieldEnum | Prisma.ProcessedApplicationScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessedApplication findMany
 */
export type ProcessedApplicationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessedApplication
   */
  select?: Prisma.ProcessedApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessedApplication
   */
  omit?: Prisma.ProcessedApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessedApplicationInclude<ExtArgs> | null
  /**
   * Filter, which ProcessedApplications to fetch.
   */
  where?: Prisma.ProcessedApplicationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessedApplications to fetch.
   */
  orderBy?: Prisma.ProcessedApplicationOrderByWithRelationInput | Prisma.ProcessedApplicationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProcessedApplications.
   */
  cursor?: Prisma.ProcessedApplicationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessedApplications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessedApplications.
   */
  skip?: number
  distinct?: Prisma.ProcessedApplicationScalarFieldEnum | Prisma.ProcessedApplicationScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessedApplication create
 */
export type ProcessedApplicationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessedApplication
   */
  select?: Prisma.ProcessedApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessedApplication
   */
  omit?: Prisma.ProcessedApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessedApplicationInclude<ExtArgs> | null
  /**
   * The data needed to create a ProcessedApplication.
   */
  data: Prisma.XOR<Prisma.ProcessedApplicationCreateInput, Prisma.ProcessedApplicationUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessedApplication createMany
 */
export type ProcessedApplicationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProcessedApplications.
   */
  data: Prisma.ProcessedApplicationCreateManyInput | Prisma.ProcessedApplicationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProcessedApplication createManyAndReturn
 */
export type ProcessedApplicationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessedApplication
   */
  select?: Prisma.ProcessedApplicationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessedApplication
   */
  omit?: Prisma.ProcessedApplicationOmit<ExtArgs> | null
  /**
   * The data used to create many ProcessedApplications.
   */
  data: Prisma.ProcessedApplicationCreateManyInput | Prisma.ProcessedApplicationCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessedApplicationIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProcessedApplication update
 */
export type ProcessedApplicationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessedApplication
   */
  select?: Prisma.ProcessedApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessedApplication
   */
  omit?: Prisma.ProcessedApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessedApplicationInclude<ExtArgs> | null
  /**
   * The data needed to update a ProcessedApplication.
   */
  data: Prisma.XOR<Prisma.ProcessedApplicationUpdateInput, Prisma.ProcessedApplicationUncheckedUpdateInput>
  /**
   * Choose, which ProcessedApplication to update.
   */
  where: Prisma.ProcessedApplicationWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessedApplication updateMany
 */
export type ProcessedApplicationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProcessedApplications.
   */
  data: Prisma.XOR<Prisma.ProcessedApplicationUpdateManyMutationInput, Prisma.ProcessedApplicationUncheckedUpdateManyInput>
  /**
   * Filter which ProcessedApplications to update
   */
  where?: Prisma.ProcessedApplicationWhereInput
  /**
   * Limit how many ProcessedApplications to update.
   */
  limit?: number
}

/**
 * ProcessedApplication updateManyAndReturn
 */
export type ProcessedApplicationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessedApplication
   */
  select?: Prisma.ProcessedApplicationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessedApplication
   */
  omit?: Prisma.ProcessedApplicationOmit<ExtArgs> | null
  /**
   * The data used to update ProcessedApplications.
   */
  data: Prisma.XOR<Prisma.ProcessedApplicationUpdateManyMutationInput, Prisma.ProcessedApplicationUncheckedUpdateManyInput>
  /**
   * Filter which ProcessedApplications to update
   */
  where?: Prisma.ProcessedApplicationWhereInput
  /**
   * Limit how many ProcessedApplications to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessedApplicationIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProcessedApplication upsert
 */
export type ProcessedApplicationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessedApplication
   */
  select?: Prisma.ProcessedApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessedApplication
   */
  omit?: Prisma.ProcessedApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessedApplicationInclude<ExtArgs> | null
  /**
   * The filter to search for the ProcessedApplication to update in case it exists.
   */
  where: Prisma.ProcessedApplicationWhereUniqueInput
  /**
   * In case the ProcessedApplication found by the `where` argument doesn't exist, create a new ProcessedApplication with this data.
   */
  create: Prisma.XOR<Prisma.ProcessedApplicationCreateInput, Prisma.ProcessedApplicationUncheckedCreateInput>
  /**
   * In case the ProcessedApplication was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProcessedApplicationUpdateInput, Prisma.ProcessedApplicationUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessedApplication delete
 */
export type ProcessedApplicationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessedApplication
   */
  select?: Prisma.ProcessedApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessedApplication
   */
  omit?: Prisma.ProcessedApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessedApplicationInclude<ExtArgs> | null
  /**
   * Filter which ProcessedApplication to delete.
   */
  where: Prisma.ProcessedApplicationWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessedApplication deleteMany
 */
export type ProcessedApplicationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProcessedApplications to delete
   */
  where?: Prisma.ProcessedApplicationWhereInput
  /**
   * Limit how many ProcessedApplications to delete.
   */
  limit?: number
}

/**
 * ProcessedApplication without action
 */
export type ProcessedApplicationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessedApplication
   */
  select?: Prisma.ProcessedApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessedApplication
   */
  omit?: Prisma.ProcessedApplicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessedApplicationInclude<ExtArgs> | null
}
