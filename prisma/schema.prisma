generator client {
  provider        = "prisma-client"
  output          = "../src/generated/prisma"
  previewFeatures = ["relationJoins", "fullTextSearchPostgres"]
  moduleFormat    = "cjs"
  engineType      = "client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid()) @db.Uuid
  email                 String                 @unique @db.VarChar(255)
  password              String                 @db.VarChar(255)
  firstName             String?
  lastName              String?
  photo                 String?
  googleId              String?                @unique
  status                UserStatus             @default(ENABLED)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  applicantProcesses    ApplicantProcess[]
  auditLogs             AuditLog[]
  files                 File[]
  createdForms          Form[]                 @relation("FormCreator")
  createdFolders        Folder[]               @relation("FolderCreator")
  createdGroups         Group[]                @relation("GroupCreator")
  organization          OrganizationUser?
  createdProcesses      Process[]              @relation("ProcessCreator")
  processedApplications ProcessedApplication[]
  qrCodeDocuments       QrCodeDocument[]
  roles                 UserRole[]
  ownedDashboards       Dashboard[]
  formGenerationProgress FormGenerationProgress[]

  @@index([email])
  @@map("users")
}

model Role {
  id          String        @id @default(uuid()) @db.Uuid
  name        String        @unique
  description String?
  status      RoleStatus    @default(ENABLED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  groups      GroupRole[]
  processes   ProcessRole[]
  users       UserRole[]

  @@map("roles")
}

model UserRole {
  userId String     @db.Uuid
  roleId String     @db.Uuid
  status RoleStatus @default(ENABLED)
  role   Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model File {
  id           String   @id @default(uuid()) @db.Uuid
  fileUrl      String   @db.VarChar(255)
  thumbnailUrl String?
  size         Int
  isPrivate    Boolean  @default(false)
  title        String   @db.VarChar(255)
  userId       String   @db.Uuid
  fileType     String   @db.VarChar(255)
  createdAt    DateTime @default(now()) @db.Timestamp(0)
  updatedAt    DateTime @updatedAt @db.Timestamp(0)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("files")
}

model AuditLog {
  id           String   @id @default(uuid()) @db.Uuid
  timestamp    DateTime @default(now())
  userId       String?  @db.Uuid
  action       String
  resource     String?
  resourceId   String?
  details      Json?
  status       String
  errorMessage String?
  user         User?    @relation(fields: [userId], references: [id])

  @@index([userId, action, resource])
  @@map("audit_logs")
}

model Group {
  id        String      @id @default(uuid()) @db.Uuid
  name      String      @unique
  status    GroupStatus @default(ENABLED)
  creatorId String      @db.Uuid
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  roles     GroupRole[]
  creator   User        @relation("GroupCreator", fields: [creatorId], references: [id])
  processes Process[]

  @@map("groups")
}

model GroupRole {
  groupId String     @db.Uuid
  roleId  String     @db.Uuid
  status  RoleStatus @default(ENABLED)
  group   Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role    Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([groupId, roleId])
  @@map("group_roles")
}

model Process {
  id                        String                 @id @default(uuid()) @db.Uuid
  name                      String
  type                      ProcessType            @default(PRIVATE)
  groupId                   String                 @db.Uuid
  creatorId                 String                 @db.Uuid
  status                    ProcessStatus          @default(ENABLED)
  archived                  Boolean                @default(false)
  staffViewForms            Boolean                @default(false)
  applicantViewProcessLevel Boolean                @default(false)
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  applicantProcesses        ApplicantProcess[]
  formResponses             FormResponse[]
  forms                     ProcessForm[]
  processedApplications     ProcessedApplication[]
  roles                     ProcessRole[]
  creator                   User                   @relation("ProcessCreator", fields: [creatorId], references: [id])
  group                     Group                  @relation(fields: [groupId], references: [id])

  @@index([groupId])
  @@index([creatorId])
  @@map("processes")
}

model ProcessRole {
  processId String     @db.Uuid
  roleId    String     @db.Uuid
  status    RoleStatus @default(ENABLED)
  process   Process    @relation(fields: [processId], references: [id], onDelete: Cascade)
  role      Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([processId, roleId])
  @@map("process_roles")
}

model Folder {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  creatorId   String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     User     @relation("FolderCreator", fields: [creatorId], references: [id])
  forms       Form[]

  @@index([creatorId])
  @@map("folders")
}

model Form {
  id           String         @id @default(uuid()) @db.Uuid
  name         String
  type         FormType       @default(INTERNAL)
  status       FormStatus     @default(ENABLED)
  archived     Boolean        @default(false)
  creatorId    String         @db.Uuid
  folderId     String?        @db.Uuid
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  design       Json?
  responses    FormResponse[]
  creator      User           @relation("FormCreator", fields: [creatorId], references: [id])
  folder       Folder?        @relation(fields: [folderId], references: [id], onDelete: SetNull)
  processForms ProcessForm[]
  formGenerationProgress FormGenerationProgress[]

  @@index([creatorId])
  @@index([folderId])
  @@map("forms")
}

model FormResponse {
  id                 String           @id @default(uuid()) @db.Uuid
  formId             String           @db.Uuid
  applicantProcessId String           @db.Uuid
  responses          Json
  createdAt          DateTime         @default(now())
  processId          String           @db.Uuid
  applicantProcess   ApplicantProcess @relation(fields: [applicantProcessId], references: [id], onDelete: Cascade)
  form               Form             @relation(fields: [formId], references: [id], onDelete: Cascade)
  process            Process          @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([formId, applicantProcessId])
  @@index([formId])
  @@index([processId])
  @@index([applicantProcessId])
  @@map("form_responses")
}

model ProcessForm {
  id                               String       @id @default(uuid()) @db.Uuid
  processId                        String       @db.Uuid
  formId                           String       @db.Uuid
  order                            Int
  nextStepType                     NextStepType @default(NOT_APPLICABLE)
  nextStepRoles                    String[]
  nextStaffId                      String?      @db.Uuid
  nextStepSpecifiedTo              String?
  notificationType                 NextStepType @default(NOT_APPLICABLE)
  notificationRoles                String[]
  notificationToId                 String?      @db.Uuid
  notificationComment              String?
  notifyApplicant                  Boolean      @default(false)
  applicantNotificationContent     String?
  editApplicationStatus            Boolean      @default(false)
  applicantViewFormAfterCompletion Boolean      @default(false)
  createdAt                        DateTime     @default(now())
  updatedAt                        DateTime     @updatedAt
  form                             Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  process                          Process      @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@index([processId, formId])
  @@map("process_forms")
}

model ApplicantProcess {
  id                    String                 @id @default(uuid()) @db.Uuid
  applicantId           String                 @db.Uuid
  processId             String                 @db.Uuid
  status                ProcessStatus          @default(ENABLED)
  createdAt             DateTime               @default(now())
  completedForms        APCompletedForm[]
  applicant             User                   @relation(fields: [applicantId], references: [id])
  process               Process                @relation(fields: [processId], references: [id])
  processedApplications ProcessedApplication[]
  responses             FormResponse[]
  comments              ProcessComment[]

  @@index([applicantId])
  @@index([processId])
  @@map("applicant_processes")
}

model ProcessedApplication {
  id                 String           @id @default(uuid()) @db.Uuid
  userId             String           @db.Uuid
  processId          String           @db.Uuid
  applicantProcessId String           @db.Uuid
  formId             String           @db.Uuid
  formRoleIds        String[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  user               User             @relation(fields: [userId], references: [id])
  process            Process          @relation(fields: [processId], references: [id])
  applicantProcess   ApplicantProcess @relation(fields: [applicantProcessId], references: [id])

  @@index([userId])
  @@index([processId])
  @@index([applicantProcessId])
  @@map("processed_applications")
}

model APCompletedForm {
  id                               String           @id @default(uuid()) @db.Uuid
  applicantProcessId               String           @db.Uuid
  formId                           String           @db.Uuid
  reviewerId                       String?          @db.Uuid
  nextStaffId                      String?          @db.Uuid
  nextStepType                     NextStepType     @default(NOT_APPLICABLE)
  nextStepRoles                    String[]
  nextStepSpecifiedTo              String?
  notificationType                 NextStepType     @default(NOT_APPLICABLE)
  notificationToId                 String?          @db.Uuid
  notificationToRoles              String[]
  notificationComment              String?
  notifyApplicant                  Boolean          @default(false)
  applicantNotificationContent     String?
  editApplicationStatus            Boolean          @default(false)
  applicantViewFormAfterCompletion Boolean          @default(false)
  createdAt                        DateTime         @default(now())
  applicantProcess                 ApplicantProcess @relation(fields: [applicantProcessId], references: [id], onDelete: Cascade)

  @@index([applicantProcessId])
  @@map("ap_completed_forms")
}

model ProcessComment {
  id                 String           @id @default(uuid()) @db.Uuid
  applicantProcessId String           @db.Uuid
  userId             String           @db.Uuid
  comment            String
  createdAt          DateTime         @default(now())
  applicantProcess   ApplicantProcess @relation(fields: [applicantProcessId], references: [id], onDelete: Cascade)

  @@index([applicantProcessId])
  @@index([userId])
  @@map("process_comments")
}

model OrganizationUser {
  id           String             @id @default(uuid()) @db.Uuid
  userId       String             @unique @db.Uuid
  superiorId   String?            @db.Uuid
  title        String
  superior     OrganizationUser?  @relation("Hierarchy", fields: [superiorId], references: [id])
  subordinates OrganizationUser[] @relation("Hierarchy")
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("organization_users")
}

model Dashboard {
  id           String   @id @default(uuid()) @db.Uuid
  name         String
  ownerId      String   @db.Uuid
  allowedUsers String[]
  allowedRoles String[]
  layout       Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  owner        User     @relation(fields: [ownerId], references: [id])
  widgets      Widget[]

  @@index([ownerId])
  @@map("dashboards")
}

model Widget {
  id                String    @id @default(uuid()) @db.Uuid
  dashboardId       String    @db.Uuid
  description       String?
  title             String
  visualizationType String
  config            Json
  order             Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  dashboard         Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  @@index([dashboardId])
  @@map("widgets")
}

model QrCodeDocument {
  id           String   @id @default(uuid()) @db.Uuid
  documentName String
  fileName     String
  qrCodeId     String   @unique
  creatorId    String   @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  creator      User     @relation(fields: [creatorId], references: [id])

  @@index([creatorId])
  @@map("qr_code_documents")
}

model Otp {
  id        String   @id @default(uuid()) @db.Uuid
  email     String
  otp       String
  expiresAt DateTime

  @@index([email])
  @@map("otps")
}

model Management {
  id         String         @id @default(uuid()) @db.Uuid
  fileName   String
  fileUrl    String?
  type       ManagementType
  uploadedAt DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@map("management")
}

model AddToDatabase {
  id        String              @id @default(uuid()) @db.Uuid
  name      String
  status    AddToDatabaseStatus @default(ENABLED)
  parentId  String?             @db.Uuid
  parent    AddToDatabase?     @relation("Hierarchy", fields: [parentId], references: [id])
  children  AddToDatabase[]    @relation("Hierarchy")
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  
  // This will hold the tree data for this group (new relationship)
  treeItems AddToDatabaseTreeItem[]
  
  @@map("add_to_databases")
}

model AddToDatabaseTreeItem {
  id        String              @id @default(uuid()) @db.Uuid
  name      String
  status    AddToDatabaseStatus @default(ENABLED)
  parentId  String?             @db.Uuid
  addToDatabaseId String        @db.Uuid
  
  // Tree relationships
  parent    AddToDatabaseTreeItem? @relation("TreeHierarchy", fields: [parentId], references: [id])
  children  AddToDatabaseTreeItem[] @relation("TreeHierarchy")
  
  // Belongs to an AddToDatabase group
  addToDatabase AddToDatabase @relation(fields: [addToDatabaseId], references: [id], onDelete: Cascade)
  
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  
  @@map("add_to_database_tree_items")
}

enum UserStatus {
  ENABLED
  DISABLED
  PENDING
}

enum RoleStatus {
  ENABLED
  DISABLED
}

enum GroupStatus {
  ENABLED
  DISABLED
}

enum ProcessType {
  PUBLIC
  PRIVATE
}

enum ProcessStatus {
  ENABLED
  DISABLED
}

enum FormType {
  PUBLIC
  INTERNAL
}

enum FormStatus {
  ENABLED
  DISABLED
}

enum NextStepType {
  STATIC
  DYNAMIC
  FOLLOW_ORGANIZATION_CHART
  NOT_APPLICABLE
}

enum ManagementType {
  HEADER
  FOOTER
}

enum AddToDatabaseStatus {
  ENABLED
  DISABLED
}

enum FormGenerationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model Chat {
  id         String    @id @default(uuid()) @db.Uuid
  createdAt  DateTime  @default(now())
  title      String
  userId     String    @db.Uuid
  visibility String    @default("private")
  messages   Message[]

  @@map("chats")
}

model Message {
  id          String   @id @default(uuid()) @db.Uuid
  chatId      String   @db.Uuid
  role        String
  parts       Json
  attachments Json
  createdAt   DateTime @default(now())
  chat        Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  votes       Vote[]

  @@index([chatId])
  @@map("messages")
}

model Vote {
  chatId    String  @db.Uuid
  messageId String  @db.Uuid
  isUpvoted Boolean
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@id([chatId, messageId])
  @@map("votes")
}

model Document {
  id          String       @id @default(uuid()) @db.Uuid
  createdAt   DateTime     @default(now())
  title       String
  content     String?
  kind        String       @default("text")
  userId      String       @db.Uuid
  suggestions Suggestion[]

  @@unique([id, createdAt])
  @@index([userId])
  @@map("documents")
}

model Suggestion {
  id                String   @id @default(uuid()) @db.Uuid
  documentId        String   @db.Uuid
  documentCreatedAt DateTime
  originalText      String
  suggestedText     String
  description       String?
  isResolved        Boolean  @default(false)
  userId            String   @db.Uuid
  createdAt         DateTime @default(now())
  document          Document @relation(fields: [documentId, documentCreatedAt], references: [id, createdAt], onDelete: Cascade)

  @@index([documentId, documentCreatedAt])
  @@map("suggestions")
}

model ProcessSave {
  id          String   @id @default(uuid()) @db.Uuid
  chatId      String   @unique @db.Uuid
  rolesData   Json?
  processData Json?
  stepsData   Json?
  formsData   Json?
  isComplete  Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("process_saves")
}

model FormGenerationProgress {
  id        String               @id @default(uuid()) @db.Uuid
  jobId     String               @unique
  status    FormGenerationStatus @default(PENDING)
  progress  Int                  @default(0)
  message   String?
  userId    String               @db.Uuid
  formId    String?              @db.Uuid
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  user      User                 @relation(fields: [userId], references: [id])
  form      Form?                @relation(fields: [formId], references: [id])

  @@index([userId])
  @@index([formId])
  @@map("form_generation_progress")
}
