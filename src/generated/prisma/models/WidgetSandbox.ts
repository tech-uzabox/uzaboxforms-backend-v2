
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `WidgetSandbox` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model WidgetSandbox
 * 
 */
export type WidgetSandboxModel = runtime.Types.Result.DefaultSelection<Prisma.$WidgetSandboxPayload>

export type AggregateWidgetSandbox = {
  _count: WidgetSandboxCountAggregateOutputType | null
  _avg: WidgetSandboxAvgAggregateOutputType | null
  _sum: WidgetSandboxSumAggregateOutputType | null
  _min: WidgetSandboxMinAggregateOutputType | null
  _max: WidgetSandboxMaxAggregateOutputType | null
}

export type WidgetSandboxAvgAggregateOutputType = {
  order: number | null
}

export type WidgetSandboxSumAggregateOutputType = {
  order: number | null
}

export type WidgetSandboxMinAggregateOutputType = {
  id: string | null
  chatId: string | null
  description: string | null
  title: string | null
  visualizationType: string | null
  order: number | null
  createdAt: Date | null
  updatedAt: Date | null
  isCommited: boolean | null
}

export type WidgetSandboxMaxAggregateOutputType = {
  id: string | null
  chatId: string | null
  description: string | null
  title: string | null
  visualizationType: string | null
  order: number | null
  createdAt: Date | null
  updatedAt: Date | null
  isCommited: boolean | null
}

export type WidgetSandboxCountAggregateOutputType = {
  id: number
  chatId: number
  description: number
  title: number
  visualizationType: number
  config: number
  order: number
  createdAt: number
  updatedAt: number
  isCommited: number
  _all: number
}


export type WidgetSandboxAvgAggregateInputType = {
  order?: true
}

export type WidgetSandboxSumAggregateInputType = {
  order?: true
}

export type WidgetSandboxMinAggregateInputType = {
  id?: true
  chatId?: true
  description?: true
  title?: true
  visualizationType?: true
  order?: true
  createdAt?: true
  updatedAt?: true
  isCommited?: true
}

export type WidgetSandboxMaxAggregateInputType = {
  id?: true
  chatId?: true
  description?: true
  title?: true
  visualizationType?: true
  order?: true
  createdAt?: true
  updatedAt?: true
  isCommited?: true
}

export type WidgetSandboxCountAggregateInputType = {
  id?: true
  chatId?: true
  description?: true
  title?: true
  visualizationType?: true
  config?: true
  order?: true
  createdAt?: true
  updatedAt?: true
  isCommited?: true
  _all?: true
}

export type WidgetSandboxAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WidgetSandbox to aggregate.
   */
  where?: Prisma.WidgetSandboxWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WidgetSandboxes to fetch.
   */
  orderBy?: Prisma.WidgetSandboxOrderByWithRelationInput | Prisma.WidgetSandboxOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WidgetSandboxWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WidgetSandboxes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WidgetSandboxes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WidgetSandboxes
  **/
  _count?: true | WidgetSandboxCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WidgetSandboxAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WidgetSandboxSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WidgetSandboxMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WidgetSandboxMaxAggregateInputType
}

export type GetWidgetSandboxAggregateType<T extends WidgetSandboxAggregateArgs> = {
      [P in keyof T & keyof AggregateWidgetSandbox]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWidgetSandbox[P]>
    : Prisma.GetScalarType<T[P], AggregateWidgetSandbox[P]>
}




export type WidgetSandboxGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WidgetSandboxWhereInput
  orderBy?: Prisma.WidgetSandboxOrderByWithAggregationInput | Prisma.WidgetSandboxOrderByWithAggregationInput[]
  by: Prisma.WidgetSandboxScalarFieldEnum[] | Prisma.WidgetSandboxScalarFieldEnum
  having?: Prisma.WidgetSandboxScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WidgetSandboxCountAggregateInputType | true
  _avg?: WidgetSandboxAvgAggregateInputType
  _sum?: WidgetSandboxSumAggregateInputType
  _min?: WidgetSandboxMinAggregateInputType
  _max?: WidgetSandboxMaxAggregateInputType
}

export type WidgetSandboxGroupByOutputType = {
  id: string
  chatId: string
  description: string | null
  title: string
  visualizationType: string
  config: runtime.JsonValue
  order: number
  createdAt: Date
  updatedAt: Date
  isCommited: boolean
  _count: WidgetSandboxCountAggregateOutputType | null
  _avg: WidgetSandboxAvgAggregateOutputType | null
  _sum: WidgetSandboxSumAggregateOutputType | null
  _min: WidgetSandboxMinAggregateOutputType | null
  _max: WidgetSandboxMaxAggregateOutputType | null
}

type GetWidgetSandboxGroupByPayload<T extends WidgetSandboxGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WidgetSandboxGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WidgetSandboxGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WidgetSandboxGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WidgetSandboxGroupByOutputType[P]>
      }
    >
  >



export type WidgetSandboxWhereInput = {
  AND?: Prisma.WidgetSandboxWhereInput | Prisma.WidgetSandboxWhereInput[]
  OR?: Prisma.WidgetSandboxWhereInput[]
  NOT?: Prisma.WidgetSandboxWhereInput | Prisma.WidgetSandboxWhereInput[]
  id?: Prisma.UuidFilter<"WidgetSandbox"> | string
  chatId?: Prisma.UuidFilter<"WidgetSandbox"> | string
  description?: Prisma.StringNullableFilter<"WidgetSandbox"> | string | null
  title?: Prisma.StringFilter<"WidgetSandbox"> | string
  visualizationType?: Prisma.StringFilter<"WidgetSandbox"> | string
  config?: Prisma.JsonFilter<"WidgetSandbox">
  order?: Prisma.IntFilter<"WidgetSandbox"> | number
  createdAt?: Prisma.DateTimeFilter<"WidgetSandbox"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WidgetSandbox"> | Date | string
  isCommited?: Prisma.BoolFilter<"WidgetSandbox"> | boolean
  chat?: Prisma.XOR<Prisma.ChatScalarRelationFilter, Prisma.ChatWhereInput>
}

export type WidgetSandboxOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  title?: Prisma.SortOrder
  visualizationType?: Prisma.SortOrder
  config?: Prisma.SortOrder
  order?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isCommited?: Prisma.SortOrder
  chat?: Prisma.ChatOrderByWithRelationInput
  _relevance?: Prisma.WidgetSandboxOrderByRelevanceInput
}

export type WidgetSandboxWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.WidgetSandboxWhereInput | Prisma.WidgetSandboxWhereInput[]
  OR?: Prisma.WidgetSandboxWhereInput[]
  NOT?: Prisma.WidgetSandboxWhereInput | Prisma.WidgetSandboxWhereInput[]
  chatId?: Prisma.UuidFilter<"WidgetSandbox"> | string
  description?: Prisma.StringNullableFilter<"WidgetSandbox"> | string | null
  title?: Prisma.StringFilter<"WidgetSandbox"> | string
  visualizationType?: Prisma.StringFilter<"WidgetSandbox"> | string
  config?: Prisma.JsonFilter<"WidgetSandbox">
  order?: Prisma.IntFilter<"WidgetSandbox"> | number
  createdAt?: Prisma.DateTimeFilter<"WidgetSandbox"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WidgetSandbox"> | Date | string
  isCommited?: Prisma.BoolFilter<"WidgetSandbox"> | boolean
  chat?: Prisma.XOR<Prisma.ChatScalarRelationFilter, Prisma.ChatWhereInput>
}, "id">

export type WidgetSandboxOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  title?: Prisma.SortOrder
  visualizationType?: Prisma.SortOrder
  config?: Prisma.SortOrder
  order?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isCommited?: Prisma.SortOrder
  _count?: Prisma.WidgetSandboxCountOrderByAggregateInput
  _avg?: Prisma.WidgetSandboxAvgOrderByAggregateInput
  _max?: Prisma.WidgetSandboxMaxOrderByAggregateInput
  _min?: Prisma.WidgetSandboxMinOrderByAggregateInput
  _sum?: Prisma.WidgetSandboxSumOrderByAggregateInput
}

export type WidgetSandboxScalarWhereWithAggregatesInput = {
  AND?: Prisma.WidgetSandboxScalarWhereWithAggregatesInput | Prisma.WidgetSandboxScalarWhereWithAggregatesInput[]
  OR?: Prisma.WidgetSandboxScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WidgetSandboxScalarWhereWithAggregatesInput | Prisma.WidgetSandboxScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"WidgetSandbox"> | string
  chatId?: Prisma.UuidWithAggregatesFilter<"WidgetSandbox"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"WidgetSandbox"> | string | null
  title?: Prisma.StringWithAggregatesFilter<"WidgetSandbox"> | string
  visualizationType?: Prisma.StringWithAggregatesFilter<"WidgetSandbox"> | string
  config?: Prisma.JsonWithAggregatesFilter<"WidgetSandbox">
  order?: Prisma.IntWithAggregatesFilter<"WidgetSandbox"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WidgetSandbox"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WidgetSandbox"> | Date | string
  isCommited?: Prisma.BoolWithAggregatesFilter<"WidgetSandbox"> | boolean
}

export type WidgetSandboxCreateInput = {
  id?: string
  description?: string | null
  title: string
  visualizationType: string
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order: number
  createdAt?: Date | string
  updatedAt?: Date | string
  isCommited?: boolean
  chat: Prisma.ChatCreateNestedOneWithoutWidgetSandboxesInput
}

export type WidgetSandboxUncheckedCreateInput = {
  id?: string
  chatId: string
  description?: string | null
  title: string
  visualizationType: string
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order: number
  createdAt?: Date | string
  updatedAt?: Date | string
  isCommited?: boolean
}

export type WidgetSandboxUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  visualizationType?: Prisma.StringFieldUpdateOperationsInput | string
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCommited?: Prisma.BoolFieldUpdateOperationsInput | boolean
  chat?: Prisma.ChatUpdateOneRequiredWithoutWidgetSandboxesNestedInput
}

export type WidgetSandboxUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  visualizationType?: Prisma.StringFieldUpdateOperationsInput | string
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCommited?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type WidgetSandboxCreateManyInput = {
  id?: string
  chatId: string
  description?: string | null
  title: string
  visualizationType: string
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order: number
  createdAt?: Date | string
  updatedAt?: Date | string
  isCommited?: boolean
}

export type WidgetSandboxUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  visualizationType?: Prisma.StringFieldUpdateOperationsInput | string
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCommited?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type WidgetSandboxUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  visualizationType?: Prisma.StringFieldUpdateOperationsInput | string
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCommited?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type WidgetSandboxOrderByRelevanceInput = {
  fields: Prisma.WidgetSandboxOrderByRelevanceFieldEnum | Prisma.WidgetSandboxOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type WidgetSandboxCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  title?: Prisma.SortOrder
  visualizationType?: Prisma.SortOrder
  config?: Prisma.SortOrder
  order?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isCommited?: Prisma.SortOrder
}

export type WidgetSandboxAvgOrderByAggregateInput = {
  order?: Prisma.SortOrder
}

export type WidgetSandboxMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  title?: Prisma.SortOrder
  visualizationType?: Prisma.SortOrder
  order?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isCommited?: Prisma.SortOrder
}

export type WidgetSandboxMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  title?: Prisma.SortOrder
  visualizationType?: Prisma.SortOrder
  order?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isCommited?: Prisma.SortOrder
}

export type WidgetSandboxSumOrderByAggregateInput = {
  order?: Prisma.SortOrder
}

export type WidgetSandboxListRelationFilter = {
  every?: Prisma.WidgetSandboxWhereInput
  some?: Prisma.WidgetSandboxWhereInput
  none?: Prisma.WidgetSandboxWhereInput
}

export type WidgetSandboxOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WidgetSandboxCreateNestedManyWithoutChatInput = {
  create?: Prisma.XOR<Prisma.WidgetSandboxCreateWithoutChatInput, Prisma.WidgetSandboxUncheckedCreateWithoutChatInput> | Prisma.WidgetSandboxCreateWithoutChatInput[] | Prisma.WidgetSandboxUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.WidgetSandboxCreateOrConnectWithoutChatInput | Prisma.WidgetSandboxCreateOrConnectWithoutChatInput[]
  createMany?: Prisma.WidgetSandboxCreateManyChatInputEnvelope
  connect?: Prisma.WidgetSandboxWhereUniqueInput | Prisma.WidgetSandboxWhereUniqueInput[]
}

export type WidgetSandboxUncheckedCreateNestedManyWithoutChatInput = {
  create?: Prisma.XOR<Prisma.WidgetSandboxCreateWithoutChatInput, Prisma.WidgetSandboxUncheckedCreateWithoutChatInput> | Prisma.WidgetSandboxCreateWithoutChatInput[] | Prisma.WidgetSandboxUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.WidgetSandboxCreateOrConnectWithoutChatInput | Prisma.WidgetSandboxCreateOrConnectWithoutChatInput[]
  createMany?: Prisma.WidgetSandboxCreateManyChatInputEnvelope
  connect?: Prisma.WidgetSandboxWhereUniqueInput | Prisma.WidgetSandboxWhereUniqueInput[]
}

export type WidgetSandboxUpdateManyWithoutChatNestedInput = {
  create?: Prisma.XOR<Prisma.WidgetSandboxCreateWithoutChatInput, Prisma.WidgetSandboxUncheckedCreateWithoutChatInput> | Prisma.WidgetSandboxCreateWithoutChatInput[] | Prisma.WidgetSandboxUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.WidgetSandboxCreateOrConnectWithoutChatInput | Prisma.WidgetSandboxCreateOrConnectWithoutChatInput[]
  upsert?: Prisma.WidgetSandboxUpsertWithWhereUniqueWithoutChatInput | Prisma.WidgetSandboxUpsertWithWhereUniqueWithoutChatInput[]
  createMany?: Prisma.WidgetSandboxCreateManyChatInputEnvelope
  set?: Prisma.WidgetSandboxWhereUniqueInput | Prisma.WidgetSandboxWhereUniqueInput[]
  disconnect?: Prisma.WidgetSandboxWhereUniqueInput | Prisma.WidgetSandboxWhereUniqueInput[]
  delete?: Prisma.WidgetSandboxWhereUniqueInput | Prisma.WidgetSandboxWhereUniqueInput[]
  connect?: Prisma.WidgetSandboxWhereUniqueInput | Prisma.WidgetSandboxWhereUniqueInput[]
  update?: Prisma.WidgetSandboxUpdateWithWhereUniqueWithoutChatInput | Prisma.WidgetSandboxUpdateWithWhereUniqueWithoutChatInput[]
  updateMany?: Prisma.WidgetSandboxUpdateManyWithWhereWithoutChatInput | Prisma.WidgetSandboxUpdateManyWithWhereWithoutChatInput[]
  deleteMany?: Prisma.WidgetSandboxScalarWhereInput | Prisma.WidgetSandboxScalarWhereInput[]
}

export type WidgetSandboxUncheckedUpdateManyWithoutChatNestedInput = {
  create?: Prisma.XOR<Prisma.WidgetSandboxCreateWithoutChatInput, Prisma.WidgetSandboxUncheckedCreateWithoutChatInput> | Prisma.WidgetSandboxCreateWithoutChatInput[] | Prisma.WidgetSandboxUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.WidgetSandboxCreateOrConnectWithoutChatInput | Prisma.WidgetSandboxCreateOrConnectWithoutChatInput[]
  upsert?: Prisma.WidgetSandboxUpsertWithWhereUniqueWithoutChatInput | Prisma.WidgetSandboxUpsertWithWhereUniqueWithoutChatInput[]
  createMany?: Prisma.WidgetSandboxCreateManyChatInputEnvelope
  set?: Prisma.WidgetSandboxWhereUniqueInput | Prisma.WidgetSandboxWhereUniqueInput[]
  disconnect?: Prisma.WidgetSandboxWhereUniqueInput | Prisma.WidgetSandboxWhereUniqueInput[]
  delete?: Prisma.WidgetSandboxWhereUniqueInput | Prisma.WidgetSandboxWhereUniqueInput[]
  connect?: Prisma.WidgetSandboxWhereUniqueInput | Prisma.WidgetSandboxWhereUniqueInput[]
  update?: Prisma.WidgetSandboxUpdateWithWhereUniqueWithoutChatInput | Prisma.WidgetSandboxUpdateWithWhereUniqueWithoutChatInput[]
  updateMany?: Prisma.WidgetSandboxUpdateManyWithWhereWithoutChatInput | Prisma.WidgetSandboxUpdateManyWithWhereWithoutChatInput[]
  deleteMany?: Prisma.WidgetSandboxScalarWhereInput | Prisma.WidgetSandboxScalarWhereInput[]
}

export type WidgetSandboxCreateWithoutChatInput = {
  id?: string
  description?: string | null
  title: string
  visualizationType: string
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order: number
  createdAt?: Date | string
  updatedAt?: Date | string
  isCommited?: boolean
}

export type WidgetSandboxUncheckedCreateWithoutChatInput = {
  id?: string
  description?: string | null
  title: string
  visualizationType: string
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order: number
  createdAt?: Date | string
  updatedAt?: Date | string
  isCommited?: boolean
}

export type WidgetSandboxCreateOrConnectWithoutChatInput = {
  where: Prisma.WidgetSandboxWhereUniqueInput
  create: Prisma.XOR<Prisma.WidgetSandboxCreateWithoutChatInput, Prisma.WidgetSandboxUncheckedCreateWithoutChatInput>
}

export type WidgetSandboxCreateManyChatInputEnvelope = {
  data: Prisma.WidgetSandboxCreateManyChatInput | Prisma.WidgetSandboxCreateManyChatInput[]
  skipDuplicates?: boolean
}

export type WidgetSandboxUpsertWithWhereUniqueWithoutChatInput = {
  where: Prisma.WidgetSandboxWhereUniqueInput
  update: Prisma.XOR<Prisma.WidgetSandboxUpdateWithoutChatInput, Prisma.WidgetSandboxUncheckedUpdateWithoutChatInput>
  create: Prisma.XOR<Prisma.WidgetSandboxCreateWithoutChatInput, Prisma.WidgetSandboxUncheckedCreateWithoutChatInput>
}

export type WidgetSandboxUpdateWithWhereUniqueWithoutChatInput = {
  where: Prisma.WidgetSandboxWhereUniqueInput
  data: Prisma.XOR<Prisma.WidgetSandboxUpdateWithoutChatInput, Prisma.WidgetSandboxUncheckedUpdateWithoutChatInput>
}

export type WidgetSandboxUpdateManyWithWhereWithoutChatInput = {
  where: Prisma.WidgetSandboxScalarWhereInput
  data: Prisma.XOR<Prisma.WidgetSandboxUpdateManyMutationInput, Prisma.WidgetSandboxUncheckedUpdateManyWithoutChatInput>
}

export type WidgetSandboxScalarWhereInput = {
  AND?: Prisma.WidgetSandboxScalarWhereInput | Prisma.WidgetSandboxScalarWhereInput[]
  OR?: Prisma.WidgetSandboxScalarWhereInput[]
  NOT?: Prisma.WidgetSandboxScalarWhereInput | Prisma.WidgetSandboxScalarWhereInput[]
  id?: Prisma.UuidFilter<"WidgetSandbox"> | string
  chatId?: Prisma.UuidFilter<"WidgetSandbox"> | string
  description?: Prisma.StringNullableFilter<"WidgetSandbox"> | string | null
  title?: Prisma.StringFilter<"WidgetSandbox"> | string
  visualizationType?: Prisma.StringFilter<"WidgetSandbox"> | string
  config?: Prisma.JsonFilter<"WidgetSandbox">
  order?: Prisma.IntFilter<"WidgetSandbox"> | number
  createdAt?: Prisma.DateTimeFilter<"WidgetSandbox"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WidgetSandbox"> | Date | string
  isCommited?: Prisma.BoolFilter<"WidgetSandbox"> | boolean
}

export type WidgetSandboxCreateManyChatInput = {
  id?: string
  description?: string | null
  title: string
  visualizationType: string
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order: number
  createdAt?: Date | string
  updatedAt?: Date | string
  isCommited?: boolean
}

export type WidgetSandboxUpdateWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  visualizationType?: Prisma.StringFieldUpdateOperationsInput | string
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCommited?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type WidgetSandboxUncheckedUpdateWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  visualizationType?: Prisma.StringFieldUpdateOperationsInput | string
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCommited?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type WidgetSandboxUncheckedUpdateManyWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  visualizationType?: Prisma.StringFieldUpdateOperationsInput | string
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCommited?: Prisma.BoolFieldUpdateOperationsInput | boolean
}



export type WidgetSandboxSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chatId?: boolean
  description?: boolean
  title?: boolean
  visualizationType?: boolean
  config?: boolean
  order?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isCommited?: boolean
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}, ExtArgs["result"]["widgetSandbox"]>

export type WidgetSandboxSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chatId?: boolean
  description?: boolean
  title?: boolean
  visualizationType?: boolean
  config?: boolean
  order?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isCommited?: boolean
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}, ExtArgs["result"]["widgetSandbox"]>

export type WidgetSandboxSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chatId?: boolean
  description?: boolean
  title?: boolean
  visualizationType?: boolean
  config?: boolean
  order?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isCommited?: boolean
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}, ExtArgs["result"]["widgetSandbox"]>

export type WidgetSandboxSelectScalar = {
  id?: boolean
  chatId?: boolean
  description?: boolean
  title?: boolean
  visualizationType?: boolean
  config?: boolean
  order?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isCommited?: boolean
}

export type WidgetSandboxOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "chatId" | "description" | "title" | "visualizationType" | "config" | "order" | "createdAt" | "updatedAt" | "isCommited", ExtArgs["result"]["widgetSandbox"]>
export type WidgetSandboxInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}
export type WidgetSandboxIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}
export type WidgetSandboxIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}

export type $WidgetSandboxPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WidgetSandbox"
  objects: {
    chat: Prisma.$ChatPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    chatId: string
    description: string | null
    title: string
    visualizationType: string
    config: runtime.JsonValue
    order: number
    createdAt: Date
    updatedAt: Date
    isCommited: boolean
  }, ExtArgs["result"]["widgetSandbox"]>
  composites: {}
}

export type WidgetSandboxGetPayload<S extends boolean | null | undefined | WidgetSandboxDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WidgetSandboxPayload, S>

export type WidgetSandboxCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WidgetSandboxFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: WidgetSandboxCountAggregateInputType | true
  }

export interface WidgetSandboxDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WidgetSandbox'], meta: { name: 'WidgetSandbox' } }
  /**
   * Find zero or one WidgetSandbox that matches the filter.
   * @param {WidgetSandboxFindUniqueArgs} args - Arguments to find a WidgetSandbox
   * @example
   * // Get one WidgetSandbox
   * const widgetSandbox = await prisma.widgetSandbox.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WidgetSandboxFindUniqueArgs>(args: Prisma.SelectSubset<T, WidgetSandboxFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WidgetSandboxClient<runtime.Types.Result.GetResult<Prisma.$WidgetSandboxPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WidgetSandbox that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WidgetSandboxFindUniqueOrThrowArgs} args - Arguments to find a WidgetSandbox
   * @example
   * // Get one WidgetSandbox
   * const widgetSandbox = await prisma.widgetSandbox.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WidgetSandboxFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WidgetSandboxFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WidgetSandboxClient<runtime.Types.Result.GetResult<Prisma.$WidgetSandboxPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WidgetSandbox that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WidgetSandboxFindFirstArgs} args - Arguments to find a WidgetSandbox
   * @example
   * // Get one WidgetSandbox
   * const widgetSandbox = await prisma.widgetSandbox.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WidgetSandboxFindFirstArgs>(args?: Prisma.SelectSubset<T, WidgetSandboxFindFirstArgs<ExtArgs>>): Prisma.Prisma__WidgetSandboxClient<runtime.Types.Result.GetResult<Prisma.$WidgetSandboxPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WidgetSandbox that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WidgetSandboxFindFirstOrThrowArgs} args - Arguments to find a WidgetSandbox
   * @example
   * // Get one WidgetSandbox
   * const widgetSandbox = await prisma.widgetSandbox.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WidgetSandboxFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WidgetSandboxFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WidgetSandboxClient<runtime.Types.Result.GetResult<Prisma.$WidgetSandboxPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WidgetSandboxes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WidgetSandboxFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WidgetSandboxes
   * const widgetSandboxes = await prisma.widgetSandbox.findMany()
   * 
   * // Get first 10 WidgetSandboxes
   * const widgetSandboxes = await prisma.widgetSandbox.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const widgetSandboxWithIdOnly = await prisma.widgetSandbox.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WidgetSandboxFindManyArgs>(args?: Prisma.SelectSubset<T, WidgetSandboxFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WidgetSandboxPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WidgetSandbox.
   * @param {WidgetSandboxCreateArgs} args - Arguments to create a WidgetSandbox.
   * @example
   * // Create one WidgetSandbox
   * const WidgetSandbox = await prisma.widgetSandbox.create({
   *   data: {
   *     // ... data to create a WidgetSandbox
   *   }
   * })
   * 
   */
  create<T extends WidgetSandboxCreateArgs>(args: Prisma.SelectSubset<T, WidgetSandboxCreateArgs<ExtArgs>>): Prisma.Prisma__WidgetSandboxClient<runtime.Types.Result.GetResult<Prisma.$WidgetSandboxPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WidgetSandboxes.
   * @param {WidgetSandboxCreateManyArgs} args - Arguments to create many WidgetSandboxes.
   * @example
   * // Create many WidgetSandboxes
   * const widgetSandbox = await prisma.widgetSandbox.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WidgetSandboxCreateManyArgs>(args?: Prisma.SelectSubset<T, WidgetSandboxCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WidgetSandboxes and returns the data saved in the database.
   * @param {WidgetSandboxCreateManyAndReturnArgs} args - Arguments to create many WidgetSandboxes.
   * @example
   * // Create many WidgetSandboxes
   * const widgetSandbox = await prisma.widgetSandbox.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WidgetSandboxes and only return the `id`
   * const widgetSandboxWithIdOnly = await prisma.widgetSandbox.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WidgetSandboxCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WidgetSandboxCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WidgetSandboxPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WidgetSandbox.
   * @param {WidgetSandboxDeleteArgs} args - Arguments to delete one WidgetSandbox.
   * @example
   * // Delete one WidgetSandbox
   * const WidgetSandbox = await prisma.widgetSandbox.delete({
   *   where: {
   *     // ... filter to delete one WidgetSandbox
   *   }
   * })
   * 
   */
  delete<T extends WidgetSandboxDeleteArgs>(args: Prisma.SelectSubset<T, WidgetSandboxDeleteArgs<ExtArgs>>): Prisma.Prisma__WidgetSandboxClient<runtime.Types.Result.GetResult<Prisma.$WidgetSandboxPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WidgetSandbox.
   * @param {WidgetSandboxUpdateArgs} args - Arguments to update one WidgetSandbox.
   * @example
   * // Update one WidgetSandbox
   * const widgetSandbox = await prisma.widgetSandbox.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WidgetSandboxUpdateArgs>(args: Prisma.SelectSubset<T, WidgetSandboxUpdateArgs<ExtArgs>>): Prisma.Prisma__WidgetSandboxClient<runtime.Types.Result.GetResult<Prisma.$WidgetSandboxPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WidgetSandboxes.
   * @param {WidgetSandboxDeleteManyArgs} args - Arguments to filter WidgetSandboxes to delete.
   * @example
   * // Delete a few WidgetSandboxes
   * const { count } = await prisma.widgetSandbox.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WidgetSandboxDeleteManyArgs>(args?: Prisma.SelectSubset<T, WidgetSandboxDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WidgetSandboxes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WidgetSandboxUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WidgetSandboxes
   * const widgetSandbox = await prisma.widgetSandbox.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WidgetSandboxUpdateManyArgs>(args: Prisma.SelectSubset<T, WidgetSandboxUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WidgetSandboxes and returns the data updated in the database.
   * @param {WidgetSandboxUpdateManyAndReturnArgs} args - Arguments to update many WidgetSandboxes.
   * @example
   * // Update many WidgetSandboxes
   * const widgetSandbox = await prisma.widgetSandbox.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WidgetSandboxes and only return the `id`
   * const widgetSandboxWithIdOnly = await prisma.widgetSandbox.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WidgetSandboxUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WidgetSandboxUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WidgetSandboxPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WidgetSandbox.
   * @param {WidgetSandboxUpsertArgs} args - Arguments to update or create a WidgetSandbox.
   * @example
   * // Update or create a WidgetSandbox
   * const widgetSandbox = await prisma.widgetSandbox.upsert({
   *   create: {
   *     // ... data to create a WidgetSandbox
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WidgetSandbox we want to update
   *   }
   * })
   */
  upsert<T extends WidgetSandboxUpsertArgs>(args: Prisma.SelectSubset<T, WidgetSandboxUpsertArgs<ExtArgs>>): Prisma.Prisma__WidgetSandboxClient<runtime.Types.Result.GetResult<Prisma.$WidgetSandboxPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WidgetSandboxes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WidgetSandboxCountArgs} args - Arguments to filter WidgetSandboxes to count.
   * @example
   * // Count the number of WidgetSandboxes
   * const count = await prisma.widgetSandbox.count({
   *   where: {
   *     // ... the filter for the WidgetSandboxes we want to count
   *   }
   * })
  **/
  count<T extends WidgetSandboxCountArgs>(
    args?: Prisma.Subset<T, WidgetSandboxCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WidgetSandboxCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WidgetSandbox.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WidgetSandboxAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WidgetSandboxAggregateArgs>(args: Prisma.Subset<T, WidgetSandboxAggregateArgs>): Prisma.PrismaPromise<GetWidgetSandboxAggregateType<T>>

  /**
   * Group by WidgetSandbox.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WidgetSandboxGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WidgetSandboxGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WidgetSandboxGroupByArgs['orderBy'] }
      : { orderBy?: WidgetSandboxGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WidgetSandboxGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWidgetSandboxGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WidgetSandbox model
 */
readonly fields: WidgetSandboxFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WidgetSandbox.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WidgetSandboxClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  chat<T extends Prisma.ChatDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatDefaultArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WidgetSandbox model
 */
export interface WidgetSandboxFieldRefs {
  readonly id: Prisma.FieldRef<"WidgetSandbox", 'String'>
  readonly chatId: Prisma.FieldRef<"WidgetSandbox", 'String'>
  readonly description: Prisma.FieldRef<"WidgetSandbox", 'String'>
  readonly title: Prisma.FieldRef<"WidgetSandbox", 'String'>
  readonly visualizationType: Prisma.FieldRef<"WidgetSandbox", 'String'>
  readonly config: Prisma.FieldRef<"WidgetSandbox", 'Json'>
  readonly order: Prisma.FieldRef<"WidgetSandbox", 'Int'>
  readonly createdAt: Prisma.FieldRef<"WidgetSandbox", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WidgetSandbox", 'DateTime'>
  readonly isCommited: Prisma.FieldRef<"WidgetSandbox", 'Boolean'>
}
    

// Custom InputTypes
/**
 * WidgetSandbox findUnique
 */
export type WidgetSandboxFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WidgetSandbox
   */
  select?: Prisma.WidgetSandboxSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WidgetSandbox
   */
  omit?: Prisma.WidgetSandboxOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetSandboxInclude<ExtArgs> | null
  /**
   * Filter, which WidgetSandbox to fetch.
   */
  where: Prisma.WidgetSandboxWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WidgetSandbox findUniqueOrThrow
 */
export type WidgetSandboxFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WidgetSandbox
   */
  select?: Prisma.WidgetSandboxSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WidgetSandbox
   */
  omit?: Prisma.WidgetSandboxOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetSandboxInclude<ExtArgs> | null
  /**
   * Filter, which WidgetSandbox to fetch.
   */
  where: Prisma.WidgetSandboxWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WidgetSandbox findFirst
 */
export type WidgetSandboxFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WidgetSandbox
   */
  select?: Prisma.WidgetSandboxSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WidgetSandbox
   */
  omit?: Prisma.WidgetSandboxOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetSandboxInclude<ExtArgs> | null
  /**
   * Filter, which WidgetSandbox to fetch.
   */
  where?: Prisma.WidgetSandboxWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WidgetSandboxes to fetch.
   */
  orderBy?: Prisma.WidgetSandboxOrderByWithRelationInput | Prisma.WidgetSandboxOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WidgetSandboxes.
   */
  cursor?: Prisma.WidgetSandboxWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WidgetSandboxes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WidgetSandboxes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WidgetSandboxes.
   */
  distinct?: Prisma.WidgetSandboxScalarFieldEnum | Prisma.WidgetSandboxScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WidgetSandbox findFirstOrThrow
 */
export type WidgetSandboxFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WidgetSandbox
   */
  select?: Prisma.WidgetSandboxSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WidgetSandbox
   */
  omit?: Prisma.WidgetSandboxOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetSandboxInclude<ExtArgs> | null
  /**
   * Filter, which WidgetSandbox to fetch.
   */
  where?: Prisma.WidgetSandboxWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WidgetSandboxes to fetch.
   */
  orderBy?: Prisma.WidgetSandboxOrderByWithRelationInput | Prisma.WidgetSandboxOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WidgetSandboxes.
   */
  cursor?: Prisma.WidgetSandboxWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WidgetSandboxes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WidgetSandboxes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WidgetSandboxes.
   */
  distinct?: Prisma.WidgetSandboxScalarFieldEnum | Prisma.WidgetSandboxScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WidgetSandbox findMany
 */
export type WidgetSandboxFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WidgetSandbox
   */
  select?: Prisma.WidgetSandboxSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WidgetSandbox
   */
  omit?: Prisma.WidgetSandboxOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetSandboxInclude<ExtArgs> | null
  /**
   * Filter, which WidgetSandboxes to fetch.
   */
  where?: Prisma.WidgetSandboxWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WidgetSandboxes to fetch.
   */
  orderBy?: Prisma.WidgetSandboxOrderByWithRelationInput | Prisma.WidgetSandboxOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WidgetSandboxes.
   */
  cursor?: Prisma.WidgetSandboxWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WidgetSandboxes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WidgetSandboxes.
   */
  skip?: number
  distinct?: Prisma.WidgetSandboxScalarFieldEnum | Prisma.WidgetSandboxScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WidgetSandbox create
 */
export type WidgetSandboxCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WidgetSandbox
   */
  select?: Prisma.WidgetSandboxSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WidgetSandbox
   */
  omit?: Prisma.WidgetSandboxOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetSandboxInclude<ExtArgs> | null
  /**
   * The data needed to create a WidgetSandbox.
   */
  data: Prisma.XOR<Prisma.WidgetSandboxCreateInput, Prisma.WidgetSandboxUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WidgetSandbox createMany
 */
export type WidgetSandboxCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WidgetSandboxes.
   */
  data: Prisma.WidgetSandboxCreateManyInput | Prisma.WidgetSandboxCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WidgetSandbox createManyAndReturn
 */
export type WidgetSandboxCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WidgetSandbox
   */
  select?: Prisma.WidgetSandboxSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WidgetSandbox
   */
  omit?: Prisma.WidgetSandboxOmit<ExtArgs> | null
  /**
   * The data used to create many WidgetSandboxes.
   */
  data: Prisma.WidgetSandboxCreateManyInput | Prisma.WidgetSandboxCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetSandboxIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WidgetSandbox update
 */
export type WidgetSandboxUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WidgetSandbox
   */
  select?: Prisma.WidgetSandboxSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WidgetSandbox
   */
  omit?: Prisma.WidgetSandboxOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetSandboxInclude<ExtArgs> | null
  /**
   * The data needed to update a WidgetSandbox.
   */
  data: Prisma.XOR<Prisma.WidgetSandboxUpdateInput, Prisma.WidgetSandboxUncheckedUpdateInput>
  /**
   * Choose, which WidgetSandbox to update.
   */
  where: Prisma.WidgetSandboxWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WidgetSandbox updateMany
 */
export type WidgetSandboxUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WidgetSandboxes.
   */
  data: Prisma.XOR<Prisma.WidgetSandboxUpdateManyMutationInput, Prisma.WidgetSandboxUncheckedUpdateManyInput>
  /**
   * Filter which WidgetSandboxes to update
   */
  where?: Prisma.WidgetSandboxWhereInput
  /**
   * Limit how many WidgetSandboxes to update.
   */
  limit?: number
}

/**
 * WidgetSandbox updateManyAndReturn
 */
export type WidgetSandboxUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WidgetSandbox
   */
  select?: Prisma.WidgetSandboxSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WidgetSandbox
   */
  omit?: Prisma.WidgetSandboxOmit<ExtArgs> | null
  /**
   * The data used to update WidgetSandboxes.
   */
  data: Prisma.XOR<Prisma.WidgetSandboxUpdateManyMutationInput, Prisma.WidgetSandboxUncheckedUpdateManyInput>
  /**
   * Filter which WidgetSandboxes to update
   */
  where?: Prisma.WidgetSandboxWhereInput
  /**
   * Limit how many WidgetSandboxes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetSandboxIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WidgetSandbox upsert
 */
export type WidgetSandboxUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WidgetSandbox
   */
  select?: Prisma.WidgetSandboxSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WidgetSandbox
   */
  omit?: Prisma.WidgetSandboxOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetSandboxInclude<ExtArgs> | null
  /**
   * The filter to search for the WidgetSandbox to update in case it exists.
   */
  where: Prisma.WidgetSandboxWhereUniqueInput
  /**
   * In case the WidgetSandbox found by the `where` argument doesn't exist, create a new WidgetSandbox with this data.
   */
  create: Prisma.XOR<Prisma.WidgetSandboxCreateInput, Prisma.WidgetSandboxUncheckedCreateInput>
  /**
   * In case the WidgetSandbox was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WidgetSandboxUpdateInput, Prisma.WidgetSandboxUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WidgetSandbox delete
 */
export type WidgetSandboxDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WidgetSandbox
   */
  select?: Prisma.WidgetSandboxSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WidgetSandbox
   */
  omit?: Prisma.WidgetSandboxOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetSandboxInclude<ExtArgs> | null
  /**
   * Filter which WidgetSandbox to delete.
   */
  where: Prisma.WidgetSandboxWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WidgetSandbox deleteMany
 */
export type WidgetSandboxDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WidgetSandboxes to delete
   */
  where?: Prisma.WidgetSandboxWhereInput
  /**
   * Limit how many WidgetSandboxes to delete.
   */
  limit?: number
}

/**
 * WidgetSandbox without action
 */
export type WidgetSandboxDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WidgetSandbox
   */
  select?: Prisma.WidgetSandboxSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WidgetSandbox
   */
  omit?: Prisma.WidgetSandboxOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetSandboxInclude<ExtArgs> | null
}
