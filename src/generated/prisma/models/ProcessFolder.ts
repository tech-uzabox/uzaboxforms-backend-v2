
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProcessFolder` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model ProcessFolder
 * 
 */
export type ProcessFolderModel = runtime.Types.Result.DefaultSelection<Prisma.$ProcessFolderPayload>

export type AggregateProcessFolder = {
  _count: ProcessFolderCountAggregateOutputType | null
  _min: ProcessFolderMinAggregateOutputType | null
  _max: ProcessFolderMaxAggregateOutputType | null
}

export type ProcessFolderMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  creatorId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProcessFolderMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  creatorId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProcessFolderCountAggregateOutputType = {
  id: number
  name: number
  description: number
  creatorId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProcessFolderMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  creatorId?: true
  createdAt?: true
  updatedAt?: true
}

export type ProcessFolderMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  creatorId?: true
  createdAt?: true
  updatedAt?: true
}

export type ProcessFolderCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  creatorId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProcessFolderAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProcessFolder to aggregate.
   */
  where?: Prisma.ProcessFolderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessFolders to fetch.
   */
  orderBy?: Prisma.ProcessFolderOrderByWithRelationInput | Prisma.ProcessFolderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProcessFolderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessFolders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessFolders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProcessFolders
  **/
  _count?: true | ProcessFolderCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProcessFolderMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProcessFolderMaxAggregateInputType
}

export type GetProcessFolderAggregateType<T extends ProcessFolderAggregateArgs> = {
      [P in keyof T & keyof AggregateProcessFolder]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProcessFolder[P]>
    : Prisma.GetScalarType<T[P], AggregateProcessFolder[P]>
}




export type ProcessFolderGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProcessFolderWhereInput
  orderBy?: Prisma.ProcessFolderOrderByWithAggregationInput | Prisma.ProcessFolderOrderByWithAggregationInput[]
  by: Prisma.ProcessFolderScalarFieldEnum[] | Prisma.ProcessFolderScalarFieldEnum
  having?: Prisma.ProcessFolderScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProcessFolderCountAggregateInputType | true
  _min?: ProcessFolderMinAggregateInputType
  _max?: ProcessFolderMaxAggregateInputType
}

export type ProcessFolderGroupByOutputType = {
  id: string
  name: string
  description: string | null
  creatorId: string
  createdAt: Date
  updatedAt: Date
  _count: ProcessFolderCountAggregateOutputType | null
  _min: ProcessFolderMinAggregateOutputType | null
  _max: ProcessFolderMaxAggregateOutputType | null
}

type GetProcessFolderGroupByPayload<T extends ProcessFolderGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProcessFolderGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProcessFolderGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProcessFolderGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProcessFolderGroupByOutputType[P]>
      }
    >
  >



export type ProcessFolderWhereInput = {
  AND?: Prisma.ProcessFolderWhereInput | Prisma.ProcessFolderWhereInput[]
  OR?: Prisma.ProcessFolderWhereInput[]
  NOT?: Prisma.ProcessFolderWhereInput | Prisma.ProcessFolderWhereInput[]
  id?: Prisma.UuidFilter<"ProcessFolder"> | string
  name?: Prisma.StringFilter<"ProcessFolder"> | string
  description?: Prisma.StringNullableFilter<"ProcessFolder"> | string | null
  creatorId?: Prisma.UuidFilter<"ProcessFolder"> | string
  createdAt?: Prisma.DateTimeFilter<"ProcessFolder"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProcessFolder"> | Date | string
  creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  processes?: Prisma.ProcessListRelationFilter
}

export type ProcessFolderOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  creator?: Prisma.UserOrderByWithRelationInput
  processes?: Prisma.ProcessOrderByRelationAggregateInput
  _relevance?: Prisma.ProcessFolderOrderByRelevanceInput
}

export type ProcessFolderWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProcessFolderWhereInput | Prisma.ProcessFolderWhereInput[]
  OR?: Prisma.ProcessFolderWhereInput[]
  NOT?: Prisma.ProcessFolderWhereInput | Prisma.ProcessFolderWhereInput[]
  name?: Prisma.StringFilter<"ProcessFolder"> | string
  description?: Prisma.StringNullableFilter<"ProcessFolder"> | string | null
  creatorId?: Prisma.UuidFilter<"ProcessFolder"> | string
  createdAt?: Prisma.DateTimeFilter<"ProcessFolder"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProcessFolder"> | Date | string
  creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  processes?: Prisma.ProcessListRelationFilter
}, "id">

export type ProcessFolderOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProcessFolderCountOrderByAggregateInput
  _max?: Prisma.ProcessFolderMaxOrderByAggregateInput
  _min?: Prisma.ProcessFolderMinOrderByAggregateInput
}

export type ProcessFolderScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProcessFolderScalarWhereWithAggregatesInput | Prisma.ProcessFolderScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProcessFolderScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProcessFolderScalarWhereWithAggregatesInput | Prisma.ProcessFolderScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"ProcessFolder"> | string
  name?: Prisma.StringWithAggregatesFilter<"ProcessFolder"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"ProcessFolder"> | string | null
  creatorId?: Prisma.UuidWithAggregatesFilter<"ProcessFolder"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProcessFolder"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ProcessFolder"> | Date | string
}

export type ProcessFolderCreateInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creator: Prisma.UserCreateNestedOneWithoutCreatedProcessFoldersInput
  processes?: Prisma.ProcessCreateNestedManyWithoutProcessFolderInput
}

export type ProcessFolderUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  creatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  processes?: Prisma.ProcessUncheckedCreateNestedManyWithoutProcessFolderInput
}

export type ProcessFolderUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator?: Prisma.UserUpdateOneRequiredWithoutCreatedProcessFoldersNestedInput
  processes?: Prisma.ProcessUpdateManyWithoutProcessFolderNestedInput
}

export type ProcessFolderUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  processes?: Prisma.ProcessUncheckedUpdateManyWithoutProcessFolderNestedInput
}

export type ProcessFolderCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  creatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProcessFolderUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessFolderUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessFolderListRelationFilter = {
  every?: Prisma.ProcessFolderWhereInput
  some?: Prisma.ProcessFolderWhereInput
  none?: Prisma.ProcessFolderWhereInput
}

export type ProcessFolderOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProcessFolderNullableScalarRelationFilter = {
  is?: Prisma.ProcessFolderWhereInput | null
  isNot?: Prisma.ProcessFolderWhereInput | null
}

export type ProcessFolderOrderByRelevanceInput = {
  fields: Prisma.ProcessFolderOrderByRelevanceFieldEnum | Prisma.ProcessFolderOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ProcessFolderCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProcessFolderMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProcessFolderMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProcessFolderCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.ProcessFolderCreateWithoutCreatorInput, Prisma.ProcessFolderUncheckedCreateWithoutCreatorInput> | Prisma.ProcessFolderCreateWithoutCreatorInput[] | Prisma.ProcessFolderUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.ProcessFolderCreateOrConnectWithoutCreatorInput | Prisma.ProcessFolderCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.ProcessFolderCreateManyCreatorInputEnvelope
  connect?: Prisma.ProcessFolderWhereUniqueInput | Prisma.ProcessFolderWhereUniqueInput[]
}

export type ProcessFolderUncheckedCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.ProcessFolderCreateWithoutCreatorInput, Prisma.ProcessFolderUncheckedCreateWithoutCreatorInput> | Prisma.ProcessFolderCreateWithoutCreatorInput[] | Prisma.ProcessFolderUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.ProcessFolderCreateOrConnectWithoutCreatorInput | Prisma.ProcessFolderCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.ProcessFolderCreateManyCreatorInputEnvelope
  connect?: Prisma.ProcessFolderWhereUniqueInput | Prisma.ProcessFolderWhereUniqueInput[]
}

export type ProcessFolderUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessFolderCreateWithoutCreatorInput, Prisma.ProcessFolderUncheckedCreateWithoutCreatorInput> | Prisma.ProcessFolderCreateWithoutCreatorInput[] | Prisma.ProcessFolderUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.ProcessFolderCreateOrConnectWithoutCreatorInput | Prisma.ProcessFolderCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.ProcessFolderUpsertWithWhereUniqueWithoutCreatorInput | Prisma.ProcessFolderUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.ProcessFolderCreateManyCreatorInputEnvelope
  set?: Prisma.ProcessFolderWhereUniqueInput | Prisma.ProcessFolderWhereUniqueInput[]
  disconnect?: Prisma.ProcessFolderWhereUniqueInput | Prisma.ProcessFolderWhereUniqueInput[]
  delete?: Prisma.ProcessFolderWhereUniqueInput | Prisma.ProcessFolderWhereUniqueInput[]
  connect?: Prisma.ProcessFolderWhereUniqueInput | Prisma.ProcessFolderWhereUniqueInput[]
  update?: Prisma.ProcessFolderUpdateWithWhereUniqueWithoutCreatorInput | Prisma.ProcessFolderUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.ProcessFolderUpdateManyWithWhereWithoutCreatorInput | Prisma.ProcessFolderUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.ProcessFolderScalarWhereInput | Prisma.ProcessFolderScalarWhereInput[]
}

export type ProcessFolderUncheckedUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessFolderCreateWithoutCreatorInput, Prisma.ProcessFolderUncheckedCreateWithoutCreatorInput> | Prisma.ProcessFolderCreateWithoutCreatorInput[] | Prisma.ProcessFolderUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.ProcessFolderCreateOrConnectWithoutCreatorInput | Prisma.ProcessFolderCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.ProcessFolderUpsertWithWhereUniqueWithoutCreatorInput | Prisma.ProcessFolderUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.ProcessFolderCreateManyCreatorInputEnvelope
  set?: Prisma.ProcessFolderWhereUniqueInput | Prisma.ProcessFolderWhereUniqueInput[]
  disconnect?: Prisma.ProcessFolderWhereUniqueInput | Prisma.ProcessFolderWhereUniqueInput[]
  delete?: Prisma.ProcessFolderWhereUniqueInput | Prisma.ProcessFolderWhereUniqueInput[]
  connect?: Prisma.ProcessFolderWhereUniqueInput | Prisma.ProcessFolderWhereUniqueInput[]
  update?: Prisma.ProcessFolderUpdateWithWhereUniqueWithoutCreatorInput | Prisma.ProcessFolderUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.ProcessFolderUpdateManyWithWhereWithoutCreatorInput | Prisma.ProcessFolderUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.ProcessFolderScalarWhereInput | Prisma.ProcessFolderScalarWhereInput[]
}

export type ProcessFolderCreateNestedOneWithoutProcessesInput = {
  create?: Prisma.XOR<Prisma.ProcessFolderCreateWithoutProcessesInput, Prisma.ProcessFolderUncheckedCreateWithoutProcessesInput>
  connectOrCreate?: Prisma.ProcessFolderCreateOrConnectWithoutProcessesInput
  connect?: Prisma.ProcessFolderWhereUniqueInput
}

export type ProcessFolderUpdateOneWithoutProcessesNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessFolderCreateWithoutProcessesInput, Prisma.ProcessFolderUncheckedCreateWithoutProcessesInput>
  connectOrCreate?: Prisma.ProcessFolderCreateOrConnectWithoutProcessesInput
  upsert?: Prisma.ProcessFolderUpsertWithoutProcessesInput
  disconnect?: Prisma.ProcessFolderWhereInput | boolean
  delete?: Prisma.ProcessFolderWhereInput | boolean
  connect?: Prisma.ProcessFolderWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProcessFolderUpdateToOneWithWhereWithoutProcessesInput, Prisma.ProcessFolderUpdateWithoutProcessesInput>, Prisma.ProcessFolderUncheckedUpdateWithoutProcessesInput>
}

export type ProcessFolderCreateWithoutCreatorInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  processes?: Prisma.ProcessCreateNestedManyWithoutProcessFolderInput
}

export type ProcessFolderUncheckedCreateWithoutCreatorInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  processes?: Prisma.ProcessUncheckedCreateNestedManyWithoutProcessFolderInput
}

export type ProcessFolderCreateOrConnectWithoutCreatorInput = {
  where: Prisma.ProcessFolderWhereUniqueInput
  create: Prisma.XOR<Prisma.ProcessFolderCreateWithoutCreatorInput, Prisma.ProcessFolderUncheckedCreateWithoutCreatorInput>
}

export type ProcessFolderCreateManyCreatorInputEnvelope = {
  data: Prisma.ProcessFolderCreateManyCreatorInput | Prisma.ProcessFolderCreateManyCreatorInput[]
  skipDuplicates?: boolean
}

export type ProcessFolderUpsertWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.ProcessFolderWhereUniqueInput
  update: Prisma.XOR<Prisma.ProcessFolderUpdateWithoutCreatorInput, Prisma.ProcessFolderUncheckedUpdateWithoutCreatorInput>
  create: Prisma.XOR<Prisma.ProcessFolderCreateWithoutCreatorInput, Prisma.ProcessFolderUncheckedCreateWithoutCreatorInput>
}

export type ProcessFolderUpdateWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.ProcessFolderWhereUniqueInput
  data: Prisma.XOR<Prisma.ProcessFolderUpdateWithoutCreatorInput, Prisma.ProcessFolderUncheckedUpdateWithoutCreatorInput>
}

export type ProcessFolderUpdateManyWithWhereWithoutCreatorInput = {
  where: Prisma.ProcessFolderScalarWhereInput
  data: Prisma.XOR<Prisma.ProcessFolderUpdateManyMutationInput, Prisma.ProcessFolderUncheckedUpdateManyWithoutCreatorInput>
}

export type ProcessFolderScalarWhereInput = {
  AND?: Prisma.ProcessFolderScalarWhereInput | Prisma.ProcessFolderScalarWhereInput[]
  OR?: Prisma.ProcessFolderScalarWhereInput[]
  NOT?: Prisma.ProcessFolderScalarWhereInput | Prisma.ProcessFolderScalarWhereInput[]
  id?: Prisma.UuidFilter<"ProcessFolder"> | string
  name?: Prisma.StringFilter<"ProcessFolder"> | string
  description?: Prisma.StringNullableFilter<"ProcessFolder"> | string | null
  creatorId?: Prisma.UuidFilter<"ProcessFolder"> | string
  createdAt?: Prisma.DateTimeFilter<"ProcessFolder"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProcessFolder"> | Date | string
}

export type ProcessFolderCreateWithoutProcessesInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creator: Prisma.UserCreateNestedOneWithoutCreatedProcessFoldersInput
}

export type ProcessFolderUncheckedCreateWithoutProcessesInput = {
  id?: string
  name: string
  description?: string | null
  creatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProcessFolderCreateOrConnectWithoutProcessesInput = {
  where: Prisma.ProcessFolderWhereUniqueInput
  create: Prisma.XOR<Prisma.ProcessFolderCreateWithoutProcessesInput, Prisma.ProcessFolderUncheckedCreateWithoutProcessesInput>
}

export type ProcessFolderUpsertWithoutProcessesInput = {
  update: Prisma.XOR<Prisma.ProcessFolderUpdateWithoutProcessesInput, Prisma.ProcessFolderUncheckedUpdateWithoutProcessesInput>
  create: Prisma.XOR<Prisma.ProcessFolderCreateWithoutProcessesInput, Prisma.ProcessFolderUncheckedCreateWithoutProcessesInput>
  where?: Prisma.ProcessFolderWhereInput
}

export type ProcessFolderUpdateToOneWithWhereWithoutProcessesInput = {
  where?: Prisma.ProcessFolderWhereInput
  data: Prisma.XOR<Prisma.ProcessFolderUpdateWithoutProcessesInput, Prisma.ProcessFolderUncheckedUpdateWithoutProcessesInput>
}

export type ProcessFolderUpdateWithoutProcessesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator?: Prisma.UserUpdateOneRequiredWithoutCreatedProcessFoldersNestedInput
}

export type ProcessFolderUncheckedUpdateWithoutProcessesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessFolderCreateManyCreatorInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProcessFolderUpdateWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  processes?: Prisma.ProcessUpdateManyWithoutProcessFolderNestedInput
}

export type ProcessFolderUncheckedUpdateWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  processes?: Prisma.ProcessUncheckedUpdateManyWithoutProcessFolderNestedInput
}

export type ProcessFolderUncheckedUpdateManyWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ProcessFolderCountOutputType
 */

export type ProcessFolderCountOutputType = {
  processes: number
}

export type ProcessFolderCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  processes?: boolean | ProcessFolderCountOutputTypeCountProcessesArgs
}

/**
 * ProcessFolderCountOutputType without action
 */
export type ProcessFolderCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessFolderCountOutputType
   */
  select?: Prisma.ProcessFolderCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProcessFolderCountOutputType without action
 */
export type ProcessFolderCountOutputTypeCountProcessesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProcessWhereInput
}


export type ProcessFolderSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  creatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  processes?: boolean | Prisma.ProcessFolder$processesArgs<ExtArgs>
  _count?: boolean | Prisma.ProcessFolderCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["processFolder"]>

export type ProcessFolderSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  creatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["processFolder"]>

export type ProcessFolderSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  creatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["processFolder"]>

export type ProcessFolderSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  creatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProcessFolderOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "creatorId" | "createdAt" | "updatedAt", ExtArgs["result"]["processFolder"]>
export type ProcessFolderInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  processes?: boolean | Prisma.ProcessFolder$processesArgs<ExtArgs>
  _count?: boolean | Prisma.ProcessFolderCountOutputTypeDefaultArgs<ExtArgs>
}
export type ProcessFolderIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ProcessFolderIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ProcessFolderPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProcessFolder"
  objects: {
    creator: Prisma.$UserPayload<ExtArgs>
    processes: Prisma.$ProcessPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    creatorId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["processFolder"]>
  composites: {}
}

export type ProcessFolderGetPayload<S extends boolean | null | undefined | ProcessFolderDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProcessFolderPayload, S>

export type ProcessFolderCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProcessFolderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: ProcessFolderCountAggregateInputType | true
  }

export interface ProcessFolderDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProcessFolder'], meta: { name: 'ProcessFolder' } }
  /**
   * Find zero or one ProcessFolder that matches the filter.
   * @param {ProcessFolderFindUniqueArgs} args - Arguments to find a ProcessFolder
   * @example
   * // Get one ProcessFolder
   * const processFolder = await prisma.processFolder.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProcessFolderFindUniqueArgs>(args: Prisma.SelectSubset<T, ProcessFolderFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProcessFolderClient<runtime.Types.Result.GetResult<Prisma.$ProcessFolderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProcessFolder that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProcessFolderFindUniqueOrThrowArgs} args - Arguments to find a ProcessFolder
   * @example
   * // Get one ProcessFolder
   * const processFolder = await prisma.processFolder.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProcessFolderFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProcessFolderFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProcessFolderClient<runtime.Types.Result.GetResult<Prisma.$ProcessFolderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProcessFolder that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessFolderFindFirstArgs} args - Arguments to find a ProcessFolder
   * @example
   * // Get one ProcessFolder
   * const processFolder = await prisma.processFolder.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProcessFolderFindFirstArgs>(args?: Prisma.SelectSubset<T, ProcessFolderFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProcessFolderClient<runtime.Types.Result.GetResult<Prisma.$ProcessFolderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProcessFolder that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessFolderFindFirstOrThrowArgs} args - Arguments to find a ProcessFolder
   * @example
   * // Get one ProcessFolder
   * const processFolder = await prisma.processFolder.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProcessFolderFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProcessFolderFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProcessFolderClient<runtime.Types.Result.GetResult<Prisma.$ProcessFolderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProcessFolders that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessFolderFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProcessFolders
   * const processFolders = await prisma.processFolder.findMany()
   * 
   * // Get first 10 ProcessFolders
   * const processFolders = await prisma.processFolder.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const processFolderWithIdOnly = await prisma.processFolder.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProcessFolderFindManyArgs>(args?: Prisma.SelectSubset<T, ProcessFolderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessFolderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProcessFolder.
   * @param {ProcessFolderCreateArgs} args - Arguments to create a ProcessFolder.
   * @example
   * // Create one ProcessFolder
   * const ProcessFolder = await prisma.processFolder.create({
   *   data: {
   *     // ... data to create a ProcessFolder
   *   }
   * })
   * 
   */
  create<T extends ProcessFolderCreateArgs>(args: Prisma.SelectSubset<T, ProcessFolderCreateArgs<ExtArgs>>): Prisma.Prisma__ProcessFolderClient<runtime.Types.Result.GetResult<Prisma.$ProcessFolderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProcessFolders.
   * @param {ProcessFolderCreateManyArgs} args - Arguments to create many ProcessFolders.
   * @example
   * // Create many ProcessFolders
   * const processFolder = await prisma.processFolder.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProcessFolderCreateManyArgs>(args?: Prisma.SelectSubset<T, ProcessFolderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProcessFolders and returns the data saved in the database.
   * @param {ProcessFolderCreateManyAndReturnArgs} args - Arguments to create many ProcessFolders.
   * @example
   * // Create many ProcessFolders
   * const processFolder = await prisma.processFolder.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProcessFolders and only return the `id`
   * const processFolderWithIdOnly = await prisma.processFolder.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProcessFolderCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProcessFolderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessFolderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProcessFolder.
   * @param {ProcessFolderDeleteArgs} args - Arguments to delete one ProcessFolder.
   * @example
   * // Delete one ProcessFolder
   * const ProcessFolder = await prisma.processFolder.delete({
   *   where: {
   *     // ... filter to delete one ProcessFolder
   *   }
   * })
   * 
   */
  delete<T extends ProcessFolderDeleteArgs>(args: Prisma.SelectSubset<T, ProcessFolderDeleteArgs<ExtArgs>>): Prisma.Prisma__ProcessFolderClient<runtime.Types.Result.GetResult<Prisma.$ProcessFolderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProcessFolder.
   * @param {ProcessFolderUpdateArgs} args - Arguments to update one ProcessFolder.
   * @example
   * // Update one ProcessFolder
   * const processFolder = await prisma.processFolder.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProcessFolderUpdateArgs>(args: Prisma.SelectSubset<T, ProcessFolderUpdateArgs<ExtArgs>>): Prisma.Prisma__ProcessFolderClient<runtime.Types.Result.GetResult<Prisma.$ProcessFolderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProcessFolders.
   * @param {ProcessFolderDeleteManyArgs} args - Arguments to filter ProcessFolders to delete.
   * @example
   * // Delete a few ProcessFolders
   * const { count } = await prisma.processFolder.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProcessFolderDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProcessFolderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProcessFolders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessFolderUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProcessFolders
   * const processFolder = await prisma.processFolder.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProcessFolderUpdateManyArgs>(args: Prisma.SelectSubset<T, ProcessFolderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProcessFolders and returns the data updated in the database.
   * @param {ProcessFolderUpdateManyAndReturnArgs} args - Arguments to update many ProcessFolders.
   * @example
   * // Update many ProcessFolders
   * const processFolder = await prisma.processFolder.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProcessFolders and only return the `id`
   * const processFolderWithIdOnly = await prisma.processFolder.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProcessFolderUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProcessFolderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessFolderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProcessFolder.
   * @param {ProcessFolderUpsertArgs} args - Arguments to update or create a ProcessFolder.
   * @example
   * // Update or create a ProcessFolder
   * const processFolder = await prisma.processFolder.upsert({
   *   create: {
   *     // ... data to create a ProcessFolder
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProcessFolder we want to update
   *   }
   * })
   */
  upsert<T extends ProcessFolderUpsertArgs>(args: Prisma.SelectSubset<T, ProcessFolderUpsertArgs<ExtArgs>>): Prisma.Prisma__ProcessFolderClient<runtime.Types.Result.GetResult<Prisma.$ProcessFolderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProcessFolders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessFolderCountArgs} args - Arguments to filter ProcessFolders to count.
   * @example
   * // Count the number of ProcessFolders
   * const count = await prisma.processFolder.count({
   *   where: {
   *     // ... the filter for the ProcessFolders we want to count
   *   }
   * })
  **/
  count<T extends ProcessFolderCountArgs>(
    args?: Prisma.Subset<T, ProcessFolderCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProcessFolderCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProcessFolder.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessFolderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProcessFolderAggregateArgs>(args: Prisma.Subset<T, ProcessFolderAggregateArgs>): Prisma.PrismaPromise<GetProcessFolderAggregateType<T>>

  /**
   * Group by ProcessFolder.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessFolderGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProcessFolderGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProcessFolderGroupByArgs['orderBy'] }
      : { orderBy?: ProcessFolderGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProcessFolderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcessFolderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProcessFolder model
 */
readonly fields: ProcessFolderFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProcessFolder.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProcessFolderClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  creator<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  processes<T extends Prisma.ProcessFolder$processesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProcessFolder$processesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProcessFolder model
 */
export interface ProcessFolderFieldRefs {
  readonly id: Prisma.FieldRef<"ProcessFolder", 'String'>
  readonly name: Prisma.FieldRef<"ProcessFolder", 'String'>
  readonly description: Prisma.FieldRef<"ProcessFolder", 'String'>
  readonly creatorId: Prisma.FieldRef<"ProcessFolder", 'String'>
  readonly createdAt: Prisma.FieldRef<"ProcessFolder", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ProcessFolder", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProcessFolder findUnique
 */
export type ProcessFolderFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessFolder
   */
  select?: Prisma.ProcessFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessFolder
   */
  omit?: Prisma.ProcessFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFolderInclude<ExtArgs> | null
  /**
   * Filter, which ProcessFolder to fetch.
   */
  where: Prisma.ProcessFolderWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessFolder findUniqueOrThrow
 */
export type ProcessFolderFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessFolder
   */
  select?: Prisma.ProcessFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessFolder
   */
  omit?: Prisma.ProcessFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFolderInclude<ExtArgs> | null
  /**
   * Filter, which ProcessFolder to fetch.
   */
  where: Prisma.ProcessFolderWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessFolder findFirst
 */
export type ProcessFolderFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessFolder
   */
  select?: Prisma.ProcessFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessFolder
   */
  omit?: Prisma.ProcessFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFolderInclude<ExtArgs> | null
  /**
   * Filter, which ProcessFolder to fetch.
   */
  where?: Prisma.ProcessFolderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessFolders to fetch.
   */
  orderBy?: Prisma.ProcessFolderOrderByWithRelationInput | Prisma.ProcessFolderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProcessFolders.
   */
  cursor?: Prisma.ProcessFolderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessFolders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessFolders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProcessFolders.
   */
  distinct?: Prisma.ProcessFolderScalarFieldEnum | Prisma.ProcessFolderScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessFolder findFirstOrThrow
 */
export type ProcessFolderFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessFolder
   */
  select?: Prisma.ProcessFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessFolder
   */
  omit?: Prisma.ProcessFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFolderInclude<ExtArgs> | null
  /**
   * Filter, which ProcessFolder to fetch.
   */
  where?: Prisma.ProcessFolderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessFolders to fetch.
   */
  orderBy?: Prisma.ProcessFolderOrderByWithRelationInput | Prisma.ProcessFolderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProcessFolders.
   */
  cursor?: Prisma.ProcessFolderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessFolders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessFolders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProcessFolders.
   */
  distinct?: Prisma.ProcessFolderScalarFieldEnum | Prisma.ProcessFolderScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessFolder findMany
 */
export type ProcessFolderFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessFolder
   */
  select?: Prisma.ProcessFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessFolder
   */
  omit?: Prisma.ProcessFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFolderInclude<ExtArgs> | null
  /**
   * Filter, which ProcessFolders to fetch.
   */
  where?: Prisma.ProcessFolderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessFolders to fetch.
   */
  orderBy?: Prisma.ProcessFolderOrderByWithRelationInput | Prisma.ProcessFolderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProcessFolders.
   */
  cursor?: Prisma.ProcessFolderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessFolders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessFolders.
   */
  skip?: number
  distinct?: Prisma.ProcessFolderScalarFieldEnum | Prisma.ProcessFolderScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessFolder create
 */
export type ProcessFolderCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessFolder
   */
  select?: Prisma.ProcessFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessFolder
   */
  omit?: Prisma.ProcessFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFolderInclude<ExtArgs> | null
  /**
   * The data needed to create a ProcessFolder.
   */
  data: Prisma.XOR<Prisma.ProcessFolderCreateInput, Prisma.ProcessFolderUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessFolder createMany
 */
export type ProcessFolderCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProcessFolders.
   */
  data: Prisma.ProcessFolderCreateManyInput | Prisma.ProcessFolderCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProcessFolder createManyAndReturn
 */
export type ProcessFolderCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessFolder
   */
  select?: Prisma.ProcessFolderSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessFolder
   */
  omit?: Prisma.ProcessFolderOmit<ExtArgs> | null
  /**
   * The data used to create many ProcessFolders.
   */
  data: Prisma.ProcessFolderCreateManyInput | Prisma.ProcessFolderCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFolderIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProcessFolder update
 */
export type ProcessFolderUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessFolder
   */
  select?: Prisma.ProcessFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessFolder
   */
  omit?: Prisma.ProcessFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFolderInclude<ExtArgs> | null
  /**
   * The data needed to update a ProcessFolder.
   */
  data: Prisma.XOR<Prisma.ProcessFolderUpdateInput, Prisma.ProcessFolderUncheckedUpdateInput>
  /**
   * Choose, which ProcessFolder to update.
   */
  where: Prisma.ProcessFolderWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessFolder updateMany
 */
export type ProcessFolderUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProcessFolders.
   */
  data: Prisma.XOR<Prisma.ProcessFolderUpdateManyMutationInput, Prisma.ProcessFolderUncheckedUpdateManyInput>
  /**
   * Filter which ProcessFolders to update
   */
  where?: Prisma.ProcessFolderWhereInput
  /**
   * Limit how many ProcessFolders to update.
   */
  limit?: number
}

/**
 * ProcessFolder updateManyAndReturn
 */
export type ProcessFolderUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessFolder
   */
  select?: Prisma.ProcessFolderSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessFolder
   */
  omit?: Prisma.ProcessFolderOmit<ExtArgs> | null
  /**
   * The data used to update ProcessFolders.
   */
  data: Prisma.XOR<Prisma.ProcessFolderUpdateManyMutationInput, Prisma.ProcessFolderUncheckedUpdateManyInput>
  /**
   * Filter which ProcessFolders to update
   */
  where?: Prisma.ProcessFolderWhereInput
  /**
   * Limit how many ProcessFolders to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFolderIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProcessFolder upsert
 */
export type ProcessFolderUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessFolder
   */
  select?: Prisma.ProcessFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessFolder
   */
  omit?: Prisma.ProcessFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFolderInclude<ExtArgs> | null
  /**
   * The filter to search for the ProcessFolder to update in case it exists.
   */
  where: Prisma.ProcessFolderWhereUniqueInput
  /**
   * In case the ProcessFolder found by the `where` argument doesn't exist, create a new ProcessFolder with this data.
   */
  create: Prisma.XOR<Prisma.ProcessFolderCreateInput, Prisma.ProcessFolderUncheckedCreateInput>
  /**
   * In case the ProcessFolder was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProcessFolderUpdateInput, Prisma.ProcessFolderUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessFolder delete
 */
export type ProcessFolderDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessFolder
   */
  select?: Prisma.ProcessFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessFolder
   */
  omit?: Prisma.ProcessFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFolderInclude<ExtArgs> | null
  /**
   * Filter which ProcessFolder to delete.
   */
  where: Prisma.ProcessFolderWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessFolder deleteMany
 */
export type ProcessFolderDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProcessFolders to delete
   */
  where?: Prisma.ProcessFolderWhereInput
  /**
   * Limit how many ProcessFolders to delete.
   */
  limit?: number
}

/**
 * ProcessFolder.processes
 */
export type ProcessFolder$processesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Process
   */
  select?: Prisma.ProcessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Process
   */
  omit?: Prisma.ProcessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessInclude<ExtArgs> | null
  where?: Prisma.ProcessWhereInput
  orderBy?: Prisma.ProcessOrderByWithRelationInput | Prisma.ProcessOrderByWithRelationInput[]
  cursor?: Prisma.ProcessWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProcessScalarFieldEnum | Prisma.ProcessScalarFieldEnum[]
}

/**
 * ProcessFolder without action
 */
export type ProcessFolderDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessFolder
   */
  select?: Prisma.ProcessFolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessFolder
   */
  omit?: Prisma.ProcessFolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFolderInclude<ExtArgs> | null
}
