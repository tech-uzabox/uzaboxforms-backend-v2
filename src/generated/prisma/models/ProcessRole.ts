
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProcessRole` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model ProcessRole
 * 
 */
export type ProcessRoleModel = runtime.Types.Result.DefaultSelection<Prisma.$ProcessRolePayload>

export type AggregateProcessRole = {
  _count: ProcessRoleCountAggregateOutputType | null
  _min: ProcessRoleMinAggregateOutputType | null
  _max: ProcessRoleMaxAggregateOutputType | null
}

export type ProcessRoleMinAggregateOutputType = {
  processId: string | null
  roleId: string | null
  status: $Enums.RoleStatus | null
}

export type ProcessRoleMaxAggregateOutputType = {
  processId: string | null
  roleId: string | null
  status: $Enums.RoleStatus | null
}

export type ProcessRoleCountAggregateOutputType = {
  processId: number
  roleId: number
  status: number
  _all: number
}


export type ProcessRoleMinAggregateInputType = {
  processId?: true
  roleId?: true
  status?: true
}

export type ProcessRoleMaxAggregateInputType = {
  processId?: true
  roleId?: true
  status?: true
}

export type ProcessRoleCountAggregateInputType = {
  processId?: true
  roleId?: true
  status?: true
  _all?: true
}

export type ProcessRoleAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProcessRole to aggregate.
   */
  where?: Prisma.ProcessRoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessRoles to fetch.
   */
  orderBy?: Prisma.ProcessRoleOrderByWithRelationInput | Prisma.ProcessRoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProcessRoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessRoles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProcessRoles
  **/
  _count?: true | ProcessRoleCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProcessRoleMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProcessRoleMaxAggregateInputType
}

export type GetProcessRoleAggregateType<T extends ProcessRoleAggregateArgs> = {
      [P in keyof T & keyof AggregateProcessRole]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProcessRole[P]>
    : Prisma.GetScalarType<T[P], AggregateProcessRole[P]>
}




export type ProcessRoleGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProcessRoleWhereInput
  orderBy?: Prisma.ProcessRoleOrderByWithAggregationInput | Prisma.ProcessRoleOrderByWithAggregationInput[]
  by: Prisma.ProcessRoleScalarFieldEnum[] | Prisma.ProcessRoleScalarFieldEnum
  having?: Prisma.ProcessRoleScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProcessRoleCountAggregateInputType | true
  _min?: ProcessRoleMinAggregateInputType
  _max?: ProcessRoleMaxAggregateInputType
}

export type ProcessRoleGroupByOutputType = {
  processId: string
  roleId: string
  status: $Enums.RoleStatus
  _count: ProcessRoleCountAggregateOutputType | null
  _min: ProcessRoleMinAggregateOutputType | null
  _max: ProcessRoleMaxAggregateOutputType | null
}

type GetProcessRoleGroupByPayload<T extends ProcessRoleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProcessRoleGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProcessRoleGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProcessRoleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProcessRoleGroupByOutputType[P]>
      }
    >
  >



export type ProcessRoleWhereInput = {
  AND?: Prisma.ProcessRoleWhereInput | Prisma.ProcessRoleWhereInput[]
  OR?: Prisma.ProcessRoleWhereInput[]
  NOT?: Prisma.ProcessRoleWhereInput | Prisma.ProcessRoleWhereInput[]
  processId?: Prisma.UuidFilter<"ProcessRole"> | string
  roleId?: Prisma.UuidFilter<"ProcessRole"> | string
  status?: Prisma.EnumRoleStatusFilter<"ProcessRole"> | $Enums.RoleStatus
  process?: Prisma.XOR<Prisma.ProcessScalarRelationFilter, Prisma.ProcessWhereInput>
  role?: Prisma.XOR<Prisma.RoleScalarRelationFilter, Prisma.RoleWhereInput>
}

export type ProcessRoleOrderByWithRelationInput = {
  processId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  process?: Prisma.ProcessOrderByWithRelationInput
  role?: Prisma.RoleOrderByWithRelationInput
  _relevance?: Prisma.ProcessRoleOrderByRelevanceInput
}

export type ProcessRoleWhereUniqueInput = Prisma.AtLeast<{
  processId_roleId?: Prisma.ProcessRoleProcessIdRoleIdCompoundUniqueInput
  AND?: Prisma.ProcessRoleWhereInput | Prisma.ProcessRoleWhereInput[]
  OR?: Prisma.ProcessRoleWhereInput[]
  NOT?: Prisma.ProcessRoleWhereInput | Prisma.ProcessRoleWhereInput[]
  processId?: Prisma.UuidFilter<"ProcessRole"> | string
  roleId?: Prisma.UuidFilter<"ProcessRole"> | string
  status?: Prisma.EnumRoleStatusFilter<"ProcessRole"> | $Enums.RoleStatus
  process?: Prisma.XOR<Prisma.ProcessScalarRelationFilter, Prisma.ProcessWhereInput>
  role?: Prisma.XOR<Prisma.RoleScalarRelationFilter, Prisma.RoleWhereInput>
}, "processId_roleId">

export type ProcessRoleOrderByWithAggregationInput = {
  processId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  _count?: Prisma.ProcessRoleCountOrderByAggregateInput
  _max?: Prisma.ProcessRoleMaxOrderByAggregateInput
  _min?: Prisma.ProcessRoleMinOrderByAggregateInput
}

export type ProcessRoleScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProcessRoleScalarWhereWithAggregatesInput | Prisma.ProcessRoleScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProcessRoleScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProcessRoleScalarWhereWithAggregatesInput | Prisma.ProcessRoleScalarWhereWithAggregatesInput[]
  processId?: Prisma.UuidWithAggregatesFilter<"ProcessRole"> | string
  roleId?: Prisma.UuidWithAggregatesFilter<"ProcessRole"> | string
  status?: Prisma.EnumRoleStatusWithAggregatesFilter<"ProcessRole"> | $Enums.RoleStatus
}

export type ProcessRoleCreateInput = {
  status?: $Enums.RoleStatus
  process: Prisma.ProcessCreateNestedOneWithoutRolesInput
  role: Prisma.RoleCreateNestedOneWithoutProcessesInput
}

export type ProcessRoleUncheckedCreateInput = {
  processId: string
  roleId: string
  status?: $Enums.RoleStatus
}

export type ProcessRoleUpdateInput = {
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
  process?: Prisma.ProcessUpdateOneRequiredWithoutRolesNestedInput
  role?: Prisma.RoleUpdateOneRequiredWithoutProcessesNestedInput
}

export type ProcessRoleUncheckedUpdateInput = {
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  roleId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
}

export type ProcessRoleCreateManyInput = {
  processId: string
  roleId: string
  status?: $Enums.RoleStatus
}

export type ProcessRoleUpdateManyMutationInput = {
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
}

export type ProcessRoleUncheckedUpdateManyInput = {
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  roleId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
}

export type ProcessRoleListRelationFilter = {
  every?: Prisma.ProcessRoleWhereInput
  some?: Prisma.ProcessRoleWhereInput
  none?: Prisma.ProcessRoleWhereInput
}

export type ProcessRoleOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProcessRoleOrderByRelevanceInput = {
  fields: Prisma.ProcessRoleOrderByRelevanceFieldEnum | Prisma.ProcessRoleOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ProcessRoleProcessIdRoleIdCompoundUniqueInput = {
  processId: string
  roleId: string
}

export type ProcessRoleCountOrderByAggregateInput = {
  processId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type ProcessRoleMaxOrderByAggregateInput = {
  processId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type ProcessRoleMinOrderByAggregateInput = {
  processId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type ProcessRoleCreateNestedManyWithoutRoleInput = {
  create?: Prisma.XOR<Prisma.ProcessRoleCreateWithoutRoleInput, Prisma.ProcessRoleUncheckedCreateWithoutRoleInput> | Prisma.ProcessRoleCreateWithoutRoleInput[] | Prisma.ProcessRoleUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.ProcessRoleCreateOrConnectWithoutRoleInput | Prisma.ProcessRoleCreateOrConnectWithoutRoleInput[]
  createMany?: Prisma.ProcessRoleCreateManyRoleInputEnvelope
  connect?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
}

export type ProcessRoleUncheckedCreateNestedManyWithoutRoleInput = {
  create?: Prisma.XOR<Prisma.ProcessRoleCreateWithoutRoleInput, Prisma.ProcessRoleUncheckedCreateWithoutRoleInput> | Prisma.ProcessRoleCreateWithoutRoleInput[] | Prisma.ProcessRoleUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.ProcessRoleCreateOrConnectWithoutRoleInput | Prisma.ProcessRoleCreateOrConnectWithoutRoleInput[]
  createMany?: Prisma.ProcessRoleCreateManyRoleInputEnvelope
  connect?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
}

export type ProcessRoleUpdateManyWithoutRoleNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessRoleCreateWithoutRoleInput, Prisma.ProcessRoleUncheckedCreateWithoutRoleInput> | Prisma.ProcessRoleCreateWithoutRoleInput[] | Prisma.ProcessRoleUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.ProcessRoleCreateOrConnectWithoutRoleInput | Prisma.ProcessRoleCreateOrConnectWithoutRoleInput[]
  upsert?: Prisma.ProcessRoleUpsertWithWhereUniqueWithoutRoleInput | Prisma.ProcessRoleUpsertWithWhereUniqueWithoutRoleInput[]
  createMany?: Prisma.ProcessRoleCreateManyRoleInputEnvelope
  set?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
  disconnect?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
  delete?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
  connect?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
  update?: Prisma.ProcessRoleUpdateWithWhereUniqueWithoutRoleInput | Prisma.ProcessRoleUpdateWithWhereUniqueWithoutRoleInput[]
  updateMany?: Prisma.ProcessRoleUpdateManyWithWhereWithoutRoleInput | Prisma.ProcessRoleUpdateManyWithWhereWithoutRoleInput[]
  deleteMany?: Prisma.ProcessRoleScalarWhereInput | Prisma.ProcessRoleScalarWhereInput[]
}

export type ProcessRoleUncheckedUpdateManyWithoutRoleNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessRoleCreateWithoutRoleInput, Prisma.ProcessRoleUncheckedCreateWithoutRoleInput> | Prisma.ProcessRoleCreateWithoutRoleInput[] | Prisma.ProcessRoleUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.ProcessRoleCreateOrConnectWithoutRoleInput | Prisma.ProcessRoleCreateOrConnectWithoutRoleInput[]
  upsert?: Prisma.ProcessRoleUpsertWithWhereUniqueWithoutRoleInput | Prisma.ProcessRoleUpsertWithWhereUniqueWithoutRoleInput[]
  createMany?: Prisma.ProcessRoleCreateManyRoleInputEnvelope
  set?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
  disconnect?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
  delete?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
  connect?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
  update?: Prisma.ProcessRoleUpdateWithWhereUniqueWithoutRoleInput | Prisma.ProcessRoleUpdateWithWhereUniqueWithoutRoleInput[]
  updateMany?: Prisma.ProcessRoleUpdateManyWithWhereWithoutRoleInput | Prisma.ProcessRoleUpdateManyWithWhereWithoutRoleInput[]
  deleteMany?: Prisma.ProcessRoleScalarWhereInput | Prisma.ProcessRoleScalarWhereInput[]
}

export type ProcessRoleCreateNestedManyWithoutProcessInput = {
  create?: Prisma.XOR<Prisma.ProcessRoleCreateWithoutProcessInput, Prisma.ProcessRoleUncheckedCreateWithoutProcessInput> | Prisma.ProcessRoleCreateWithoutProcessInput[] | Prisma.ProcessRoleUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.ProcessRoleCreateOrConnectWithoutProcessInput | Prisma.ProcessRoleCreateOrConnectWithoutProcessInput[]
  createMany?: Prisma.ProcessRoleCreateManyProcessInputEnvelope
  connect?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
}

export type ProcessRoleUncheckedCreateNestedManyWithoutProcessInput = {
  create?: Prisma.XOR<Prisma.ProcessRoleCreateWithoutProcessInput, Prisma.ProcessRoleUncheckedCreateWithoutProcessInput> | Prisma.ProcessRoleCreateWithoutProcessInput[] | Prisma.ProcessRoleUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.ProcessRoleCreateOrConnectWithoutProcessInput | Prisma.ProcessRoleCreateOrConnectWithoutProcessInput[]
  createMany?: Prisma.ProcessRoleCreateManyProcessInputEnvelope
  connect?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
}

export type ProcessRoleUpdateManyWithoutProcessNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessRoleCreateWithoutProcessInput, Prisma.ProcessRoleUncheckedCreateWithoutProcessInput> | Prisma.ProcessRoleCreateWithoutProcessInput[] | Prisma.ProcessRoleUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.ProcessRoleCreateOrConnectWithoutProcessInput | Prisma.ProcessRoleCreateOrConnectWithoutProcessInput[]
  upsert?: Prisma.ProcessRoleUpsertWithWhereUniqueWithoutProcessInput | Prisma.ProcessRoleUpsertWithWhereUniqueWithoutProcessInput[]
  createMany?: Prisma.ProcessRoleCreateManyProcessInputEnvelope
  set?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
  disconnect?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
  delete?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
  connect?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
  update?: Prisma.ProcessRoleUpdateWithWhereUniqueWithoutProcessInput | Prisma.ProcessRoleUpdateWithWhereUniqueWithoutProcessInput[]
  updateMany?: Prisma.ProcessRoleUpdateManyWithWhereWithoutProcessInput | Prisma.ProcessRoleUpdateManyWithWhereWithoutProcessInput[]
  deleteMany?: Prisma.ProcessRoleScalarWhereInput | Prisma.ProcessRoleScalarWhereInput[]
}

export type ProcessRoleUncheckedUpdateManyWithoutProcessNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessRoleCreateWithoutProcessInput, Prisma.ProcessRoleUncheckedCreateWithoutProcessInput> | Prisma.ProcessRoleCreateWithoutProcessInput[] | Prisma.ProcessRoleUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.ProcessRoleCreateOrConnectWithoutProcessInput | Prisma.ProcessRoleCreateOrConnectWithoutProcessInput[]
  upsert?: Prisma.ProcessRoleUpsertWithWhereUniqueWithoutProcessInput | Prisma.ProcessRoleUpsertWithWhereUniqueWithoutProcessInput[]
  createMany?: Prisma.ProcessRoleCreateManyProcessInputEnvelope
  set?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
  disconnect?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
  delete?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
  connect?: Prisma.ProcessRoleWhereUniqueInput | Prisma.ProcessRoleWhereUniqueInput[]
  update?: Prisma.ProcessRoleUpdateWithWhereUniqueWithoutProcessInput | Prisma.ProcessRoleUpdateWithWhereUniqueWithoutProcessInput[]
  updateMany?: Prisma.ProcessRoleUpdateManyWithWhereWithoutProcessInput | Prisma.ProcessRoleUpdateManyWithWhereWithoutProcessInput[]
  deleteMany?: Prisma.ProcessRoleScalarWhereInput | Prisma.ProcessRoleScalarWhereInput[]
}

export type ProcessRoleCreateWithoutRoleInput = {
  status?: $Enums.RoleStatus
  process: Prisma.ProcessCreateNestedOneWithoutRolesInput
}

export type ProcessRoleUncheckedCreateWithoutRoleInput = {
  processId: string
  status?: $Enums.RoleStatus
}

export type ProcessRoleCreateOrConnectWithoutRoleInput = {
  where: Prisma.ProcessRoleWhereUniqueInput
  create: Prisma.XOR<Prisma.ProcessRoleCreateWithoutRoleInput, Prisma.ProcessRoleUncheckedCreateWithoutRoleInput>
}

export type ProcessRoleCreateManyRoleInputEnvelope = {
  data: Prisma.ProcessRoleCreateManyRoleInput | Prisma.ProcessRoleCreateManyRoleInput[]
  skipDuplicates?: boolean
}

export type ProcessRoleUpsertWithWhereUniqueWithoutRoleInput = {
  where: Prisma.ProcessRoleWhereUniqueInput
  update: Prisma.XOR<Prisma.ProcessRoleUpdateWithoutRoleInput, Prisma.ProcessRoleUncheckedUpdateWithoutRoleInput>
  create: Prisma.XOR<Prisma.ProcessRoleCreateWithoutRoleInput, Prisma.ProcessRoleUncheckedCreateWithoutRoleInput>
}

export type ProcessRoleUpdateWithWhereUniqueWithoutRoleInput = {
  where: Prisma.ProcessRoleWhereUniqueInput
  data: Prisma.XOR<Prisma.ProcessRoleUpdateWithoutRoleInput, Prisma.ProcessRoleUncheckedUpdateWithoutRoleInput>
}

export type ProcessRoleUpdateManyWithWhereWithoutRoleInput = {
  where: Prisma.ProcessRoleScalarWhereInput
  data: Prisma.XOR<Prisma.ProcessRoleUpdateManyMutationInput, Prisma.ProcessRoleUncheckedUpdateManyWithoutRoleInput>
}

export type ProcessRoleScalarWhereInput = {
  AND?: Prisma.ProcessRoleScalarWhereInput | Prisma.ProcessRoleScalarWhereInput[]
  OR?: Prisma.ProcessRoleScalarWhereInput[]
  NOT?: Prisma.ProcessRoleScalarWhereInput | Prisma.ProcessRoleScalarWhereInput[]
  processId?: Prisma.UuidFilter<"ProcessRole"> | string
  roleId?: Prisma.UuidFilter<"ProcessRole"> | string
  status?: Prisma.EnumRoleStatusFilter<"ProcessRole"> | $Enums.RoleStatus
}

export type ProcessRoleCreateWithoutProcessInput = {
  status?: $Enums.RoleStatus
  role: Prisma.RoleCreateNestedOneWithoutProcessesInput
}

export type ProcessRoleUncheckedCreateWithoutProcessInput = {
  roleId: string
  status?: $Enums.RoleStatus
}

export type ProcessRoleCreateOrConnectWithoutProcessInput = {
  where: Prisma.ProcessRoleWhereUniqueInput
  create: Prisma.XOR<Prisma.ProcessRoleCreateWithoutProcessInput, Prisma.ProcessRoleUncheckedCreateWithoutProcessInput>
}

export type ProcessRoleCreateManyProcessInputEnvelope = {
  data: Prisma.ProcessRoleCreateManyProcessInput | Prisma.ProcessRoleCreateManyProcessInput[]
  skipDuplicates?: boolean
}

export type ProcessRoleUpsertWithWhereUniqueWithoutProcessInput = {
  where: Prisma.ProcessRoleWhereUniqueInput
  update: Prisma.XOR<Prisma.ProcessRoleUpdateWithoutProcessInput, Prisma.ProcessRoleUncheckedUpdateWithoutProcessInput>
  create: Prisma.XOR<Prisma.ProcessRoleCreateWithoutProcessInput, Prisma.ProcessRoleUncheckedCreateWithoutProcessInput>
}

export type ProcessRoleUpdateWithWhereUniqueWithoutProcessInput = {
  where: Prisma.ProcessRoleWhereUniqueInput
  data: Prisma.XOR<Prisma.ProcessRoleUpdateWithoutProcessInput, Prisma.ProcessRoleUncheckedUpdateWithoutProcessInput>
}

export type ProcessRoleUpdateManyWithWhereWithoutProcessInput = {
  where: Prisma.ProcessRoleScalarWhereInput
  data: Prisma.XOR<Prisma.ProcessRoleUpdateManyMutationInput, Prisma.ProcessRoleUncheckedUpdateManyWithoutProcessInput>
}

export type ProcessRoleCreateManyRoleInput = {
  processId: string
  status?: $Enums.RoleStatus
}

export type ProcessRoleUpdateWithoutRoleInput = {
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
  process?: Prisma.ProcessUpdateOneRequiredWithoutRolesNestedInput
}

export type ProcessRoleUncheckedUpdateWithoutRoleInput = {
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
}

export type ProcessRoleUncheckedUpdateManyWithoutRoleInput = {
  processId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
}

export type ProcessRoleCreateManyProcessInput = {
  roleId: string
  status?: $Enums.RoleStatus
}

export type ProcessRoleUpdateWithoutProcessInput = {
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
  role?: Prisma.RoleUpdateOneRequiredWithoutProcessesNestedInput
}

export type ProcessRoleUncheckedUpdateWithoutProcessInput = {
  roleId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
}

export type ProcessRoleUncheckedUpdateManyWithoutProcessInput = {
  roleId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumRoleStatusFieldUpdateOperationsInput | $Enums.RoleStatus
}



export type ProcessRoleSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  processId?: boolean
  roleId?: boolean
  status?: boolean
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["processRole"]>

export type ProcessRoleSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  processId?: boolean
  roleId?: boolean
  status?: boolean
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["processRole"]>

export type ProcessRoleSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  processId?: boolean
  roleId?: boolean
  status?: boolean
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["processRole"]>

export type ProcessRoleSelectScalar = {
  processId?: boolean
  roleId?: boolean
  status?: boolean
}

export type ProcessRoleOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"processId" | "roleId" | "status", ExtArgs["result"]["processRole"]>
export type ProcessRoleInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}
export type ProcessRoleIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}
export type ProcessRoleIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}

export type $ProcessRolePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProcessRole"
  objects: {
    process: Prisma.$ProcessPayload<ExtArgs>
    role: Prisma.$RolePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    processId: string
    roleId: string
    status: $Enums.RoleStatus
  }, ExtArgs["result"]["processRole"]>
  composites: {}
}

export type ProcessRoleGetPayload<S extends boolean | null | undefined | ProcessRoleDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProcessRolePayload, S>

export type ProcessRoleCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProcessRoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: ProcessRoleCountAggregateInputType | true
  }

export interface ProcessRoleDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProcessRole'], meta: { name: 'ProcessRole' } }
  /**
   * Find zero or one ProcessRole that matches the filter.
   * @param {ProcessRoleFindUniqueArgs} args - Arguments to find a ProcessRole
   * @example
   * // Get one ProcessRole
   * const processRole = await prisma.processRole.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProcessRoleFindUniqueArgs>(args: Prisma.SelectSubset<T, ProcessRoleFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProcessRoleClient<runtime.Types.Result.GetResult<Prisma.$ProcessRolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProcessRole that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProcessRoleFindUniqueOrThrowArgs} args - Arguments to find a ProcessRole
   * @example
   * // Get one ProcessRole
   * const processRole = await prisma.processRole.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProcessRoleFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProcessRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProcessRoleClient<runtime.Types.Result.GetResult<Prisma.$ProcessRolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProcessRole that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessRoleFindFirstArgs} args - Arguments to find a ProcessRole
   * @example
   * // Get one ProcessRole
   * const processRole = await prisma.processRole.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProcessRoleFindFirstArgs>(args?: Prisma.SelectSubset<T, ProcessRoleFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProcessRoleClient<runtime.Types.Result.GetResult<Prisma.$ProcessRolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProcessRole that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessRoleFindFirstOrThrowArgs} args - Arguments to find a ProcessRole
   * @example
   * // Get one ProcessRole
   * const processRole = await prisma.processRole.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProcessRoleFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProcessRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProcessRoleClient<runtime.Types.Result.GetResult<Prisma.$ProcessRolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProcessRoles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessRoleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProcessRoles
   * const processRoles = await prisma.processRole.findMany()
   * 
   * // Get first 10 ProcessRoles
   * const processRoles = await prisma.processRole.findMany({ take: 10 })
   * 
   * // Only select the `processId`
   * const processRoleWithProcessIdOnly = await prisma.processRole.findMany({ select: { processId: true } })
   * 
   */
  findMany<T extends ProcessRoleFindManyArgs>(args?: Prisma.SelectSubset<T, ProcessRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProcessRole.
   * @param {ProcessRoleCreateArgs} args - Arguments to create a ProcessRole.
   * @example
   * // Create one ProcessRole
   * const ProcessRole = await prisma.processRole.create({
   *   data: {
   *     // ... data to create a ProcessRole
   *   }
   * })
   * 
   */
  create<T extends ProcessRoleCreateArgs>(args: Prisma.SelectSubset<T, ProcessRoleCreateArgs<ExtArgs>>): Prisma.Prisma__ProcessRoleClient<runtime.Types.Result.GetResult<Prisma.$ProcessRolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProcessRoles.
   * @param {ProcessRoleCreateManyArgs} args - Arguments to create many ProcessRoles.
   * @example
   * // Create many ProcessRoles
   * const processRole = await prisma.processRole.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProcessRoleCreateManyArgs>(args?: Prisma.SelectSubset<T, ProcessRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProcessRoles and returns the data saved in the database.
   * @param {ProcessRoleCreateManyAndReturnArgs} args - Arguments to create many ProcessRoles.
   * @example
   * // Create many ProcessRoles
   * const processRole = await prisma.processRole.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProcessRoles and only return the `processId`
   * const processRoleWithProcessIdOnly = await prisma.processRole.createManyAndReturn({
   *   select: { processId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProcessRoleCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProcessRoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessRolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProcessRole.
   * @param {ProcessRoleDeleteArgs} args - Arguments to delete one ProcessRole.
   * @example
   * // Delete one ProcessRole
   * const ProcessRole = await prisma.processRole.delete({
   *   where: {
   *     // ... filter to delete one ProcessRole
   *   }
   * })
   * 
   */
  delete<T extends ProcessRoleDeleteArgs>(args: Prisma.SelectSubset<T, ProcessRoleDeleteArgs<ExtArgs>>): Prisma.Prisma__ProcessRoleClient<runtime.Types.Result.GetResult<Prisma.$ProcessRolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProcessRole.
   * @param {ProcessRoleUpdateArgs} args - Arguments to update one ProcessRole.
   * @example
   * // Update one ProcessRole
   * const processRole = await prisma.processRole.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProcessRoleUpdateArgs>(args: Prisma.SelectSubset<T, ProcessRoleUpdateArgs<ExtArgs>>): Prisma.Prisma__ProcessRoleClient<runtime.Types.Result.GetResult<Prisma.$ProcessRolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProcessRoles.
   * @param {ProcessRoleDeleteManyArgs} args - Arguments to filter ProcessRoles to delete.
   * @example
   * // Delete a few ProcessRoles
   * const { count } = await prisma.processRole.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProcessRoleDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProcessRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProcessRoles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessRoleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProcessRoles
   * const processRole = await prisma.processRole.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProcessRoleUpdateManyArgs>(args: Prisma.SelectSubset<T, ProcessRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProcessRoles and returns the data updated in the database.
   * @param {ProcessRoleUpdateManyAndReturnArgs} args - Arguments to update many ProcessRoles.
   * @example
   * // Update many ProcessRoles
   * const processRole = await prisma.processRole.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProcessRoles and only return the `processId`
   * const processRoleWithProcessIdOnly = await prisma.processRole.updateManyAndReturn({
   *   select: { processId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProcessRoleUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProcessRoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessRolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProcessRole.
   * @param {ProcessRoleUpsertArgs} args - Arguments to update or create a ProcessRole.
   * @example
   * // Update or create a ProcessRole
   * const processRole = await prisma.processRole.upsert({
   *   create: {
   *     // ... data to create a ProcessRole
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProcessRole we want to update
   *   }
   * })
   */
  upsert<T extends ProcessRoleUpsertArgs>(args: Prisma.SelectSubset<T, ProcessRoleUpsertArgs<ExtArgs>>): Prisma.Prisma__ProcessRoleClient<runtime.Types.Result.GetResult<Prisma.$ProcessRolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProcessRoles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessRoleCountArgs} args - Arguments to filter ProcessRoles to count.
   * @example
   * // Count the number of ProcessRoles
   * const count = await prisma.processRole.count({
   *   where: {
   *     // ... the filter for the ProcessRoles we want to count
   *   }
   * })
  **/
  count<T extends ProcessRoleCountArgs>(
    args?: Prisma.Subset<T, ProcessRoleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProcessRoleCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProcessRole.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProcessRoleAggregateArgs>(args: Prisma.Subset<T, ProcessRoleAggregateArgs>): Prisma.PrismaPromise<GetProcessRoleAggregateType<T>>

  /**
   * Group by ProcessRole.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessRoleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProcessRoleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProcessRoleGroupByArgs['orderBy'] }
      : { orderBy?: ProcessRoleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProcessRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcessRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProcessRole model
 */
readonly fields: ProcessRoleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProcessRole.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProcessRoleClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  process<T extends Prisma.ProcessDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProcessDefaultArgs<ExtArgs>>): Prisma.Prisma__ProcessClient<runtime.Types.Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  role<T extends Prisma.RoleDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RoleDefaultArgs<ExtArgs>>): Prisma.Prisma__RoleClient<runtime.Types.Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProcessRole model
 */
export interface ProcessRoleFieldRefs {
  readonly processId: Prisma.FieldRef<"ProcessRole", 'String'>
  readonly roleId: Prisma.FieldRef<"ProcessRole", 'String'>
  readonly status: Prisma.FieldRef<"ProcessRole", 'RoleStatus'>
}
    

// Custom InputTypes
/**
 * ProcessRole findUnique
 */
export type ProcessRoleFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessRole
   */
  select?: Prisma.ProcessRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessRole
   */
  omit?: Prisma.ProcessRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessRoleInclude<ExtArgs> | null
  /**
   * Filter, which ProcessRole to fetch.
   */
  where: Prisma.ProcessRoleWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessRole findUniqueOrThrow
 */
export type ProcessRoleFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessRole
   */
  select?: Prisma.ProcessRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessRole
   */
  omit?: Prisma.ProcessRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessRoleInclude<ExtArgs> | null
  /**
   * Filter, which ProcessRole to fetch.
   */
  where: Prisma.ProcessRoleWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessRole findFirst
 */
export type ProcessRoleFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessRole
   */
  select?: Prisma.ProcessRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessRole
   */
  omit?: Prisma.ProcessRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessRoleInclude<ExtArgs> | null
  /**
   * Filter, which ProcessRole to fetch.
   */
  where?: Prisma.ProcessRoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessRoles to fetch.
   */
  orderBy?: Prisma.ProcessRoleOrderByWithRelationInput | Prisma.ProcessRoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProcessRoles.
   */
  cursor?: Prisma.ProcessRoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessRoles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProcessRoles.
   */
  distinct?: Prisma.ProcessRoleScalarFieldEnum | Prisma.ProcessRoleScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessRole findFirstOrThrow
 */
export type ProcessRoleFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessRole
   */
  select?: Prisma.ProcessRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessRole
   */
  omit?: Prisma.ProcessRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessRoleInclude<ExtArgs> | null
  /**
   * Filter, which ProcessRole to fetch.
   */
  where?: Prisma.ProcessRoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessRoles to fetch.
   */
  orderBy?: Prisma.ProcessRoleOrderByWithRelationInput | Prisma.ProcessRoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProcessRoles.
   */
  cursor?: Prisma.ProcessRoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessRoles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProcessRoles.
   */
  distinct?: Prisma.ProcessRoleScalarFieldEnum | Prisma.ProcessRoleScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessRole findMany
 */
export type ProcessRoleFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessRole
   */
  select?: Prisma.ProcessRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessRole
   */
  omit?: Prisma.ProcessRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessRoleInclude<ExtArgs> | null
  /**
   * Filter, which ProcessRoles to fetch.
   */
  where?: Prisma.ProcessRoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessRoles to fetch.
   */
  orderBy?: Prisma.ProcessRoleOrderByWithRelationInput | Prisma.ProcessRoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProcessRoles.
   */
  cursor?: Prisma.ProcessRoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessRoles.
   */
  skip?: number
  distinct?: Prisma.ProcessRoleScalarFieldEnum | Prisma.ProcessRoleScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessRole create
 */
export type ProcessRoleCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessRole
   */
  select?: Prisma.ProcessRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessRole
   */
  omit?: Prisma.ProcessRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessRoleInclude<ExtArgs> | null
  /**
   * The data needed to create a ProcessRole.
   */
  data: Prisma.XOR<Prisma.ProcessRoleCreateInput, Prisma.ProcessRoleUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessRole createMany
 */
export type ProcessRoleCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProcessRoles.
   */
  data: Prisma.ProcessRoleCreateManyInput | Prisma.ProcessRoleCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProcessRole createManyAndReturn
 */
export type ProcessRoleCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessRole
   */
  select?: Prisma.ProcessRoleSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessRole
   */
  omit?: Prisma.ProcessRoleOmit<ExtArgs> | null
  /**
   * The data used to create many ProcessRoles.
   */
  data: Prisma.ProcessRoleCreateManyInput | Prisma.ProcessRoleCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessRoleIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProcessRole update
 */
export type ProcessRoleUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessRole
   */
  select?: Prisma.ProcessRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessRole
   */
  omit?: Prisma.ProcessRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessRoleInclude<ExtArgs> | null
  /**
   * The data needed to update a ProcessRole.
   */
  data: Prisma.XOR<Prisma.ProcessRoleUpdateInput, Prisma.ProcessRoleUncheckedUpdateInput>
  /**
   * Choose, which ProcessRole to update.
   */
  where: Prisma.ProcessRoleWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessRole updateMany
 */
export type ProcessRoleUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProcessRoles.
   */
  data: Prisma.XOR<Prisma.ProcessRoleUpdateManyMutationInput, Prisma.ProcessRoleUncheckedUpdateManyInput>
  /**
   * Filter which ProcessRoles to update
   */
  where?: Prisma.ProcessRoleWhereInput
  /**
   * Limit how many ProcessRoles to update.
   */
  limit?: number
}

/**
 * ProcessRole updateManyAndReturn
 */
export type ProcessRoleUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessRole
   */
  select?: Prisma.ProcessRoleSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessRole
   */
  omit?: Prisma.ProcessRoleOmit<ExtArgs> | null
  /**
   * The data used to update ProcessRoles.
   */
  data: Prisma.XOR<Prisma.ProcessRoleUpdateManyMutationInput, Prisma.ProcessRoleUncheckedUpdateManyInput>
  /**
   * Filter which ProcessRoles to update
   */
  where?: Prisma.ProcessRoleWhereInput
  /**
   * Limit how many ProcessRoles to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessRoleIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProcessRole upsert
 */
export type ProcessRoleUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessRole
   */
  select?: Prisma.ProcessRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessRole
   */
  omit?: Prisma.ProcessRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessRoleInclude<ExtArgs> | null
  /**
   * The filter to search for the ProcessRole to update in case it exists.
   */
  where: Prisma.ProcessRoleWhereUniqueInput
  /**
   * In case the ProcessRole found by the `where` argument doesn't exist, create a new ProcessRole with this data.
   */
  create: Prisma.XOR<Prisma.ProcessRoleCreateInput, Prisma.ProcessRoleUncheckedCreateInput>
  /**
   * In case the ProcessRole was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProcessRoleUpdateInput, Prisma.ProcessRoleUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessRole delete
 */
export type ProcessRoleDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessRole
   */
  select?: Prisma.ProcessRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessRole
   */
  omit?: Prisma.ProcessRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessRoleInclude<ExtArgs> | null
  /**
   * Filter which ProcessRole to delete.
   */
  where: Prisma.ProcessRoleWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessRole deleteMany
 */
export type ProcessRoleDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProcessRoles to delete
   */
  where?: Prisma.ProcessRoleWhereInput
  /**
   * Limit how many ProcessRoles to delete.
   */
  limit?: number
}

/**
 * ProcessRole without action
 */
export type ProcessRoleDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessRole
   */
  select?: Prisma.ProcessRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessRole
   */
  omit?: Prisma.ProcessRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessRoleInclude<ExtArgs> | null
}
