
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/client"
import type * as Prisma from "../models.js"
import { type PrismaClient } from "./class.js"

export type * from '../models.js'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
export const prismaVersion: PrismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  User: 'User',
  Role: 'Role',
  UserRole: 'UserRole',
  File: 'File',
  AuditLog: 'AuditLog',
  Group: 'Group',
  GroupRole: 'GroupRole',
  Process: 'Process',
  ProcessRole: 'ProcessRole',
  Folder: 'Folder',
  ProcessFolder: 'ProcessFolder',
  Form: 'Form',
  FormResponse: 'FormResponse',
  ProcessForm: 'ProcessForm',
  ApplicantProcess: 'ApplicantProcess',
  ProcessedApplication: 'ProcessedApplication',
  APCompletedForm: 'APCompletedForm',
  ProcessComment: 'ProcessComment',
  OrganizationUser: 'OrganizationUser',
  Dashboard: 'Dashboard',
  Widget: 'Widget',
  WidgetSandbox: 'WidgetSandbox',
  QrCodeDocument: 'QrCodeDocument',
  Otp: 'Otp',
  Management: 'Management',
  AddToDatabase: 'AddToDatabase',
  AddToDatabaseTreeItem: 'AddToDatabaseTreeItem',
  Chat: 'Chat',
  Message: 'Message',
  Vote: 'Vote',
  Document: 'Document',
  Suggestion: 'Suggestion',
  ProcessSave: 'ProcessSave',
  FormGenerationProgress: 'FormGenerationProgress'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<GlobalOmitOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], GlobalOmitOptions>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "user" | "role" | "userRole" | "file" | "auditLog" | "group" | "groupRole" | "process" | "processRole" | "folder" | "processFolder" | "form" | "formResponse" | "processForm" | "applicantProcess" | "processedApplication" | "aPCompletedForm" | "processComment" | "organizationUser" | "dashboard" | "widget" | "widgetSandbox" | "qrCodeDocument" | "otp" | "management" | "addToDatabase" | "addToDatabaseTreeItem" | "chat" | "message" | "vote" | "document" | "suggestion" | "processSave" | "formGenerationProgress"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    Role: {
      payload: Prisma.$RolePayload<ExtArgs>
      fields: Prisma.RoleFieldRefs
      operations: {
        findUnique: {
          args: Prisma.RoleFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        findFirst: {
          args: Prisma.RoleFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        findMany: {
          args: Prisma.RoleFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>[]
        }
        create: {
          args: Prisma.RoleCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        createMany: {
          args: Prisma.RoleCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>[]
        }
        delete: {
          args: Prisma.RoleDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        update: {
          args: Prisma.RoleUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        deleteMany: {
          args: Prisma.RoleDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.RoleUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.RoleUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>[]
        }
        upsert: {
          args: Prisma.RoleUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        aggregate: {
          args: Prisma.RoleAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateRole>
        }
        groupBy: {
          args: Prisma.RoleGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RoleGroupByOutputType>[]
        }
        count: {
          args: Prisma.RoleCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RoleCountAggregateOutputType> | number
        }
      }
    }
    UserRole: {
      payload: Prisma.$UserRolePayload<ExtArgs>
      fields: Prisma.UserRoleFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserRoleFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserRoleFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        findFirst: {
          args: Prisma.UserRoleFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserRoleFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        findMany: {
          args: Prisma.UserRoleFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>[]
        }
        create: {
          args: Prisma.UserRoleCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        createMany: {
          args: Prisma.UserRoleCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserRoleCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>[]
        }
        delete: {
          args: Prisma.UserRoleDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        update: {
          args: Prisma.UserRoleUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        deleteMany: {
          args: Prisma.UserRoleDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserRoleUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserRoleUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>[]
        }
        upsert: {
          args: Prisma.UserRoleUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        aggregate: {
          args: Prisma.UserRoleAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserRole>
        }
        groupBy: {
          args: Prisma.UserRoleGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserRoleGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserRoleCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserRoleCountAggregateOutputType> | number
        }
      }
    }
    File: {
      payload: Prisma.$FilePayload<ExtArgs>
      fields: Prisma.FileFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FileFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        findFirst: {
          args: Prisma.FileFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        findMany: {
          args: Prisma.FileFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>[]
        }
        create: {
          args: Prisma.FileCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        createMany: {
          args: Prisma.FileCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>[]
        }
        delete: {
          args: Prisma.FileDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        update: {
          args: Prisma.FileUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        deleteMany: {
          args: Prisma.FileDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FileUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FileUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>[]
        }
        upsert: {
          args: Prisma.FileUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        aggregate: {
          args: Prisma.FileAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFile>
        }
        groupBy: {
          args: Prisma.FileGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FileGroupByOutputType>[]
        }
        count: {
          args: Prisma.FileCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FileCountAggregateOutputType> | number
        }
      }
    }
    AuditLog: {
      payload: Prisma.$AuditLogPayload<ExtArgs>
      fields: Prisma.AuditLogFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload>
        }
        findFirst: {
          args: Prisma.AuditLogFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload>
        }
        findMany: {
          args: Prisma.AuditLogFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
        }
        create: {
          args: Prisma.AuditLogCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload>
        }
        createMany: {
          args: Prisma.AuditLogCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
        }
        delete: {
          args: Prisma.AuditLogDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload>
        }
        update: {
          args: Prisma.AuditLogUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload>
        }
        deleteMany: {
          args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
        }
        upsert: {
          args: Prisma.AuditLogUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AuditLogPayload>
        }
        aggregate: {
          args: Prisma.AuditLogAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAuditLog>
        }
        groupBy: {
          args: Prisma.AuditLogGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AuditLogGroupByOutputType>[]
        }
        count: {
          args: Prisma.AuditLogCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AuditLogCountAggregateOutputType> | number
        }
      }
    }
    Group: {
      payload: Prisma.$GroupPayload<ExtArgs>
      fields: Prisma.GroupFieldRefs
      operations: {
        findUnique: {
          args: Prisma.GroupFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.GroupFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload>
        }
        findFirst: {
          args: Prisma.GroupFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.GroupFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload>
        }
        findMany: {
          args: Prisma.GroupFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload>[]
        }
        create: {
          args: Prisma.GroupCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload>
        }
        createMany: {
          args: Prisma.GroupCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.GroupCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload>[]
        }
        delete: {
          args: Prisma.GroupDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload>
        }
        update: {
          args: Prisma.GroupUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload>
        }
        deleteMany: {
          args: Prisma.GroupDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.GroupUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.GroupUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload>[]
        }
        upsert: {
          args: Prisma.GroupUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload>
        }
        aggregate: {
          args: Prisma.GroupAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateGroup>
        }
        groupBy: {
          args: Prisma.GroupGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GroupGroupByOutputType>[]
        }
        count: {
          args: Prisma.GroupCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GroupCountAggregateOutputType> | number
        }
      }
    }
    GroupRole: {
      payload: Prisma.$GroupRolePayload<ExtArgs>
      fields: Prisma.GroupRoleFieldRefs
      operations: {
        findUnique: {
          args: Prisma.GroupRoleFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupRolePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.GroupRoleFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupRolePayload>
        }
        findFirst: {
          args: Prisma.GroupRoleFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupRolePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.GroupRoleFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupRolePayload>
        }
        findMany: {
          args: Prisma.GroupRoleFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupRolePayload>[]
        }
        create: {
          args: Prisma.GroupRoleCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupRolePayload>
        }
        createMany: {
          args: Prisma.GroupRoleCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.GroupRoleCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupRolePayload>[]
        }
        delete: {
          args: Prisma.GroupRoleDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupRolePayload>
        }
        update: {
          args: Prisma.GroupRoleUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupRolePayload>
        }
        deleteMany: {
          args: Prisma.GroupRoleDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.GroupRoleUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.GroupRoleUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupRolePayload>[]
        }
        upsert: {
          args: Prisma.GroupRoleUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupRolePayload>
        }
        aggregate: {
          args: Prisma.GroupRoleAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateGroupRole>
        }
        groupBy: {
          args: Prisma.GroupRoleGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GroupRoleGroupByOutputType>[]
        }
        count: {
          args: Prisma.GroupRoleCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GroupRoleCountAggregateOutputType> | number
        }
      }
    }
    Process: {
      payload: Prisma.$ProcessPayload<ExtArgs>
      fields: Prisma.ProcessFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProcessFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProcessFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessPayload>
        }
        findFirst: {
          args: Prisma.ProcessFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProcessFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessPayload>
        }
        findMany: {
          args: Prisma.ProcessFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessPayload>[]
        }
        create: {
          args: Prisma.ProcessCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessPayload>
        }
        createMany: {
          args: Prisma.ProcessCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProcessCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessPayload>[]
        }
        delete: {
          args: Prisma.ProcessDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessPayload>
        }
        update: {
          args: Prisma.ProcessUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessPayload>
        }
        deleteMany: {
          args: Prisma.ProcessDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProcessUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProcessUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessPayload>[]
        }
        upsert: {
          args: Prisma.ProcessUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessPayload>
        }
        aggregate: {
          args: Prisma.ProcessAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProcess>
        }
        groupBy: {
          args: Prisma.ProcessGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcessGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProcessCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcessCountAggregateOutputType> | number
        }
      }
    }
    ProcessRole: {
      payload: Prisma.$ProcessRolePayload<ExtArgs>
      fields: Prisma.ProcessRoleFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProcessRoleFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessRolePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProcessRoleFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessRolePayload>
        }
        findFirst: {
          args: Prisma.ProcessRoleFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessRolePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProcessRoleFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessRolePayload>
        }
        findMany: {
          args: Prisma.ProcessRoleFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessRolePayload>[]
        }
        create: {
          args: Prisma.ProcessRoleCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessRolePayload>
        }
        createMany: {
          args: Prisma.ProcessRoleCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProcessRoleCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessRolePayload>[]
        }
        delete: {
          args: Prisma.ProcessRoleDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessRolePayload>
        }
        update: {
          args: Prisma.ProcessRoleUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessRolePayload>
        }
        deleteMany: {
          args: Prisma.ProcessRoleDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProcessRoleUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProcessRoleUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessRolePayload>[]
        }
        upsert: {
          args: Prisma.ProcessRoleUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessRolePayload>
        }
        aggregate: {
          args: Prisma.ProcessRoleAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProcessRole>
        }
        groupBy: {
          args: Prisma.ProcessRoleGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcessRoleGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProcessRoleCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcessRoleCountAggregateOutputType> | number
        }
      }
    }
    Folder: {
      payload: Prisma.$FolderPayload<ExtArgs>
      fields: Prisma.FolderFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FolderFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FolderPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FolderFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FolderPayload>
        }
        findFirst: {
          args: Prisma.FolderFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FolderPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FolderFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FolderPayload>
        }
        findMany: {
          args: Prisma.FolderFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FolderPayload>[]
        }
        create: {
          args: Prisma.FolderCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FolderPayload>
        }
        createMany: {
          args: Prisma.FolderCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FolderCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FolderPayload>[]
        }
        delete: {
          args: Prisma.FolderDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FolderPayload>
        }
        update: {
          args: Prisma.FolderUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FolderPayload>
        }
        deleteMany: {
          args: Prisma.FolderDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FolderUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FolderUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FolderPayload>[]
        }
        upsert: {
          args: Prisma.FolderUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FolderPayload>
        }
        aggregate: {
          args: Prisma.FolderAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFolder>
        }
        groupBy: {
          args: Prisma.FolderGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FolderGroupByOutputType>[]
        }
        count: {
          args: Prisma.FolderCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FolderCountAggregateOutputType> | number
        }
      }
    }
    ProcessFolder: {
      payload: Prisma.$ProcessFolderPayload<ExtArgs>
      fields: Prisma.ProcessFolderFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProcessFolderFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFolderPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProcessFolderFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFolderPayload>
        }
        findFirst: {
          args: Prisma.ProcessFolderFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFolderPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProcessFolderFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFolderPayload>
        }
        findMany: {
          args: Prisma.ProcessFolderFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFolderPayload>[]
        }
        create: {
          args: Prisma.ProcessFolderCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFolderPayload>
        }
        createMany: {
          args: Prisma.ProcessFolderCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProcessFolderCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFolderPayload>[]
        }
        delete: {
          args: Prisma.ProcessFolderDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFolderPayload>
        }
        update: {
          args: Prisma.ProcessFolderUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFolderPayload>
        }
        deleteMany: {
          args: Prisma.ProcessFolderDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProcessFolderUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProcessFolderUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFolderPayload>[]
        }
        upsert: {
          args: Prisma.ProcessFolderUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFolderPayload>
        }
        aggregate: {
          args: Prisma.ProcessFolderAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProcessFolder>
        }
        groupBy: {
          args: Prisma.ProcessFolderGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcessFolderGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProcessFolderCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcessFolderCountAggregateOutputType> | number
        }
      }
    }
    Form: {
      payload: Prisma.$FormPayload<ExtArgs>
      fields: Prisma.FormFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FormFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FormFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormPayload>
        }
        findFirst: {
          args: Prisma.FormFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FormFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormPayload>
        }
        findMany: {
          args: Prisma.FormFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormPayload>[]
        }
        create: {
          args: Prisma.FormCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormPayload>
        }
        createMany: {
          args: Prisma.FormCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FormCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormPayload>[]
        }
        delete: {
          args: Prisma.FormDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormPayload>
        }
        update: {
          args: Prisma.FormUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormPayload>
        }
        deleteMany: {
          args: Prisma.FormDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FormUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FormUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormPayload>[]
        }
        upsert: {
          args: Prisma.FormUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormPayload>
        }
        aggregate: {
          args: Prisma.FormAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateForm>
        }
        groupBy: {
          args: Prisma.FormGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FormGroupByOutputType>[]
        }
        count: {
          args: Prisma.FormCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FormCountAggregateOutputType> | number
        }
      }
    }
    FormResponse: {
      payload: Prisma.$FormResponsePayload<ExtArgs>
      fields: Prisma.FormResponseFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FormResponseFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormResponsePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FormResponseFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormResponsePayload>
        }
        findFirst: {
          args: Prisma.FormResponseFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormResponsePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FormResponseFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormResponsePayload>
        }
        findMany: {
          args: Prisma.FormResponseFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormResponsePayload>[]
        }
        create: {
          args: Prisma.FormResponseCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormResponsePayload>
        }
        createMany: {
          args: Prisma.FormResponseCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FormResponseCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormResponsePayload>[]
        }
        delete: {
          args: Prisma.FormResponseDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormResponsePayload>
        }
        update: {
          args: Prisma.FormResponseUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormResponsePayload>
        }
        deleteMany: {
          args: Prisma.FormResponseDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FormResponseUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FormResponseUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormResponsePayload>[]
        }
        upsert: {
          args: Prisma.FormResponseUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormResponsePayload>
        }
        aggregate: {
          args: Prisma.FormResponseAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFormResponse>
        }
        groupBy: {
          args: Prisma.FormResponseGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FormResponseGroupByOutputType>[]
        }
        count: {
          args: Prisma.FormResponseCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FormResponseCountAggregateOutputType> | number
        }
      }
    }
    ProcessForm: {
      payload: Prisma.$ProcessFormPayload<ExtArgs>
      fields: Prisma.ProcessFormFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProcessFormFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFormPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProcessFormFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFormPayload>
        }
        findFirst: {
          args: Prisma.ProcessFormFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFormPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProcessFormFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFormPayload>
        }
        findMany: {
          args: Prisma.ProcessFormFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFormPayload>[]
        }
        create: {
          args: Prisma.ProcessFormCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFormPayload>
        }
        createMany: {
          args: Prisma.ProcessFormCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProcessFormCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFormPayload>[]
        }
        delete: {
          args: Prisma.ProcessFormDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFormPayload>
        }
        update: {
          args: Prisma.ProcessFormUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFormPayload>
        }
        deleteMany: {
          args: Prisma.ProcessFormDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProcessFormUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProcessFormUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFormPayload>[]
        }
        upsert: {
          args: Prisma.ProcessFormUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessFormPayload>
        }
        aggregate: {
          args: Prisma.ProcessFormAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProcessForm>
        }
        groupBy: {
          args: Prisma.ProcessFormGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcessFormGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProcessFormCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcessFormCountAggregateOutputType> | number
        }
      }
    }
    ApplicantProcess: {
      payload: Prisma.$ApplicantProcessPayload<ExtArgs>
      fields: Prisma.ApplicantProcessFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ApplicantProcessFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicantProcessPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ApplicantProcessFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicantProcessPayload>
        }
        findFirst: {
          args: Prisma.ApplicantProcessFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicantProcessPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ApplicantProcessFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicantProcessPayload>
        }
        findMany: {
          args: Prisma.ApplicantProcessFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicantProcessPayload>[]
        }
        create: {
          args: Prisma.ApplicantProcessCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicantProcessPayload>
        }
        createMany: {
          args: Prisma.ApplicantProcessCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ApplicantProcessCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicantProcessPayload>[]
        }
        delete: {
          args: Prisma.ApplicantProcessDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicantProcessPayload>
        }
        update: {
          args: Prisma.ApplicantProcessUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicantProcessPayload>
        }
        deleteMany: {
          args: Prisma.ApplicantProcessDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ApplicantProcessUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ApplicantProcessUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicantProcessPayload>[]
        }
        upsert: {
          args: Prisma.ApplicantProcessUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicantProcessPayload>
        }
        aggregate: {
          args: Prisma.ApplicantProcessAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateApplicantProcess>
        }
        groupBy: {
          args: Prisma.ApplicantProcessGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ApplicantProcessGroupByOutputType>[]
        }
        count: {
          args: Prisma.ApplicantProcessCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ApplicantProcessCountAggregateOutputType> | number
        }
      }
    }
    ProcessedApplication: {
      payload: Prisma.$ProcessedApplicationPayload<ExtArgs>
      fields: Prisma.ProcessedApplicationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProcessedApplicationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessedApplicationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProcessedApplicationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessedApplicationPayload>
        }
        findFirst: {
          args: Prisma.ProcessedApplicationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessedApplicationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProcessedApplicationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessedApplicationPayload>
        }
        findMany: {
          args: Prisma.ProcessedApplicationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessedApplicationPayload>[]
        }
        create: {
          args: Prisma.ProcessedApplicationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessedApplicationPayload>
        }
        createMany: {
          args: Prisma.ProcessedApplicationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProcessedApplicationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessedApplicationPayload>[]
        }
        delete: {
          args: Prisma.ProcessedApplicationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessedApplicationPayload>
        }
        update: {
          args: Prisma.ProcessedApplicationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessedApplicationPayload>
        }
        deleteMany: {
          args: Prisma.ProcessedApplicationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProcessedApplicationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProcessedApplicationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessedApplicationPayload>[]
        }
        upsert: {
          args: Prisma.ProcessedApplicationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessedApplicationPayload>
        }
        aggregate: {
          args: Prisma.ProcessedApplicationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProcessedApplication>
        }
        groupBy: {
          args: Prisma.ProcessedApplicationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcessedApplicationGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProcessedApplicationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcessedApplicationCountAggregateOutputType> | number
        }
      }
    }
    APCompletedForm: {
      payload: Prisma.$APCompletedFormPayload<ExtArgs>
      fields: Prisma.APCompletedFormFieldRefs
      operations: {
        findUnique: {
          args: Prisma.APCompletedFormFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$APCompletedFormPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.APCompletedFormFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$APCompletedFormPayload>
        }
        findFirst: {
          args: Prisma.APCompletedFormFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$APCompletedFormPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.APCompletedFormFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$APCompletedFormPayload>
        }
        findMany: {
          args: Prisma.APCompletedFormFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$APCompletedFormPayload>[]
        }
        create: {
          args: Prisma.APCompletedFormCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$APCompletedFormPayload>
        }
        createMany: {
          args: Prisma.APCompletedFormCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.APCompletedFormCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$APCompletedFormPayload>[]
        }
        delete: {
          args: Prisma.APCompletedFormDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$APCompletedFormPayload>
        }
        update: {
          args: Prisma.APCompletedFormUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$APCompletedFormPayload>
        }
        deleteMany: {
          args: Prisma.APCompletedFormDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.APCompletedFormUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.APCompletedFormUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$APCompletedFormPayload>[]
        }
        upsert: {
          args: Prisma.APCompletedFormUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$APCompletedFormPayload>
        }
        aggregate: {
          args: Prisma.APCompletedFormAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAPCompletedForm>
        }
        groupBy: {
          args: Prisma.APCompletedFormGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.APCompletedFormGroupByOutputType>[]
        }
        count: {
          args: Prisma.APCompletedFormCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.APCompletedFormCountAggregateOutputType> | number
        }
      }
    }
    ProcessComment: {
      payload: Prisma.$ProcessCommentPayload<ExtArgs>
      fields: Prisma.ProcessCommentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProcessCommentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessCommentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProcessCommentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessCommentPayload>
        }
        findFirst: {
          args: Prisma.ProcessCommentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessCommentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProcessCommentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessCommentPayload>
        }
        findMany: {
          args: Prisma.ProcessCommentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessCommentPayload>[]
        }
        create: {
          args: Prisma.ProcessCommentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessCommentPayload>
        }
        createMany: {
          args: Prisma.ProcessCommentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProcessCommentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessCommentPayload>[]
        }
        delete: {
          args: Prisma.ProcessCommentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessCommentPayload>
        }
        update: {
          args: Prisma.ProcessCommentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessCommentPayload>
        }
        deleteMany: {
          args: Prisma.ProcessCommentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProcessCommentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProcessCommentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessCommentPayload>[]
        }
        upsert: {
          args: Prisma.ProcessCommentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessCommentPayload>
        }
        aggregate: {
          args: Prisma.ProcessCommentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProcessComment>
        }
        groupBy: {
          args: Prisma.ProcessCommentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcessCommentGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProcessCommentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcessCommentCountAggregateOutputType> | number
        }
      }
    }
    OrganizationUser: {
      payload: Prisma.$OrganizationUserPayload<ExtArgs>
      fields: Prisma.OrganizationUserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OrganizationUserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationUserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OrganizationUserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationUserPayload>
        }
        findFirst: {
          args: Prisma.OrganizationUserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationUserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OrganizationUserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationUserPayload>
        }
        findMany: {
          args: Prisma.OrganizationUserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationUserPayload>[]
        }
        create: {
          args: Prisma.OrganizationUserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationUserPayload>
        }
        createMany: {
          args: Prisma.OrganizationUserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OrganizationUserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationUserPayload>[]
        }
        delete: {
          args: Prisma.OrganizationUserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationUserPayload>
        }
        update: {
          args: Prisma.OrganizationUserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationUserPayload>
        }
        deleteMany: {
          args: Prisma.OrganizationUserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OrganizationUserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OrganizationUserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationUserPayload>[]
        }
        upsert: {
          args: Prisma.OrganizationUserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationUserPayload>
        }
        aggregate: {
          args: Prisma.OrganizationUserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrganizationUser>
        }
        groupBy: {
          args: Prisma.OrganizationUserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrganizationUserGroupByOutputType>[]
        }
        count: {
          args: Prisma.OrganizationUserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrganizationUserCountAggregateOutputType> | number
        }
      }
    }
    Dashboard: {
      payload: Prisma.$DashboardPayload<ExtArgs>
      fields: Prisma.DashboardFieldRefs
      operations: {
        findUnique: {
          args: Prisma.DashboardFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.DashboardFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload>
        }
        findFirst: {
          args: Prisma.DashboardFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.DashboardFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload>
        }
        findMany: {
          args: Prisma.DashboardFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload>[]
        }
        create: {
          args: Prisma.DashboardCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload>
        }
        createMany: {
          args: Prisma.DashboardCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.DashboardCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload>[]
        }
        delete: {
          args: Prisma.DashboardDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload>
        }
        update: {
          args: Prisma.DashboardUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload>
        }
        deleteMany: {
          args: Prisma.DashboardDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.DashboardUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.DashboardUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload>[]
        }
        upsert: {
          args: Prisma.DashboardUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload>
        }
        aggregate: {
          args: Prisma.DashboardAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDashboard>
        }
        groupBy: {
          args: Prisma.DashboardGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DashboardGroupByOutputType>[]
        }
        count: {
          args: Prisma.DashboardCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DashboardCountAggregateOutputType> | number
        }
      }
    }
    Widget: {
      payload: Prisma.$WidgetPayload<ExtArgs>
      fields: Prisma.WidgetFieldRefs
      operations: {
        findUnique: {
          args: Prisma.WidgetFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.WidgetFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetPayload>
        }
        findFirst: {
          args: Prisma.WidgetFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.WidgetFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetPayload>
        }
        findMany: {
          args: Prisma.WidgetFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetPayload>[]
        }
        create: {
          args: Prisma.WidgetCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetPayload>
        }
        createMany: {
          args: Prisma.WidgetCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.WidgetCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetPayload>[]
        }
        delete: {
          args: Prisma.WidgetDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetPayload>
        }
        update: {
          args: Prisma.WidgetUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetPayload>
        }
        deleteMany: {
          args: Prisma.WidgetDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.WidgetUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.WidgetUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetPayload>[]
        }
        upsert: {
          args: Prisma.WidgetUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetPayload>
        }
        aggregate: {
          args: Prisma.WidgetAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWidget>
        }
        groupBy: {
          args: Prisma.WidgetGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WidgetGroupByOutputType>[]
        }
        count: {
          args: Prisma.WidgetCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WidgetCountAggregateOutputType> | number
        }
      }
    }
    WidgetSandbox: {
      payload: Prisma.$WidgetSandboxPayload<ExtArgs>
      fields: Prisma.WidgetSandboxFieldRefs
      operations: {
        findUnique: {
          args: Prisma.WidgetSandboxFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetSandboxPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.WidgetSandboxFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetSandboxPayload>
        }
        findFirst: {
          args: Prisma.WidgetSandboxFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetSandboxPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.WidgetSandboxFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetSandboxPayload>
        }
        findMany: {
          args: Prisma.WidgetSandboxFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetSandboxPayload>[]
        }
        create: {
          args: Prisma.WidgetSandboxCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetSandboxPayload>
        }
        createMany: {
          args: Prisma.WidgetSandboxCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.WidgetSandboxCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetSandboxPayload>[]
        }
        delete: {
          args: Prisma.WidgetSandboxDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetSandboxPayload>
        }
        update: {
          args: Prisma.WidgetSandboxUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetSandboxPayload>
        }
        deleteMany: {
          args: Prisma.WidgetSandboxDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.WidgetSandboxUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.WidgetSandboxUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetSandboxPayload>[]
        }
        upsert: {
          args: Prisma.WidgetSandboxUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WidgetSandboxPayload>
        }
        aggregate: {
          args: Prisma.WidgetSandboxAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWidgetSandbox>
        }
        groupBy: {
          args: Prisma.WidgetSandboxGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WidgetSandboxGroupByOutputType>[]
        }
        count: {
          args: Prisma.WidgetSandboxCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WidgetSandboxCountAggregateOutputType> | number
        }
      }
    }
    QrCodeDocument: {
      payload: Prisma.$QrCodeDocumentPayload<ExtArgs>
      fields: Prisma.QrCodeDocumentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.QrCodeDocumentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QrCodeDocumentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.QrCodeDocumentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QrCodeDocumentPayload>
        }
        findFirst: {
          args: Prisma.QrCodeDocumentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QrCodeDocumentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.QrCodeDocumentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QrCodeDocumentPayload>
        }
        findMany: {
          args: Prisma.QrCodeDocumentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QrCodeDocumentPayload>[]
        }
        create: {
          args: Prisma.QrCodeDocumentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QrCodeDocumentPayload>
        }
        createMany: {
          args: Prisma.QrCodeDocumentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.QrCodeDocumentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QrCodeDocumentPayload>[]
        }
        delete: {
          args: Prisma.QrCodeDocumentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QrCodeDocumentPayload>
        }
        update: {
          args: Prisma.QrCodeDocumentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QrCodeDocumentPayload>
        }
        deleteMany: {
          args: Prisma.QrCodeDocumentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.QrCodeDocumentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.QrCodeDocumentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QrCodeDocumentPayload>[]
        }
        upsert: {
          args: Prisma.QrCodeDocumentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$QrCodeDocumentPayload>
        }
        aggregate: {
          args: Prisma.QrCodeDocumentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateQrCodeDocument>
        }
        groupBy: {
          args: Prisma.QrCodeDocumentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.QrCodeDocumentGroupByOutputType>[]
        }
        count: {
          args: Prisma.QrCodeDocumentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.QrCodeDocumentCountAggregateOutputType> | number
        }
      }
    }
    Otp: {
      payload: Prisma.$OtpPayload<ExtArgs>
      fields: Prisma.OtpFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OtpFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OtpPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OtpFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OtpPayload>
        }
        findFirst: {
          args: Prisma.OtpFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OtpPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OtpFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OtpPayload>
        }
        findMany: {
          args: Prisma.OtpFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OtpPayload>[]
        }
        create: {
          args: Prisma.OtpCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OtpPayload>
        }
        createMany: {
          args: Prisma.OtpCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OtpCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OtpPayload>[]
        }
        delete: {
          args: Prisma.OtpDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OtpPayload>
        }
        update: {
          args: Prisma.OtpUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OtpPayload>
        }
        deleteMany: {
          args: Prisma.OtpDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OtpUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OtpUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OtpPayload>[]
        }
        upsert: {
          args: Prisma.OtpUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OtpPayload>
        }
        aggregate: {
          args: Prisma.OtpAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOtp>
        }
        groupBy: {
          args: Prisma.OtpGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OtpGroupByOutputType>[]
        }
        count: {
          args: Prisma.OtpCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OtpCountAggregateOutputType> | number
        }
      }
    }
    Management: {
      payload: Prisma.$ManagementPayload<ExtArgs>
      fields: Prisma.ManagementFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ManagementFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagementPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ManagementFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagementPayload>
        }
        findFirst: {
          args: Prisma.ManagementFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagementPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ManagementFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagementPayload>
        }
        findMany: {
          args: Prisma.ManagementFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagementPayload>[]
        }
        create: {
          args: Prisma.ManagementCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagementPayload>
        }
        createMany: {
          args: Prisma.ManagementCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ManagementCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagementPayload>[]
        }
        delete: {
          args: Prisma.ManagementDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagementPayload>
        }
        update: {
          args: Prisma.ManagementUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagementPayload>
        }
        deleteMany: {
          args: Prisma.ManagementDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ManagementUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ManagementUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagementPayload>[]
        }
        upsert: {
          args: Prisma.ManagementUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagementPayload>
        }
        aggregate: {
          args: Prisma.ManagementAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateManagement>
        }
        groupBy: {
          args: Prisma.ManagementGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ManagementGroupByOutputType>[]
        }
        count: {
          args: Prisma.ManagementCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ManagementCountAggregateOutputType> | number
        }
      }
    }
    AddToDatabase: {
      payload: Prisma.$AddToDatabasePayload<ExtArgs>
      fields: Prisma.AddToDatabaseFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AddToDatabaseFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabasePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AddToDatabaseFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabasePayload>
        }
        findFirst: {
          args: Prisma.AddToDatabaseFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabasePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AddToDatabaseFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabasePayload>
        }
        findMany: {
          args: Prisma.AddToDatabaseFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabasePayload>[]
        }
        create: {
          args: Prisma.AddToDatabaseCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabasePayload>
        }
        createMany: {
          args: Prisma.AddToDatabaseCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AddToDatabaseCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabasePayload>[]
        }
        delete: {
          args: Prisma.AddToDatabaseDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabasePayload>
        }
        update: {
          args: Prisma.AddToDatabaseUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabasePayload>
        }
        deleteMany: {
          args: Prisma.AddToDatabaseDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AddToDatabaseUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AddToDatabaseUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabasePayload>[]
        }
        upsert: {
          args: Prisma.AddToDatabaseUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabasePayload>
        }
        aggregate: {
          args: Prisma.AddToDatabaseAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAddToDatabase>
        }
        groupBy: {
          args: Prisma.AddToDatabaseGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AddToDatabaseGroupByOutputType>[]
        }
        count: {
          args: Prisma.AddToDatabaseCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AddToDatabaseCountAggregateOutputType> | number
        }
      }
    }
    AddToDatabaseTreeItem: {
      payload: Prisma.$AddToDatabaseTreeItemPayload<ExtArgs>
      fields: Prisma.AddToDatabaseTreeItemFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AddToDatabaseTreeItemFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabaseTreeItemPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AddToDatabaseTreeItemFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabaseTreeItemPayload>
        }
        findFirst: {
          args: Prisma.AddToDatabaseTreeItemFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabaseTreeItemPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AddToDatabaseTreeItemFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabaseTreeItemPayload>
        }
        findMany: {
          args: Prisma.AddToDatabaseTreeItemFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabaseTreeItemPayload>[]
        }
        create: {
          args: Prisma.AddToDatabaseTreeItemCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabaseTreeItemPayload>
        }
        createMany: {
          args: Prisma.AddToDatabaseTreeItemCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AddToDatabaseTreeItemCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabaseTreeItemPayload>[]
        }
        delete: {
          args: Prisma.AddToDatabaseTreeItemDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabaseTreeItemPayload>
        }
        update: {
          args: Prisma.AddToDatabaseTreeItemUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabaseTreeItemPayload>
        }
        deleteMany: {
          args: Prisma.AddToDatabaseTreeItemDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AddToDatabaseTreeItemUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AddToDatabaseTreeItemUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabaseTreeItemPayload>[]
        }
        upsert: {
          args: Prisma.AddToDatabaseTreeItemUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddToDatabaseTreeItemPayload>
        }
        aggregate: {
          args: Prisma.AddToDatabaseTreeItemAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAddToDatabaseTreeItem>
        }
        groupBy: {
          args: Prisma.AddToDatabaseTreeItemGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AddToDatabaseTreeItemGroupByOutputType>[]
        }
        count: {
          args: Prisma.AddToDatabaseTreeItemCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AddToDatabaseTreeItemCountAggregateOutputType> | number
        }
      }
    }
    Chat: {
      payload: Prisma.$ChatPayload<ExtArgs>
      fields: Prisma.ChatFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ChatFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ChatFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>
        }
        findFirst: {
          args: Prisma.ChatFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ChatFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>
        }
        findMany: {
          args: Prisma.ChatFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>[]
        }
        create: {
          args: Prisma.ChatCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>
        }
        createMany: {
          args: Prisma.ChatCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ChatCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>[]
        }
        delete: {
          args: Prisma.ChatDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>
        }
        update: {
          args: Prisma.ChatUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>
        }
        deleteMany: {
          args: Prisma.ChatDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ChatUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ChatUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>[]
        }
        upsert: {
          args: Prisma.ChatUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>
        }
        aggregate: {
          args: Prisma.ChatAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateChat>
        }
        groupBy: {
          args: Prisma.ChatGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChatGroupByOutputType>[]
        }
        count: {
          args: Prisma.ChatCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChatCountAggregateOutputType> | number
        }
      }
    }
    Message: {
      payload: Prisma.$MessagePayload<ExtArgs>
      fields: Prisma.MessageFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MessageFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload>
        }
        findFirst: {
          args: Prisma.MessageFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload>
        }
        findMany: {
          args: Prisma.MessageFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload>[]
        }
        create: {
          args: Prisma.MessageCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload>
        }
        createMany: {
          args: Prisma.MessageCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload>[]
        }
        delete: {
          args: Prisma.MessageDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload>
        }
        update: {
          args: Prisma.MessageUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload>
        }
        deleteMany: {
          args: Prisma.MessageDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MessageUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MessageUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload>[]
        }
        upsert: {
          args: Prisma.MessageUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MessagePayload>
        }
        aggregate: {
          args: Prisma.MessageAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMessage>
        }
        groupBy: {
          args: Prisma.MessageGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MessageGroupByOutputType>[]
        }
        count: {
          args: Prisma.MessageCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MessageCountAggregateOutputType> | number
        }
      }
    }
    Vote: {
      payload: Prisma.$VotePayload<ExtArgs>
      fields: Prisma.VoteFieldRefs
      operations: {
        findUnique: {
          args: Prisma.VoteFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VotePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.VoteFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VotePayload>
        }
        findFirst: {
          args: Prisma.VoteFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VotePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.VoteFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VotePayload>
        }
        findMany: {
          args: Prisma.VoteFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VotePayload>[]
        }
        create: {
          args: Prisma.VoteCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VotePayload>
        }
        createMany: {
          args: Prisma.VoteCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.VoteCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VotePayload>[]
        }
        delete: {
          args: Prisma.VoteDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VotePayload>
        }
        update: {
          args: Prisma.VoteUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VotePayload>
        }
        deleteMany: {
          args: Prisma.VoteDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.VoteUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.VoteUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VotePayload>[]
        }
        upsert: {
          args: Prisma.VoteUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VotePayload>
        }
        aggregate: {
          args: Prisma.VoteAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateVote>
        }
        groupBy: {
          args: Prisma.VoteGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.VoteGroupByOutputType>[]
        }
        count: {
          args: Prisma.VoteCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.VoteCountAggregateOutputType> | number
        }
      }
    }
    Document: {
      payload: Prisma.$DocumentPayload<ExtArgs>
      fields: Prisma.DocumentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.DocumentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload>
        }
        findFirst: {
          args: Prisma.DocumentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload>
        }
        findMany: {
          args: Prisma.DocumentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload>[]
        }
        create: {
          args: Prisma.DocumentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload>
        }
        createMany: {
          args: Prisma.DocumentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload>[]
        }
        delete: {
          args: Prisma.DocumentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload>
        }
        update: {
          args: Prisma.DocumentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload>
        }
        deleteMany: {
          args: Prisma.DocumentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.DocumentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.DocumentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload>[]
        }
        upsert: {
          args: Prisma.DocumentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentPayload>
        }
        aggregate: {
          args: Prisma.DocumentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDocument>
        }
        groupBy: {
          args: Prisma.DocumentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DocumentGroupByOutputType>[]
        }
        count: {
          args: Prisma.DocumentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DocumentCountAggregateOutputType> | number
        }
      }
    }
    Suggestion: {
      payload: Prisma.$SuggestionPayload<ExtArgs>
      fields: Prisma.SuggestionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SuggestionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SuggestionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SuggestionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SuggestionPayload>
        }
        findFirst: {
          args: Prisma.SuggestionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SuggestionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SuggestionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SuggestionPayload>
        }
        findMany: {
          args: Prisma.SuggestionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SuggestionPayload>[]
        }
        create: {
          args: Prisma.SuggestionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SuggestionPayload>
        }
        createMany: {
          args: Prisma.SuggestionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.SuggestionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SuggestionPayload>[]
        }
        delete: {
          args: Prisma.SuggestionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SuggestionPayload>
        }
        update: {
          args: Prisma.SuggestionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SuggestionPayload>
        }
        deleteMany: {
          args: Prisma.SuggestionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SuggestionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.SuggestionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SuggestionPayload>[]
        }
        upsert: {
          args: Prisma.SuggestionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SuggestionPayload>
        }
        aggregate: {
          args: Prisma.SuggestionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSuggestion>
        }
        groupBy: {
          args: Prisma.SuggestionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SuggestionGroupByOutputType>[]
        }
        count: {
          args: Prisma.SuggestionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SuggestionCountAggregateOutputType> | number
        }
      }
    }
    ProcessSave: {
      payload: Prisma.$ProcessSavePayload<ExtArgs>
      fields: Prisma.ProcessSaveFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProcessSaveFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessSavePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProcessSaveFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessSavePayload>
        }
        findFirst: {
          args: Prisma.ProcessSaveFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessSavePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProcessSaveFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessSavePayload>
        }
        findMany: {
          args: Prisma.ProcessSaveFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessSavePayload>[]
        }
        create: {
          args: Prisma.ProcessSaveCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessSavePayload>
        }
        createMany: {
          args: Prisma.ProcessSaveCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProcessSaveCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessSavePayload>[]
        }
        delete: {
          args: Prisma.ProcessSaveDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessSavePayload>
        }
        update: {
          args: Prisma.ProcessSaveUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessSavePayload>
        }
        deleteMany: {
          args: Prisma.ProcessSaveDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProcessSaveUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProcessSaveUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessSavePayload>[]
        }
        upsert: {
          args: Prisma.ProcessSaveUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcessSavePayload>
        }
        aggregate: {
          args: Prisma.ProcessSaveAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProcessSave>
        }
        groupBy: {
          args: Prisma.ProcessSaveGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcessSaveGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProcessSaveCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcessSaveCountAggregateOutputType> | number
        }
      }
    }
    FormGenerationProgress: {
      payload: Prisma.$FormGenerationProgressPayload<ExtArgs>
      fields: Prisma.FormGenerationProgressFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FormGenerationProgressFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGenerationProgressPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FormGenerationProgressFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGenerationProgressPayload>
        }
        findFirst: {
          args: Prisma.FormGenerationProgressFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGenerationProgressPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FormGenerationProgressFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGenerationProgressPayload>
        }
        findMany: {
          args: Prisma.FormGenerationProgressFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGenerationProgressPayload>[]
        }
        create: {
          args: Prisma.FormGenerationProgressCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGenerationProgressPayload>
        }
        createMany: {
          args: Prisma.FormGenerationProgressCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FormGenerationProgressCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGenerationProgressPayload>[]
        }
        delete: {
          args: Prisma.FormGenerationProgressDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGenerationProgressPayload>
        }
        update: {
          args: Prisma.FormGenerationProgressUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGenerationProgressPayload>
        }
        deleteMany: {
          args: Prisma.FormGenerationProgressDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FormGenerationProgressUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FormGenerationProgressUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGenerationProgressPayload>[]
        }
        upsert: {
          args: Prisma.FormGenerationProgressUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGenerationProgressPayload>
        }
        aggregate: {
          args: Prisma.FormGenerationProgressAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFormGenerationProgress>
        }
        groupBy: {
          args: Prisma.FormGenerationProgressGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FormGenerationProgressGroupByOutputType>[]
        }
        count: {
          args: Prisma.FormGenerationProgressCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FormGenerationProgressCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  photo: 'photo',
  googleId: 'googleId',
  status: 'status',
  failedLoginAttempts: 'failedLoginAttempts',
  lockedUntil: 'lockedUntil',
  isLocked: 'isLocked',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const RelationLoadStrategy = {
  query: 'query',
  join: 'join'
} as const

export type RelationLoadStrategy = (typeof RelationLoadStrategy)[keyof typeof RelationLoadStrategy]


export const RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


export const UserRoleScalarFieldEnum = {
  userId: 'userId',
  roleId: 'roleId',
  status: 'status'
} as const

export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


export const FileScalarFieldEnum = {
  id: 'id',
  fileUrl: 'fileUrl',
  thumbnailUrl: 'thumbnailUrl',
  size: 'size',
  isPrivate: 'isPrivate',
  title: 'title',
  userId: 'userId',
  fileType: 'fileType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


export const AuditLogScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  details: 'details',
  status: 'status',
  errorMessage: 'errorMessage'
} as const

export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


export const GroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  status: 'status',
  creatorId: 'creatorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type GroupScalarFieldEnum = (typeof GroupScalarFieldEnum)[keyof typeof GroupScalarFieldEnum]


export const GroupRoleScalarFieldEnum = {
  groupId: 'groupId',
  roleId: 'roleId',
  status: 'status'
} as const

export type GroupRoleScalarFieldEnum = (typeof GroupRoleScalarFieldEnum)[keyof typeof GroupRoleScalarFieldEnum]


export const ProcessScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  groupId: 'groupId',
  creatorId: 'creatorId',
  processFolderId: 'processFolderId',
  status: 'status',
  archived: 'archived',
  staffViewForms: 'staffViewForms',
  applicantViewProcessLevel: 'applicantViewProcessLevel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ProcessScalarFieldEnum = (typeof ProcessScalarFieldEnum)[keyof typeof ProcessScalarFieldEnum]


export const ProcessRoleScalarFieldEnum = {
  processId: 'processId',
  roleId: 'roleId',
  status: 'status'
} as const

export type ProcessRoleScalarFieldEnum = (typeof ProcessRoleScalarFieldEnum)[keyof typeof ProcessRoleScalarFieldEnum]


export const FolderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  creatorId: 'creatorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type FolderScalarFieldEnum = (typeof FolderScalarFieldEnum)[keyof typeof FolderScalarFieldEnum]


export const ProcessFolderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  creatorId: 'creatorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ProcessFolderScalarFieldEnum = (typeof ProcessFolderScalarFieldEnum)[keyof typeof ProcessFolderScalarFieldEnum]


export const FormScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  status: 'status',
  archived: 'archived',
  creatorId: 'creatorId',
  folderId: 'folderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  design: 'design'
} as const

export type FormScalarFieldEnum = (typeof FormScalarFieldEnum)[keyof typeof FormScalarFieldEnum]


export const FormResponseScalarFieldEnum = {
  id: 'id',
  formId: 'formId',
  applicantProcessId: 'applicantProcessId',
  responses: 'responses',
  createdAt: 'createdAt',
  processId: 'processId'
} as const

export type FormResponseScalarFieldEnum = (typeof FormResponseScalarFieldEnum)[keyof typeof FormResponseScalarFieldEnum]


export const ProcessFormScalarFieldEnum = {
  id: 'id',
  processId: 'processId',
  formId: 'formId',
  order: 'order',
  nextStepType: 'nextStepType',
  nextStepRoles: 'nextStepRoles',
  nextStaffId: 'nextStaffId',
  nextStepSpecifiedTo: 'nextStepSpecifiedTo',
  notificationType: 'notificationType',
  notificationRoles: 'notificationRoles',
  notificationToId: 'notificationToId',
  notificationComment: 'notificationComment',
  notifyApplicant: 'notifyApplicant',
  applicantNotificationContent: 'applicantNotificationContent',
  editApplicationStatus: 'editApplicationStatus',
  applicantViewFormAfterCompletion: 'applicantViewFormAfterCompletion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ProcessFormScalarFieldEnum = (typeof ProcessFormScalarFieldEnum)[keyof typeof ProcessFormScalarFieldEnum]


export const ApplicantProcessScalarFieldEnum = {
  id: 'id',
  applicantId: 'applicantId',
  processId: 'processId',
  status: 'status',
  createdAt: 'createdAt'
} as const

export type ApplicantProcessScalarFieldEnum = (typeof ApplicantProcessScalarFieldEnum)[keyof typeof ApplicantProcessScalarFieldEnum]


export const ProcessedApplicationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  processId: 'processId',
  applicantProcessId: 'applicantProcessId',
  formId: 'formId',
  formRoleIds: 'formRoleIds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ProcessedApplicationScalarFieldEnum = (typeof ProcessedApplicationScalarFieldEnum)[keyof typeof ProcessedApplicationScalarFieldEnum]


export const APCompletedFormScalarFieldEnum = {
  id: 'id',
  applicantProcessId: 'applicantProcessId',
  formId: 'formId',
  reviewerId: 'reviewerId',
  nextStaffId: 'nextStaffId',
  nextStepType: 'nextStepType',
  nextStepRoles: 'nextStepRoles',
  nextStepSpecifiedTo: 'nextStepSpecifiedTo',
  notificationType: 'notificationType',
  notificationToId: 'notificationToId',
  notificationToRoles: 'notificationToRoles',
  notificationComment: 'notificationComment',
  notifyApplicant: 'notifyApplicant',
  applicantNotificationContent: 'applicantNotificationContent',
  editApplicationStatus: 'editApplicationStatus',
  applicantViewFormAfterCompletion: 'applicantViewFormAfterCompletion',
  createdAt: 'createdAt'
} as const

export type APCompletedFormScalarFieldEnum = (typeof APCompletedFormScalarFieldEnum)[keyof typeof APCompletedFormScalarFieldEnum]


export const ProcessCommentScalarFieldEnum = {
  id: 'id',
  applicantProcessId: 'applicantProcessId',
  userId: 'userId',
  comment: 'comment',
  createdAt: 'createdAt'
} as const

export type ProcessCommentScalarFieldEnum = (typeof ProcessCommentScalarFieldEnum)[keyof typeof ProcessCommentScalarFieldEnum]


export const OrganizationUserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  superiorId: 'superiorId',
  title: 'title'
} as const

export type OrganizationUserScalarFieldEnum = (typeof OrganizationUserScalarFieldEnum)[keyof typeof OrganizationUserScalarFieldEnum]


export const DashboardScalarFieldEnum = {
  id: 'id',
  name: 'name',
  ownerId: 'ownerId',
  allowedUsers: 'allowedUsers',
  allowedRoles: 'allowedRoles',
  layout: 'layout',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type DashboardScalarFieldEnum = (typeof DashboardScalarFieldEnum)[keyof typeof DashboardScalarFieldEnum]


export const WidgetScalarFieldEnum = {
  id: 'id',
  dashboardId: 'dashboardId',
  description: 'description',
  title: 'title',
  visualizationType: 'visualizationType',
  config: 'config',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type WidgetScalarFieldEnum = (typeof WidgetScalarFieldEnum)[keyof typeof WidgetScalarFieldEnum]


export const WidgetSandboxScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  description: 'description',
  title: 'title',
  visualizationType: 'visualizationType',
  config: 'config',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isCommited: 'isCommited'
} as const

export type WidgetSandboxScalarFieldEnum = (typeof WidgetSandboxScalarFieldEnum)[keyof typeof WidgetSandboxScalarFieldEnum]


export const QrCodeDocumentScalarFieldEnum = {
  id: 'id',
  documentName: 'documentName',
  fileName: 'fileName',
  qrCodeId: 'qrCodeId',
  creatorId: 'creatorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type QrCodeDocumentScalarFieldEnum = (typeof QrCodeDocumentScalarFieldEnum)[keyof typeof QrCodeDocumentScalarFieldEnum]


export const OtpScalarFieldEnum = {
  id: 'id',
  email: 'email',
  otp: 'otp',
  expiresAt: 'expiresAt'
} as const

export type OtpScalarFieldEnum = (typeof OtpScalarFieldEnum)[keyof typeof OtpScalarFieldEnum]


export const ManagementScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  type: 'type',
  uploadedAt: 'uploadedAt',
  updatedAt: 'updatedAt'
} as const

export type ManagementScalarFieldEnum = (typeof ManagementScalarFieldEnum)[keyof typeof ManagementScalarFieldEnum]


export const AddToDatabaseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  status: 'status',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type AddToDatabaseScalarFieldEnum = (typeof AddToDatabaseScalarFieldEnum)[keyof typeof AddToDatabaseScalarFieldEnum]


export const AddToDatabaseTreeItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  status: 'status',
  parentId: 'parentId',
  addToDatabaseId: 'addToDatabaseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type AddToDatabaseTreeItemScalarFieldEnum = (typeof AddToDatabaseTreeItemScalarFieldEnum)[keyof typeof AddToDatabaseTreeItemScalarFieldEnum]


export const ChatScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  title: 'title',
  userId: 'userId',
  visibility: 'visibility',
  type: 'type'
} as const

export type ChatScalarFieldEnum = (typeof ChatScalarFieldEnum)[keyof typeof ChatScalarFieldEnum]


export const MessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  role: 'role',
  parts: 'parts',
  attachments: 'attachments',
  createdAt: 'createdAt'
} as const

export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


export const VoteScalarFieldEnum = {
  chatId: 'chatId',
  messageId: 'messageId',
  isUpvoted: 'isUpvoted'
} as const

export type VoteScalarFieldEnum = (typeof VoteScalarFieldEnum)[keyof typeof VoteScalarFieldEnum]


export const DocumentScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  title: 'title',
  content: 'content',
  kind: 'kind',
  userId: 'userId'
} as const

export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


export const SuggestionScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  documentCreatedAt: 'documentCreatedAt',
  originalText: 'originalText',
  suggestedText: 'suggestedText',
  description: 'description',
  isResolved: 'isResolved',
  userId: 'userId',
  createdAt: 'createdAt'
} as const

export type SuggestionScalarFieldEnum = (typeof SuggestionScalarFieldEnum)[keyof typeof SuggestionScalarFieldEnum]


export const ProcessSaveScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  rolesData: 'rolesData',
  processData: 'processData',
  stepsData: 'stepsData',
  formsData: 'formsData',
  isComplete: 'isComplete',
  createdAt: 'createdAt'
} as const

export type ProcessSaveScalarFieldEnum = (typeof ProcessSaveScalarFieldEnum)[keyof typeof ProcessSaveScalarFieldEnum]


export const FormGenerationProgressScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  status: 'status',
  progress: 'progress',
  message: 'message',
  userId: 'userId',
  formId: 'formId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type FormGenerationProgressScalarFieldEnum = (typeof FormGenerationProgressScalarFieldEnum)[keyof typeof FormGenerationProgressScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull
} as const

export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


export const JsonNullValueInput = {
  JsonNull: JsonNull
} as const

export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  photo: 'photo',
  googleId: 'googleId'
} as const

export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


export const RoleOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
} as const

export type RoleOrderByRelevanceFieldEnum = (typeof RoleOrderByRelevanceFieldEnum)[keyof typeof RoleOrderByRelevanceFieldEnum]


export const UserRoleOrderByRelevanceFieldEnum = {
  userId: 'userId',
  roleId: 'roleId'
} as const

export type UserRoleOrderByRelevanceFieldEnum = (typeof UserRoleOrderByRelevanceFieldEnum)[keyof typeof UserRoleOrderByRelevanceFieldEnum]


export const FileOrderByRelevanceFieldEnum = {
  id: 'id',
  fileUrl: 'fileUrl',
  thumbnailUrl: 'thumbnailUrl',
  title: 'title',
  userId: 'userId',
  fileType: 'fileType'
} as const

export type FileOrderByRelevanceFieldEnum = (typeof FileOrderByRelevanceFieldEnum)[keyof typeof FileOrderByRelevanceFieldEnum]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


export const AuditLogOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  status: 'status',
  errorMessage: 'errorMessage'
} as const

export type AuditLogOrderByRelevanceFieldEnum = (typeof AuditLogOrderByRelevanceFieldEnum)[keyof typeof AuditLogOrderByRelevanceFieldEnum]


export const GroupOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  creatorId: 'creatorId'
} as const

export type GroupOrderByRelevanceFieldEnum = (typeof GroupOrderByRelevanceFieldEnum)[keyof typeof GroupOrderByRelevanceFieldEnum]


export const GroupRoleOrderByRelevanceFieldEnum = {
  groupId: 'groupId',
  roleId: 'roleId'
} as const

export type GroupRoleOrderByRelevanceFieldEnum = (typeof GroupRoleOrderByRelevanceFieldEnum)[keyof typeof GroupRoleOrderByRelevanceFieldEnum]


export const ProcessOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  groupId: 'groupId',
  creatorId: 'creatorId',
  processFolderId: 'processFolderId'
} as const

export type ProcessOrderByRelevanceFieldEnum = (typeof ProcessOrderByRelevanceFieldEnum)[keyof typeof ProcessOrderByRelevanceFieldEnum]


export const ProcessRoleOrderByRelevanceFieldEnum = {
  processId: 'processId',
  roleId: 'roleId'
} as const

export type ProcessRoleOrderByRelevanceFieldEnum = (typeof ProcessRoleOrderByRelevanceFieldEnum)[keyof typeof ProcessRoleOrderByRelevanceFieldEnum]


export const FolderOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  creatorId: 'creatorId'
} as const

export type FolderOrderByRelevanceFieldEnum = (typeof FolderOrderByRelevanceFieldEnum)[keyof typeof FolderOrderByRelevanceFieldEnum]


export const ProcessFolderOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  creatorId: 'creatorId'
} as const

export type ProcessFolderOrderByRelevanceFieldEnum = (typeof ProcessFolderOrderByRelevanceFieldEnum)[keyof typeof ProcessFolderOrderByRelevanceFieldEnum]


export const FormOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  creatorId: 'creatorId',
  folderId: 'folderId'
} as const

export type FormOrderByRelevanceFieldEnum = (typeof FormOrderByRelevanceFieldEnum)[keyof typeof FormOrderByRelevanceFieldEnum]


export const FormResponseOrderByRelevanceFieldEnum = {
  id: 'id',
  formId: 'formId',
  applicantProcessId: 'applicantProcessId',
  processId: 'processId'
} as const

export type FormResponseOrderByRelevanceFieldEnum = (typeof FormResponseOrderByRelevanceFieldEnum)[keyof typeof FormResponseOrderByRelevanceFieldEnum]


export const ProcessFormOrderByRelevanceFieldEnum = {
  id: 'id',
  processId: 'processId',
  formId: 'formId',
  nextStepRoles: 'nextStepRoles',
  nextStaffId: 'nextStaffId',
  nextStepSpecifiedTo: 'nextStepSpecifiedTo',
  notificationRoles: 'notificationRoles',
  notificationToId: 'notificationToId',
  notificationComment: 'notificationComment',
  applicantNotificationContent: 'applicantNotificationContent'
} as const

export type ProcessFormOrderByRelevanceFieldEnum = (typeof ProcessFormOrderByRelevanceFieldEnum)[keyof typeof ProcessFormOrderByRelevanceFieldEnum]


export const ApplicantProcessOrderByRelevanceFieldEnum = {
  id: 'id',
  applicantId: 'applicantId',
  processId: 'processId'
} as const

export type ApplicantProcessOrderByRelevanceFieldEnum = (typeof ApplicantProcessOrderByRelevanceFieldEnum)[keyof typeof ApplicantProcessOrderByRelevanceFieldEnum]


export const ProcessedApplicationOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  processId: 'processId',
  applicantProcessId: 'applicantProcessId',
  formId: 'formId',
  formRoleIds: 'formRoleIds'
} as const

export type ProcessedApplicationOrderByRelevanceFieldEnum = (typeof ProcessedApplicationOrderByRelevanceFieldEnum)[keyof typeof ProcessedApplicationOrderByRelevanceFieldEnum]


export const APCompletedFormOrderByRelevanceFieldEnum = {
  id: 'id',
  applicantProcessId: 'applicantProcessId',
  formId: 'formId',
  reviewerId: 'reviewerId',
  nextStaffId: 'nextStaffId',
  nextStepRoles: 'nextStepRoles',
  nextStepSpecifiedTo: 'nextStepSpecifiedTo',
  notificationToId: 'notificationToId',
  notificationToRoles: 'notificationToRoles',
  notificationComment: 'notificationComment',
  applicantNotificationContent: 'applicantNotificationContent'
} as const

export type APCompletedFormOrderByRelevanceFieldEnum = (typeof APCompletedFormOrderByRelevanceFieldEnum)[keyof typeof APCompletedFormOrderByRelevanceFieldEnum]


export const ProcessCommentOrderByRelevanceFieldEnum = {
  id: 'id',
  applicantProcessId: 'applicantProcessId',
  userId: 'userId',
  comment: 'comment'
} as const

export type ProcessCommentOrderByRelevanceFieldEnum = (typeof ProcessCommentOrderByRelevanceFieldEnum)[keyof typeof ProcessCommentOrderByRelevanceFieldEnum]


export const OrganizationUserOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  superiorId: 'superiorId',
  title: 'title'
} as const

export type OrganizationUserOrderByRelevanceFieldEnum = (typeof OrganizationUserOrderByRelevanceFieldEnum)[keyof typeof OrganizationUserOrderByRelevanceFieldEnum]


export const DashboardOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  ownerId: 'ownerId',
  allowedUsers: 'allowedUsers',
  allowedRoles: 'allowedRoles'
} as const

export type DashboardOrderByRelevanceFieldEnum = (typeof DashboardOrderByRelevanceFieldEnum)[keyof typeof DashboardOrderByRelevanceFieldEnum]


export const WidgetOrderByRelevanceFieldEnum = {
  id: 'id',
  dashboardId: 'dashboardId',
  description: 'description',
  title: 'title',
  visualizationType: 'visualizationType'
} as const

export type WidgetOrderByRelevanceFieldEnum = (typeof WidgetOrderByRelevanceFieldEnum)[keyof typeof WidgetOrderByRelevanceFieldEnum]


export const WidgetSandboxOrderByRelevanceFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  description: 'description',
  title: 'title',
  visualizationType: 'visualizationType'
} as const

export type WidgetSandboxOrderByRelevanceFieldEnum = (typeof WidgetSandboxOrderByRelevanceFieldEnum)[keyof typeof WidgetSandboxOrderByRelevanceFieldEnum]


export const QrCodeDocumentOrderByRelevanceFieldEnum = {
  id: 'id',
  documentName: 'documentName',
  fileName: 'fileName',
  qrCodeId: 'qrCodeId',
  creatorId: 'creatorId'
} as const

export type QrCodeDocumentOrderByRelevanceFieldEnum = (typeof QrCodeDocumentOrderByRelevanceFieldEnum)[keyof typeof QrCodeDocumentOrderByRelevanceFieldEnum]


export const OtpOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  otp: 'otp'
} as const

export type OtpOrderByRelevanceFieldEnum = (typeof OtpOrderByRelevanceFieldEnum)[keyof typeof OtpOrderByRelevanceFieldEnum]


export const ManagementOrderByRelevanceFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  fileUrl: 'fileUrl'
} as const

export type ManagementOrderByRelevanceFieldEnum = (typeof ManagementOrderByRelevanceFieldEnum)[keyof typeof ManagementOrderByRelevanceFieldEnum]


export const AddToDatabaseOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  parentId: 'parentId'
} as const

export type AddToDatabaseOrderByRelevanceFieldEnum = (typeof AddToDatabaseOrderByRelevanceFieldEnum)[keyof typeof AddToDatabaseOrderByRelevanceFieldEnum]


export const AddToDatabaseTreeItemOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  parentId: 'parentId',
  addToDatabaseId: 'addToDatabaseId'
} as const

export type AddToDatabaseTreeItemOrderByRelevanceFieldEnum = (typeof AddToDatabaseTreeItemOrderByRelevanceFieldEnum)[keyof typeof AddToDatabaseTreeItemOrderByRelevanceFieldEnum]


export const ChatOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  userId: 'userId',
  visibility: 'visibility'
} as const

export type ChatOrderByRelevanceFieldEnum = (typeof ChatOrderByRelevanceFieldEnum)[keyof typeof ChatOrderByRelevanceFieldEnum]


export const MessageOrderByRelevanceFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  role: 'role'
} as const

export type MessageOrderByRelevanceFieldEnum = (typeof MessageOrderByRelevanceFieldEnum)[keyof typeof MessageOrderByRelevanceFieldEnum]


export const VoteOrderByRelevanceFieldEnum = {
  chatId: 'chatId',
  messageId: 'messageId'
} as const

export type VoteOrderByRelevanceFieldEnum = (typeof VoteOrderByRelevanceFieldEnum)[keyof typeof VoteOrderByRelevanceFieldEnum]


export const DocumentOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  kind: 'kind',
  userId: 'userId'
} as const

export type DocumentOrderByRelevanceFieldEnum = (typeof DocumentOrderByRelevanceFieldEnum)[keyof typeof DocumentOrderByRelevanceFieldEnum]


export const SuggestionOrderByRelevanceFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  originalText: 'originalText',
  suggestedText: 'suggestedText',
  description: 'description',
  userId: 'userId'
} as const

export type SuggestionOrderByRelevanceFieldEnum = (typeof SuggestionOrderByRelevanceFieldEnum)[keyof typeof SuggestionOrderByRelevanceFieldEnum]


export const ProcessSaveOrderByRelevanceFieldEnum = {
  id: 'id',
  chatId: 'chatId'
} as const

export type ProcessSaveOrderByRelevanceFieldEnum = (typeof ProcessSaveOrderByRelevanceFieldEnum)[keyof typeof ProcessSaveOrderByRelevanceFieldEnum]


export const FormGenerationProgressOrderByRelevanceFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  message: 'message',
  userId: 'userId',
  formId: 'formId'
} as const

export type FormGenerationProgressOrderByRelevanceFieldEnum = (typeof FormGenerationProgressOrderByRelevanceFieldEnum)[keyof typeof FormGenerationProgressOrderByRelevanceFieldEnum]



/**
 * Field references
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'UserStatus'
 */
export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


/**
 * Reference to a field of type 'UserStatus[]'
 */
export type ListEnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus[]'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'RoleStatus'
 */
export type EnumRoleStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleStatus'>
    


/**
 * Reference to a field of type 'RoleStatus[]'
 */
export type ListEnumRoleStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleStatus[]'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


/**
 * Reference to a field of type 'GroupStatus'
 */
export type EnumGroupStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GroupStatus'>
    


/**
 * Reference to a field of type 'GroupStatus[]'
 */
export type ListEnumGroupStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GroupStatus[]'>
    


/**
 * Reference to a field of type 'ProcessType'
 */
export type EnumProcessTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProcessType'>
    


/**
 * Reference to a field of type 'ProcessType[]'
 */
export type ListEnumProcessTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProcessType[]'>
    


/**
 * Reference to a field of type 'ProcessStatus'
 */
export type EnumProcessStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProcessStatus'>
    


/**
 * Reference to a field of type 'ProcessStatus[]'
 */
export type ListEnumProcessStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProcessStatus[]'>
    


/**
 * Reference to a field of type 'FormType'
 */
export type EnumFormTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FormType'>
    


/**
 * Reference to a field of type 'FormType[]'
 */
export type ListEnumFormTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FormType[]'>
    


/**
 * Reference to a field of type 'FormStatus'
 */
export type EnumFormStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FormStatus'>
    


/**
 * Reference to a field of type 'FormStatus[]'
 */
export type ListEnumFormStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FormStatus[]'>
    


/**
 * Reference to a field of type 'NextStepType'
 */
export type EnumNextStepTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NextStepType'>
    


/**
 * Reference to a field of type 'NextStepType[]'
 */
export type ListEnumNextStepTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NextStepType[]'>
    


/**
 * Reference to a field of type 'ManagementType'
 */
export type EnumManagementTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ManagementType'>
    


/**
 * Reference to a field of type 'ManagementType[]'
 */
export type ListEnumManagementTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ManagementType[]'>
    


/**
 * Reference to a field of type 'AddToDatabaseStatus'
 */
export type EnumAddToDatabaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AddToDatabaseStatus'>
    


/**
 * Reference to a field of type 'AddToDatabaseStatus[]'
 */
export type ListEnumAddToDatabaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AddToDatabaseStatus[]'>
    


/**
 * Reference to a field of type 'ChatAIType'
 */
export type EnumChatAITypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChatAIType'>
    


/**
 * Reference to a field of type 'ChatAIType[]'
 */
export type ListEnumChatAITypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChatAIType[]'>
    


/**
 * Reference to a field of type 'FormGenerationStatus'
 */
export type EnumFormGenerationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FormGenerationStatus'>
    


/**
 * Reference to a field of type 'FormGenerationStatus[]'
 */
export type ListEnumFormGenerationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FormGenerationStatus[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   * 
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * 
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  user?: Prisma.UserOmit
  role?: Prisma.RoleOmit
  userRole?: Prisma.UserRoleOmit
  file?: Prisma.FileOmit
  auditLog?: Prisma.AuditLogOmit
  group?: Prisma.GroupOmit
  groupRole?: Prisma.GroupRoleOmit
  process?: Prisma.ProcessOmit
  processRole?: Prisma.ProcessRoleOmit
  folder?: Prisma.FolderOmit
  processFolder?: Prisma.ProcessFolderOmit
  form?: Prisma.FormOmit
  formResponse?: Prisma.FormResponseOmit
  processForm?: Prisma.ProcessFormOmit
  applicantProcess?: Prisma.ApplicantProcessOmit
  processedApplication?: Prisma.ProcessedApplicationOmit
  aPCompletedForm?: Prisma.APCompletedFormOmit
  processComment?: Prisma.ProcessCommentOmit
  organizationUser?: Prisma.OrganizationUserOmit
  dashboard?: Prisma.DashboardOmit
  widget?: Prisma.WidgetOmit
  widgetSandbox?: Prisma.WidgetSandboxOmit
  qrCodeDocument?: Prisma.QrCodeDocumentOmit
  otp?: Prisma.OtpOmit
  management?: Prisma.ManagementOmit
  addToDatabase?: Prisma.AddToDatabaseOmit
  addToDatabaseTreeItem?: Prisma.AddToDatabaseTreeItemOmit
  chat?: Prisma.ChatOmit
  message?: Prisma.MessageOmit
  vote?: Prisma.VoteOmit
  document?: Prisma.DocumentOmit
  suggestion?: Prisma.SuggestionOmit
  processSave?: Prisma.ProcessSaveOmit
  formGenerationProgress?: Prisma.FormGenerationProgressOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>;

export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy'

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

