
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  photo: 'photo',
  googleId: 'googleId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelationLoadStrategy = {
  query: 'query',
  join: 'join'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  userId: 'userId',
  roleId: 'roleId',
  status: 'status'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  fileUrl: 'fileUrl',
  thumbnailUrl: 'thumbnailUrl',
  size: 'size',
  isPrivate: 'isPrivate',
  title: 'title',
  userId: 'userId',
  fileType: 'fileType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  details: 'details',
  status: 'status',
  errorMessage: 'errorMessage'
};

exports.Prisma.GroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  status: 'status',
  creatorId: 'creatorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GroupRoleScalarFieldEnum = {
  groupId: 'groupId',
  roleId: 'roleId',
  status: 'status'
};

exports.Prisma.ProcessScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  groupId: 'groupId',
  creatorId: 'creatorId',
  status: 'status',
  archived: 'archived',
  staffViewForms: 'staffViewForms',
  applicantViewProcessLevel: 'applicantViewProcessLevel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProcessRoleScalarFieldEnum = {
  processId: 'processId',
  roleId: 'roleId',
  status: 'status'
};

exports.Prisma.FolderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  creatorId: 'creatorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FormScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  status: 'status',
  archived: 'archived',
  creatorId: 'creatorId',
  folderId: 'folderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  design: 'design'
};

exports.Prisma.FormResponseScalarFieldEnum = {
  id: 'id',
  formId: 'formId',
  applicantProcessId: 'applicantProcessId',
  responses: 'responses',
  createdAt: 'createdAt',
  processId: 'processId'
};

exports.Prisma.ProcessFormScalarFieldEnum = {
  id: 'id',
  processId: 'processId',
  formId: 'formId',
  order: 'order',
  nextStepType: 'nextStepType',
  nextStepRoles: 'nextStepRoles',
  nextStaffId: 'nextStaffId',
  nextStepSpecifiedTo: 'nextStepSpecifiedTo',
  notificationType: 'notificationType',
  notificationRoles: 'notificationRoles',
  notificationToId: 'notificationToId',
  notificationComment: 'notificationComment',
  notifyApplicant: 'notifyApplicant',
  applicantNotificationContent: 'applicantNotificationContent',
  editApplicationStatus: 'editApplicationStatus',
  applicantViewFormAfterCompletion: 'applicantViewFormAfterCompletion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApplicantProcessScalarFieldEnum = {
  id: 'id',
  applicantId: 'applicantId',
  processId: 'processId',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.ProcessedApplicationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  processId: 'processId',
  applicantProcessId: 'applicantProcessId',
  formId: 'formId',
  formRoleIds: 'formRoleIds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.APCompletedFormScalarFieldEnum = {
  id: 'id',
  applicantProcessId: 'applicantProcessId',
  formId: 'formId',
  reviewerId: 'reviewerId',
  nextStaffId: 'nextStaffId',
  nextStepType: 'nextStepType',
  nextStepRoles: 'nextStepRoles',
  nextStepSpecifiedTo: 'nextStepSpecifiedTo',
  notificationType: 'notificationType',
  notificationToId: 'notificationToId',
  notificationToRoles: 'notificationToRoles',
  notificationComment: 'notificationComment',
  notifyApplicant: 'notifyApplicant',
  applicantNotificationContent: 'applicantNotificationContent',
  editApplicationStatus: 'editApplicationStatus',
  applicantViewFormAfterCompletion: 'applicantViewFormAfterCompletion',
  createdAt: 'createdAt'
};

exports.Prisma.ProcessCommentScalarFieldEnum = {
  id: 'id',
  applicantProcessId: 'applicantProcessId',
  userId: 'userId',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.OrganizationUserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  superiorId: 'superiorId',
  title: 'title'
};

exports.Prisma.DashboardScalarFieldEnum = {
  id: 'id',
  name: 'name',
  ownerId: 'ownerId',
  allowedUsers: 'allowedUsers',
  allowedRoles: 'allowedRoles',
  layout: 'layout',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WidgetScalarFieldEnum = {
  id: 'id',
  dashboardId: 'dashboardId',
  title: 'title',
  visualizationType: 'visualizationType',
  config: 'config',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QrCodeDocumentScalarFieldEnum = {
  id: 'id',
  documentName: 'documentName',
  fileName: 'fileName',
  qrCodeId: 'qrCodeId',
  creatorId: 'creatorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OtpScalarFieldEnum = {
  id: 'id',
  email: 'email',
  otp: 'otp',
  expiresAt: 'expiresAt'
};

exports.Prisma.ManagementScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  type: 'type',
  uploadedAt: 'uploadedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddToDatabaseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  status: 'status',
  levels: 'levels',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  title: 'title',
  userId: 'userId',
  visibility: 'visibility'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  role: 'role',
  parts: 'parts',
  attachments: 'attachments',
  createdAt: 'createdAt'
};

exports.Prisma.VoteScalarFieldEnum = {
  chatId: 'chatId',
  messageId: 'messageId',
  isUpvoted: 'isUpvoted'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  title: 'title',
  content: 'content',
  kind: 'kind',
  userId: 'userId'
};

exports.Prisma.SuggestionScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  documentCreatedAt: 'documentCreatedAt',
  originalText: 'originalText',
  suggestedText: 'suggestedText',
  description: 'description',
  isResolved: 'isResolved',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.ProcessSaveScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  rolesData: 'rolesData',
  processData: 'processData',
  stepsData: 'stepsData',
  formsData: 'formsData',
  isComplete: 'isComplete',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  photo: 'photo',
  googleId: 'googleId'
};

exports.Prisma.RoleOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.UserRoleOrderByRelevanceFieldEnum = {
  userId: 'userId',
  roleId: 'roleId'
};

exports.Prisma.FileOrderByRelevanceFieldEnum = {
  id: 'id',
  fileUrl: 'fileUrl',
  thumbnailUrl: 'thumbnailUrl',
  title: 'title',
  userId: 'userId',
  fileType: 'fileType'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.AuditLogOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  status: 'status',
  errorMessage: 'errorMessage'
};

exports.Prisma.GroupOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  creatorId: 'creatorId'
};

exports.Prisma.GroupRoleOrderByRelevanceFieldEnum = {
  groupId: 'groupId',
  roleId: 'roleId'
};

exports.Prisma.ProcessOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  groupId: 'groupId',
  creatorId: 'creatorId'
};

exports.Prisma.ProcessRoleOrderByRelevanceFieldEnum = {
  processId: 'processId',
  roleId: 'roleId'
};

exports.Prisma.FolderOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  creatorId: 'creatorId'
};

exports.Prisma.FormOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  creatorId: 'creatorId',
  folderId: 'folderId'
};

exports.Prisma.FormResponseOrderByRelevanceFieldEnum = {
  id: 'id',
  formId: 'formId',
  applicantProcessId: 'applicantProcessId',
  processId: 'processId'
};

exports.Prisma.ProcessFormOrderByRelevanceFieldEnum = {
  id: 'id',
  processId: 'processId',
  formId: 'formId',
  nextStepRoles: 'nextStepRoles',
  nextStaffId: 'nextStaffId',
  nextStepSpecifiedTo: 'nextStepSpecifiedTo',
  notificationRoles: 'notificationRoles',
  notificationToId: 'notificationToId',
  notificationComment: 'notificationComment',
  applicantNotificationContent: 'applicantNotificationContent'
};

exports.Prisma.ApplicantProcessOrderByRelevanceFieldEnum = {
  id: 'id',
  applicantId: 'applicantId',
  processId: 'processId'
};

exports.Prisma.ProcessedApplicationOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  processId: 'processId',
  applicantProcessId: 'applicantProcessId',
  formId: 'formId',
  formRoleIds: 'formRoleIds'
};

exports.Prisma.APCompletedFormOrderByRelevanceFieldEnum = {
  id: 'id',
  applicantProcessId: 'applicantProcessId',
  formId: 'formId',
  reviewerId: 'reviewerId',
  nextStaffId: 'nextStaffId',
  nextStepRoles: 'nextStepRoles',
  nextStepSpecifiedTo: 'nextStepSpecifiedTo',
  notificationToId: 'notificationToId',
  notificationToRoles: 'notificationToRoles',
  notificationComment: 'notificationComment',
  applicantNotificationContent: 'applicantNotificationContent'
};

exports.Prisma.ProcessCommentOrderByRelevanceFieldEnum = {
  id: 'id',
  applicantProcessId: 'applicantProcessId',
  userId: 'userId',
  comment: 'comment'
};

exports.Prisma.OrganizationUserOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  superiorId: 'superiorId',
  title: 'title'
};

exports.Prisma.DashboardOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  ownerId: 'ownerId',
  allowedUsers: 'allowedUsers',
  allowedRoles: 'allowedRoles'
};

exports.Prisma.WidgetOrderByRelevanceFieldEnum = {
  id: 'id',
  dashboardId: 'dashboardId',
  title: 'title',
  visualizationType: 'visualizationType'
};

exports.Prisma.QrCodeDocumentOrderByRelevanceFieldEnum = {
  id: 'id',
  documentName: 'documentName',
  fileName: 'fileName',
  qrCodeId: 'qrCodeId',
  creatorId: 'creatorId'
};

exports.Prisma.OtpOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  otp: 'otp'
};

exports.Prisma.ManagementOrderByRelevanceFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  fileUrl: 'fileUrl'
};

exports.Prisma.AddToDatabaseOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ChatOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  userId: 'userId',
  visibility: 'visibility'
};

exports.Prisma.MessageOrderByRelevanceFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  role: 'role'
};

exports.Prisma.VoteOrderByRelevanceFieldEnum = {
  chatId: 'chatId',
  messageId: 'messageId'
};

exports.Prisma.DocumentOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  kind: 'kind',
  userId: 'userId'
};

exports.Prisma.SuggestionOrderByRelevanceFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  originalText: 'originalText',
  suggestedText: 'suggestedText',
  description: 'description',
  userId: 'userId'
};

exports.Prisma.ProcessSaveOrderByRelevanceFieldEnum = {
  id: 'id',
  chatId: 'chatId'
};
exports.UserStatus = exports.$Enums.UserStatus = {
  ENABLED: 'ENABLED',
  DISABLED: 'DISABLED',
  PENDING: 'PENDING'
};

exports.RoleStatus = exports.$Enums.RoleStatus = {
  ENABLED: 'ENABLED',
  DISABLED: 'DISABLED'
};

exports.GroupStatus = exports.$Enums.GroupStatus = {
  ENABLED: 'ENABLED',
  DISABLED: 'DISABLED'
};

exports.ProcessType = exports.$Enums.ProcessType = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE'
};

exports.ProcessStatus = exports.$Enums.ProcessStatus = {
  ENABLED: 'ENABLED',
  DISABLED: 'DISABLED'
};

exports.FormType = exports.$Enums.FormType = {
  PUBLIC: 'PUBLIC',
  INTERNAL: 'INTERNAL'
};

exports.FormStatus = exports.$Enums.FormStatus = {
  ENABLED: 'ENABLED',
  DISABLED: 'DISABLED'
};

exports.NextStepType = exports.$Enums.NextStepType = {
  STATIC: 'STATIC',
  DYNAMIC: 'DYNAMIC',
  FOLLOW_ORGANIZATION_CHART: 'FOLLOW_ORGANIZATION_CHART',
  NOT_APPLICABLE: 'NOT_APPLICABLE'
};

exports.ManagementType = exports.$Enums.ManagementType = {
  HEADER: 'HEADER',
  FOOTER: 'FOOTER'
};

exports.AddToDatabaseStatus = exports.$Enums.AddToDatabaseStatus = {
  ENABLED: 'ENABLED',
  DISABLED: 'DISABLED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Role: 'Role',
  UserRole: 'UserRole',
  File: 'File',
  AuditLog: 'AuditLog',
  Group: 'Group',
  GroupRole: 'GroupRole',
  Process: 'Process',
  ProcessRole: 'ProcessRole',
  Folder: 'Folder',
  Form: 'Form',
  FormResponse: 'FormResponse',
  ProcessForm: 'ProcessForm',
  ApplicantProcess: 'ApplicantProcess',
  ProcessedApplication: 'ProcessedApplication',
  APCompletedForm: 'APCompletedForm',
  ProcessComment: 'ProcessComment',
  OrganizationUser: 'OrganizationUser',
  Dashboard: 'Dashboard',
  Widget: 'Widget',
  QrCodeDocument: 'QrCodeDocument',
  Otp: 'Otp',
  Management: 'Management',
  AddToDatabase: 'AddToDatabase',
  Chat: 'Chat',
  Message: 'Message',
  Vote: 'Vote',
  Document: 'Document',
  Suggestion: 'Suggestion',
  ProcessSave: 'ProcessSave'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
