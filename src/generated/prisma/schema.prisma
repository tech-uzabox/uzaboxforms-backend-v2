// schema.prisma

generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Core Models -- -

model User {
  id        String     @id @default(uuid()) @db.Uuid
  email     String     @unique @db.VarChar(255)
  password  String     @db.VarChar(255)
  firstName String?
  lastName  String?
  photo     String?
  googleId  String?    @unique
  status    UserStatus @default(ENABLED)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  roles              UserRole[]
  files              File[]
  auditLogs          AuditLog[]
  createdForms       Form[]             @relation("FormCreator")
  createdGroups      Group[]            @relation("GroupCreator")
  createdProcesses   Process[]          @relation("ProcessCreator")
  organization       OrganizationUser?
  applicantProcesses ApplicantProcess[]

  @@index([email])
  @@map("users")
}

enum UserStatus {
  ENABLED
  DISABLED
  PENDING
}

model Role {
  id          String     @id @default(uuid()) @db.Uuid
  name        String     @unique
  description String?
  status      RoleStatus @default(ENABLED)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  users     UserRole[]
  groups    GroupRole[]
  processes ProcessRole[]

  @@map("roles")
}

enum RoleStatus {
  ENABLED
  DISABLED
}

model UserRole {
  userId String     @db.Uuid
  roleId String     @db.Uuid
  status RoleStatus @default(ENABLED)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model File {
  id           String   @id @default(uuid()) @db.Uuid
  fileUrl      String   @db.VarChar(255)
  thumbnailUrl String?
  size         Int
  isPrivate    Boolean  @default(false)
  title        String   @db.VarChar(255)
  userId       String   @db.Uuid
  fileType     String   @db.VarChar(255)
  createdAt    DateTime @default(now()) @db.Timestamp(0)
  updatedAt    DateTime @updatedAt @db.Timestamp(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("files")
}

model AuditLog {
  id           String   @id @default(uuid()) @db.Uuid
  timestamp    DateTime @default(now())
  userId       String?  @db.Uuid
  action       String
  resource     String?
  resourceId   String?
  details      Json?
  status       String
  errorMessage String?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, action, resource])
  @@map("audit_logs")
}

// --- Group & Process Models ---

model Group {
  id        String      @id @default(uuid()) @db.Uuid
  name      String      @unique
  status    GroupStatus @default(ENABLED)
  creatorId String      @db.Uuid
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  creator   User        @relation("GroupCreator", fields: [creatorId], references: [id])
  roles     GroupRole[]
  processes Process[]

  @@map("groups")
}

enum GroupStatus {
  ENABLED
  DISABLED
}

model GroupRole {
  groupId String     @db.Uuid
  roleId  String     @db.Uuid
  status  RoleStatus @default(ENABLED)

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role  Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([groupId, roleId])
  @@map("group_roles")
}

model Process {
  id                        String        @id @default(uuid()) @db.Uuid
  name                      String
  type                      ProcessType   @default(PRIVATE)
  groupId                   String        @db.Uuid
  creatorId                 String        @db.Uuid
  status                    ProcessStatus @default(ENABLED)
  archived                  Boolean       @default(false)
  staffViewForms            Boolean       @default(false)
  applicantViewProcessLevel Boolean       @default(false)
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt

  group              Group              @relation(fields: [groupId], references: [id])
  creator            User               @relation("ProcessCreator", fields: [creatorId], references: [id])
  roles              ProcessRole[]
  forms              ProcessForm[]
  applicantProcesses ApplicantProcess[]
  formResponses      FormResponse[]

  @@index([groupId])
  @@index([creatorId])
  @@map("processes")
}

enum ProcessType {
  PUBLIC
  PRIVATE
}

enum ProcessStatus {
  ENABLED
  DISABLED
}

model ProcessRole {
  processId String     @db.Uuid
  roleId    String     @db.Uuid
  status    RoleStatus @default(ENABLED)

  process Process @relation(fields: [processId], references: [id], onDelete: Cascade)
  role    Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([processId, roleId])
  @@map("process_roles")
}

// --- Form Models ---

model Form {
  id        String     @id @default(uuid()) @db.Uuid
  name      String
  type      FormType   @default(INTERNAL)
  status    FormStatus @default(ENABLED)
  archived  Boolean    @default(false)
  creatorId String     @db.Uuid
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  creator      User           @relation("FormCreator", fields: [creatorId], references: [id])
  design       Json? // Storing complex, nested form design as JSON is appropriate here
  responses    FormResponse[]
  processForms ProcessForm[]

  @@index([creatorId])
  @@map("forms")
}

enum FormType {
  PUBLIC
  INTERNAL
}

enum FormStatus {
  ENABLED
  DISABLED
}

model FormResponse {
  id                 String   @id @default(uuid()) @db.Uuid
  formId             String   @db.Uuid
  processId          String   @db.Uuid
  applicantProcessId String   @db.Uuid
  responses          Json // Storing flexible response data as JSON is appropriate
  createdAt          DateTime @default(now())

  form             Form             @relation(fields: [formId], references: [id], onDelete: Cascade)
  process          Process          @relation(fields: [processId], references: [id], onDelete: Cascade)
  applicantProcess ApplicantProcess @relation(fields: [applicantProcessId], references: [id], onDelete: Cascade)

  @@unique([formId, applicantProcessId])
  @@index([formId])
  @@index([processId])
  @@index([applicantProcessId])
  @@map("form_responses")
}

// --- Process Workflow Models ---

model ProcessForm {
  id        String @id @default(uuid()) @db.Uuid
  processId String @db.Uuid
  formId    String @db.Uuid
  order     Int // To define the sequence of forms in a process

  // Workflow Logic
  nextStepType  NextStepType @default(NOT_APPLICABLE)
  nextStepRoles String[] // Array of role IDs for DYNAMIC
  nextStaffId   String?      @db.Uuid // User ID for STATIC

  // Notification Logic
  notificationType             NextStepType @default(NOT_APPLICABLE)
  notificationRoles            String[] // Array of role IDs
  notificationToId             String?      @db.Uuid // User ID
  notificationComment          String?
  notifyApplicant              Boolean      @default(false)
  applicantNotificationContent String?

  process Process @relation(fields: [processId], references: [id], onDelete: Cascade)
  form    Form    @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@index([processId, formId])
  @@map("process_forms")
}

enum NextStepType {
  STATIC
  DYNAMIC
  FOLLOW_ORGANIZATION_CHART
  NOT_APPLICABLE
}

model ApplicantProcess {
  id          String        @id @default(uuid()) @db.Uuid
  applicantId String        @db.Uuid
  processId   String        @db.Uuid
  status      ProcessStatus @default(ENABLED)
  createdAt   DateTime      @default(now())

  applicant      User              @relation(fields: [applicantId], references: [id])
  process        Process           @relation(fields: [processId], references: [id])
  completedForms APCompletedForm[]
  responses      FormResponse[]
  comments       ProcessComment[]

  @@index([applicantId])
  @@index([processId])
  @@map("applicant_processes")
}

model APCompletedForm {
  id                 String   @id @default(uuid()) @db.Uuid
  applicantProcessId String   @db.Uuid
  formId             String   @db.Uuid
  reviewerId         String?  @db.Uuid // User who completed/reviewed this step
  createdAt          DateTime @default(now())

  applicantProcess ApplicantProcess @relation(fields: [applicantProcessId], references: [id], onDelete: Cascade)

  @@index([applicantProcessId])
  @@map("ap_completed_forms")
}

model ProcessComment {
  id                 String   @id @default(uuid()) @db.Uuid
  applicantProcessId String   @db.Uuid
  userId             String   @db.Uuid
  comment            String
  createdAt          DateTime @default(now())

  applicantProcess ApplicantProcess @relation(fields: [applicantProcessId], references: [id], onDelete: Cascade)

  @@index([applicantProcessId])
  @@index([userId])
  @@map("process_comments")
}

// --- Organization, Dashboard, QR ---

model OrganizationUser {
  id         String  @id @default(uuid()) @db.Uuid
  userId     String  @unique @db.Uuid
  superiorId String? @db.Uuid

  title String

  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  superior     OrganizationUser?  @relation("Hierarchy", fields: [superiorId], references: [id], onDelete: SetNull)
  subordinates OrganizationUser[] @relation("Hierarchy")

  @@map("organization_users")
}

model Dashboard {
  id           String   @id @default(uuid()) @db.Uuid
  name         String
  ownerId      String   @db.Uuid
  allowedUsers String[] // Array of user IDs
  allowedRoles String[] // Array of role IDs
  layout       Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  widgets Widget[]

  @@index([ownerId])
  @@map("dashboards")
}

model Widget {
  id                String   @id @default(uuid()) @db.Uuid
  dashboardId       String   @db.Uuid
  title             String
  visualizationType String
  config            Json // Store all metric, groupBy, filter, etc. config here
  order             Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  dashboard Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  @@index([dashboardId])
  @@map("widgets")
}

model QrCodeDocument {
  id           String   @id @default(uuid()) @db.Uuid
  documentName String
  fileName     String
  qrCodeId     String   @unique
  creatorId    String   @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([creatorId])
  @@map("qr_code_documents")
}

model Otp {
  id        String   @id @default(uuid()) @db.Uuid
  email     String
  otp       String
  expiresAt DateTime

  @@index([email])
  @@map("otps")
}

model Management {
  id         String         @id @default(uuid()) @db.Uuid
  fileName   String
  type       ManagementType
  uploadedAt DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@map("management")
}

enum ManagementType {
  HEADER
  FOOTER
}

model AddToDatabase {
  id        String              @id @default(uuid()) @db.Uuid
  name      String
  status    AddToDatabaseStatus @default(ENABLED)
  levels    Json // Store hierarchical levels as JSON
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@map("add_to_databases")
}

enum AddToDatabaseStatus {
  ENABLED
  DISABLED
}
