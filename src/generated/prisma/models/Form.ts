
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Form` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Form
 * 
 */
export type FormModel = runtime.Types.Result.DefaultSelection<Prisma.$FormPayload>

export type AggregateForm = {
  _count: FormCountAggregateOutputType | null
  _min: FormMinAggregateOutputType | null
  _max: FormMaxAggregateOutputType | null
}

export type FormMinAggregateOutputType = {
  id: string | null
  name: string | null
  type: $Enums.FormType | null
  status: $Enums.FormStatus | null
  archived: boolean | null
  creatorId: string | null
  folderId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FormMaxAggregateOutputType = {
  id: string | null
  name: string | null
  type: $Enums.FormType | null
  status: $Enums.FormStatus | null
  archived: boolean | null
  creatorId: string | null
  folderId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FormCountAggregateOutputType = {
  id: number
  name: number
  type: number
  status: number
  archived: number
  creatorId: number
  folderId: number
  createdAt: number
  updatedAt: number
  design: number
  _all: number
}


export type FormMinAggregateInputType = {
  id?: true
  name?: true
  type?: true
  status?: true
  archived?: true
  creatorId?: true
  folderId?: true
  createdAt?: true
  updatedAt?: true
}

export type FormMaxAggregateInputType = {
  id?: true
  name?: true
  type?: true
  status?: true
  archived?: true
  creatorId?: true
  folderId?: true
  createdAt?: true
  updatedAt?: true
}

export type FormCountAggregateInputType = {
  id?: true
  name?: true
  type?: true
  status?: true
  archived?: true
  creatorId?: true
  folderId?: true
  createdAt?: true
  updatedAt?: true
  design?: true
  _all?: true
}

export type FormAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Form to aggregate.
   */
  where?: Prisma.FormWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Forms to fetch.
   */
  orderBy?: Prisma.FormOrderByWithRelationInput | Prisma.FormOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FormWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Forms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Forms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Forms
  **/
  _count?: true | FormCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FormMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FormMaxAggregateInputType
}

export type GetFormAggregateType<T extends FormAggregateArgs> = {
      [P in keyof T & keyof AggregateForm]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateForm[P]>
    : Prisma.GetScalarType<T[P], AggregateForm[P]>
}




export type FormGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormWhereInput
  orderBy?: Prisma.FormOrderByWithAggregationInput | Prisma.FormOrderByWithAggregationInput[]
  by: Prisma.FormScalarFieldEnum[] | Prisma.FormScalarFieldEnum
  having?: Prisma.FormScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FormCountAggregateInputType | true
  _min?: FormMinAggregateInputType
  _max?: FormMaxAggregateInputType
}

export type FormGroupByOutputType = {
  id: string
  name: string
  type: $Enums.FormType
  status: $Enums.FormStatus
  archived: boolean
  creatorId: string
  folderId: string | null
  createdAt: Date
  updatedAt: Date
  design: runtime.JsonValue | null
  _count: FormCountAggregateOutputType | null
  _min: FormMinAggregateOutputType | null
  _max: FormMaxAggregateOutputType | null
}

type GetFormGroupByPayload<T extends FormGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FormGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FormGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FormGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FormGroupByOutputType[P]>
      }
    >
  >



export type FormWhereInput = {
  AND?: Prisma.FormWhereInput | Prisma.FormWhereInput[]
  OR?: Prisma.FormWhereInput[]
  NOT?: Prisma.FormWhereInput | Prisma.FormWhereInput[]
  id?: Prisma.UuidFilter<"Form"> | string
  name?: Prisma.StringFilter<"Form"> | string
  type?: Prisma.EnumFormTypeFilter<"Form"> | $Enums.FormType
  status?: Prisma.EnumFormStatusFilter<"Form"> | $Enums.FormStatus
  archived?: Prisma.BoolFilter<"Form"> | boolean
  creatorId?: Prisma.UuidFilter<"Form"> | string
  folderId?: Prisma.UuidNullableFilter<"Form"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Form"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Form"> | Date | string
  design?: Prisma.JsonNullableFilter<"Form">
  responses?: Prisma.FormResponseListRelationFilter
  creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  folder?: Prisma.XOR<Prisma.FolderNullableScalarRelationFilter, Prisma.FolderWhereInput> | null
  processForms?: Prisma.ProcessFormListRelationFilter
}

export type FormOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  archived?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  folderId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  design?: Prisma.SortOrderInput | Prisma.SortOrder
  responses?: Prisma.FormResponseOrderByRelationAggregateInput
  creator?: Prisma.UserOrderByWithRelationInput
  folder?: Prisma.FolderOrderByWithRelationInput
  processForms?: Prisma.ProcessFormOrderByRelationAggregateInput
  _relevance?: Prisma.FormOrderByRelevanceInput
}

export type FormWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FormWhereInput | Prisma.FormWhereInput[]
  OR?: Prisma.FormWhereInput[]
  NOT?: Prisma.FormWhereInput | Prisma.FormWhereInput[]
  name?: Prisma.StringFilter<"Form"> | string
  type?: Prisma.EnumFormTypeFilter<"Form"> | $Enums.FormType
  status?: Prisma.EnumFormStatusFilter<"Form"> | $Enums.FormStatus
  archived?: Prisma.BoolFilter<"Form"> | boolean
  creatorId?: Prisma.UuidFilter<"Form"> | string
  folderId?: Prisma.UuidNullableFilter<"Form"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Form"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Form"> | Date | string
  design?: Prisma.JsonNullableFilter<"Form">
  responses?: Prisma.FormResponseListRelationFilter
  creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  folder?: Prisma.XOR<Prisma.FolderNullableScalarRelationFilter, Prisma.FolderWhereInput> | null
  processForms?: Prisma.ProcessFormListRelationFilter
}, "id">

export type FormOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  archived?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  folderId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  design?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.FormCountOrderByAggregateInput
  _max?: Prisma.FormMaxOrderByAggregateInput
  _min?: Prisma.FormMinOrderByAggregateInput
}

export type FormScalarWhereWithAggregatesInput = {
  AND?: Prisma.FormScalarWhereWithAggregatesInput | Prisma.FormScalarWhereWithAggregatesInput[]
  OR?: Prisma.FormScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FormScalarWhereWithAggregatesInput | Prisma.FormScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Form"> | string
  name?: Prisma.StringWithAggregatesFilter<"Form"> | string
  type?: Prisma.EnumFormTypeWithAggregatesFilter<"Form"> | $Enums.FormType
  status?: Prisma.EnumFormStatusWithAggregatesFilter<"Form"> | $Enums.FormStatus
  archived?: Prisma.BoolWithAggregatesFilter<"Form"> | boolean
  creatorId?: Prisma.UuidWithAggregatesFilter<"Form"> | string
  folderId?: Prisma.UuidNullableWithAggregatesFilter<"Form"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Form"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Form"> | Date | string
  design?: Prisma.JsonNullableWithAggregatesFilter<"Form">
}

export type FormCreateInput = {
  id?: string
  name: string
  type?: $Enums.FormType
  status?: $Enums.FormStatus
  archived?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  responses?: Prisma.FormResponseCreateNestedManyWithoutFormInput
  creator: Prisma.UserCreateNestedOneWithoutCreatedFormsInput
  folder?: Prisma.FolderCreateNestedOneWithoutFormsInput
  processForms?: Prisma.ProcessFormCreateNestedManyWithoutFormInput
}

export type FormUncheckedCreateInput = {
  id?: string
  name: string
  type?: $Enums.FormType
  status?: $Enums.FormStatus
  archived?: boolean
  creatorId: string
  folderId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  responses?: Prisma.FormResponseUncheckedCreateNestedManyWithoutFormInput
  processForms?: Prisma.ProcessFormUncheckedCreateNestedManyWithoutFormInput
}

export type FormUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  archived?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  responses?: Prisma.FormResponseUpdateManyWithoutFormNestedInput
  creator?: Prisma.UserUpdateOneRequiredWithoutCreatedFormsNestedInput
  folder?: Prisma.FolderUpdateOneWithoutFormsNestedInput
  processForms?: Prisma.ProcessFormUpdateManyWithoutFormNestedInput
}

export type FormUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  archived?: Prisma.BoolFieldUpdateOperationsInput | boolean
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  folderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  responses?: Prisma.FormResponseUncheckedUpdateManyWithoutFormNestedInput
  processForms?: Prisma.ProcessFormUncheckedUpdateManyWithoutFormNestedInput
}

export type FormCreateManyInput = {
  id?: string
  name: string
  type?: $Enums.FormType
  status?: $Enums.FormStatus
  archived?: boolean
  creatorId: string
  folderId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type FormUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  archived?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type FormUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  archived?: Prisma.BoolFieldUpdateOperationsInput | boolean
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  folderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type FormListRelationFilter = {
  every?: Prisma.FormWhereInput
  some?: Prisma.FormWhereInput
  none?: Prisma.FormWhereInput
}

export type FormOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FormOrderByRelevanceInput = {
  fields: Prisma.FormOrderByRelevanceFieldEnum | Prisma.FormOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type FormCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  archived?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  folderId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  design?: Prisma.SortOrder
}

export type FormMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  archived?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  folderId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FormMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  archived?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  folderId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FormScalarRelationFilter = {
  is?: Prisma.FormWhereInput
  isNot?: Prisma.FormWhereInput
}

export type FormCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.FormCreateWithoutCreatorInput, Prisma.FormUncheckedCreateWithoutCreatorInput> | Prisma.FormCreateWithoutCreatorInput[] | Prisma.FormUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.FormCreateOrConnectWithoutCreatorInput | Prisma.FormCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.FormCreateManyCreatorInputEnvelope
  connect?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
}

export type FormUncheckedCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.FormCreateWithoutCreatorInput, Prisma.FormUncheckedCreateWithoutCreatorInput> | Prisma.FormCreateWithoutCreatorInput[] | Prisma.FormUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.FormCreateOrConnectWithoutCreatorInput | Prisma.FormCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.FormCreateManyCreatorInputEnvelope
  connect?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
}

export type FormUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.FormCreateWithoutCreatorInput, Prisma.FormUncheckedCreateWithoutCreatorInput> | Prisma.FormCreateWithoutCreatorInput[] | Prisma.FormUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.FormCreateOrConnectWithoutCreatorInput | Prisma.FormCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.FormUpsertWithWhereUniqueWithoutCreatorInput | Prisma.FormUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.FormCreateManyCreatorInputEnvelope
  set?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
  disconnect?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
  delete?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
  connect?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
  update?: Prisma.FormUpdateWithWhereUniqueWithoutCreatorInput | Prisma.FormUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.FormUpdateManyWithWhereWithoutCreatorInput | Prisma.FormUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.FormScalarWhereInput | Prisma.FormScalarWhereInput[]
}

export type FormUncheckedUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.FormCreateWithoutCreatorInput, Prisma.FormUncheckedCreateWithoutCreatorInput> | Prisma.FormCreateWithoutCreatorInput[] | Prisma.FormUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.FormCreateOrConnectWithoutCreatorInput | Prisma.FormCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.FormUpsertWithWhereUniqueWithoutCreatorInput | Prisma.FormUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.FormCreateManyCreatorInputEnvelope
  set?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
  disconnect?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
  delete?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
  connect?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
  update?: Prisma.FormUpdateWithWhereUniqueWithoutCreatorInput | Prisma.FormUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.FormUpdateManyWithWhereWithoutCreatorInput | Prisma.FormUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.FormScalarWhereInput | Prisma.FormScalarWhereInput[]
}

export type FormCreateNestedManyWithoutFolderInput = {
  create?: Prisma.XOR<Prisma.FormCreateWithoutFolderInput, Prisma.FormUncheckedCreateWithoutFolderInput> | Prisma.FormCreateWithoutFolderInput[] | Prisma.FormUncheckedCreateWithoutFolderInput[]
  connectOrCreate?: Prisma.FormCreateOrConnectWithoutFolderInput | Prisma.FormCreateOrConnectWithoutFolderInput[]
  createMany?: Prisma.FormCreateManyFolderInputEnvelope
  connect?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
}

export type FormUncheckedCreateNestedManyWithoutFolderInput = {
  create?: Prisma.XOR<Prisma.FormCreateWithoutFolderInput, Prisma.FormUncheckedCreateWithoutFolderInput> | Prisma.FormCreateWithoutFolderInput[] | Prisma.FormUncheckedCreateWithoutFolderInput[]
  connectOrCreate?: Prisma.FormCreateOrConnectWithoutFolderInput | Prisma.FormCreateOrConnectWithoutFolderInput[]
  createMany?: Prisma.FormCreateManyFolderInputEnvelope
  connect?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
}

export type FormUpdateManyWithoutFolderNestedInput = {
  create?: Prisma.XOR<Prisma.FormCreateWithoutFolderInput, Prisma.FormUncheckedCreateWithoutFolderInput> | Prisma.FormCreateWithoutFolderInput[] | Prisma.FormUncheckedCreateWithoutFolderInput[]
  connectOrCreate?: Prisma.FormCreateOrConnectWithoutFolderInput | Prisma.FormCreateOrConnectWithoutFolderInput[]
  upsert?: Prisma.FormUpsertWithWhereUniqueWithoutFolderInput | Prisma.FormUpsertWithWhereUniqueWithoutFolderInput[]
  createMany?: Prisma.FormCreateManyFolderInputEnvelope
  set?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
  disconnect?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
  delete?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
  connect?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
  update?: Prisma.FormUpdateWithWhereUniqueWithoutFolderInput | Prisma.FormUpdateWithWhereUniqueWithoutFolderInput[]
  updateMany?: Prisma.FormUpdateManyWithWhereWithoutFolderInput | Prisma.FormUpdateManyWithWhereWithoutFolderInput[]
  deleteMany?: Prisma.FormScalarWhereInput | Prisma.FormScalarWhereInput[]
}

export type FormUncheckedUpdateManyWithoutFolderNestedInput = {
  create?: Prisma.XOR<Prisma.FormCreateWithoutFolderInput, Prisma.FormUncheckedCreateWithoutFolderInput> | Prisma.FormCreateWithoutFolderInput[] | Prisma.FormUncheckedCreateWithoutFolderInput[]
  connectOrCreate?: Prisma.FormCreateOrConnectWithoutFolderInput | Prisma.FormCreateOrConnectWithoutFolderInput[]
  upsert?: Prisma.FormUpsertWithWhereUniqueWithoutFolderInput | Prisma.FormUpsertWithWhereUniqueWithoutFolderInput[]
  createMany?: Prisma.FormCreateManyFolderInputEnvelope
  set?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
  disconnect?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
  delete?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
  connect?: Prisma.FormWhereUniqueInput | Prisma.FormWhereUniqueInput[]
  update?: Prisma.FormUpdateWithWhereUniqueWithoutFolderInput | Prisma.FormUpdateWithWhereUniqueWithoutFolderInput[]
  updateMany?: Prisma.FormUpdateManyWithWhereWithoutFolderInput | Prisma.FormUpdateManyWithWhereWithoutFolderInput[]
  deleteMany?: Prisma.FormScalarWhereInput | Prisma.FormScalarWhereInput[]
}

export type EnumFormTypeFieldUpdateOperationsInput = {
  set?: $Enums.FormType
}

export type EnumFormStatusFieldUpdateOperationsInput = {
  set?: $Enums.FormStatus
}

export type FormCreateNestedOneWithoutResponsesInput = {
  create?: Prisma.XOR<Prisma.FormCreateWithoutResponsesInput, Prisma.FormUncheckedCreateWithoutResponsesInput>
  connectOrCreate?: Prisma.FormCreateOrConnectWithoutResponsesInput
  connect?: Prisma.FormWhereUniqueInput
}

export type FormUpdateOneRequiredWithoutResponsesNestedInput = {
  create?: Prisma.XOR<Prisma.FormCreateWithoutResponsesInput, Prisma.FormUncheckedCreateWithoutResponsesInput>
  connectOrCreate?: Prisma.FormCreateOrConnectWithoutResponsesInput
  upsert?: Prisma.FormUpsertWithoutResponsesInput
  connect?: Prisma.FormWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FormUpdateToOneWithWhereWithoutResponsesInput, Prisma.FormUpdateWithoutResponsesInput>, Prisma.FormUncheckedUpdateWithoutResponsesInput>
}

export type FormCreateNestedOneWithoutProcessFormsInput = {
  create?: Prisma.XOR<Prisma.FormCreateWithoutProcessFormsInput, Prisma.FormUncheckedCreateWithoutProcessFormsInput>
  connectOrCreate?: Prisma.FormCreateOrConnectWithoutProcessFormsInput
  connect?: Prisma.FormWhereUniqueInput
}

export type FormUpdateOneRequiredWithoutProcessFormsNestedInput = {
  create?: Prisma.XOR<Prisma.FormCreateWithoutProcessFormsInput, Prisma.FormUncheckedCreateWithoutProcessFormsInput>
  connectOrCreate?: Prisma.FormCreateOrConnectWithoutProcessFormsInput
  upsert?: Prisma.FormUpsertWithoutProcessFormsInput
  connect?: Prisma.FormWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FormUpdateToOneWithWhereWithoutProcessFormsInput, Prisma.FormUpdateWithoutProcessFormsInput>, Prisma.FormUncheckedUpdateWithoutProcessFormsInput>
}

export type FormCreateWithoutCreatorInput = {
  id?: string
  name: string
  type?: $Enums.FormType
  status?: $Enums.FormStatus
  archived?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  responses?: Prisma.FormResponseCreateNestedManyWithoutFormInput
  folder?: Prisma.FolderCreateNestedOneWithoutFormsInput
  processForms?: Prisma.ProcessFormCreateNestedManyWithoutFormInput
}

export type FormUncheckedCreateWithoutCreatorInput = {
  id?: string
  name: string
  type?: $Enums.FormType
  status?: $Enums.FormStatus
  archived?: boolean
  folderId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  responses?: Prisma.FormResponseUncheckedCreateNestedManyWithoutFormInput
  processForms?: Prisma.ProcessFormUncheckedCreateNestedManyWithoutFormInput
}

export type FormCreateOrConnectWithoutCreatorInput = {
  where: Prisma.FormWhereUniqueInput
  create: Prisma.XOR<Prisma.FormCreateWithoutCreatorInput, Prisma.FormUncheckedCreateWithoutCreatorInput>
}

export type FormCreateManyCreatorInputEnvelope = {
  data: Prisma.FormCreateManyCreatorInput | Prisma.FormCreateManyCreatorInput[]
  skipDuplicates?: boolean
}

export type FormUpsertWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.FormWhereUniqueInput
  update: Prisma.XOR<Prisma.FormUpdateWithoutCreatorInput, Prisma.FormUncheckedUpdateWithoutCreatorInput>
  create: Prisma.XOR<Prisma.FormCreateWithoutCreatorInput, Prisma.FormUncheckedCreateWithoutCreatorInput>
}

export type FormUpdateWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.FormWhereUniqueInput
  data: Prisma.XOR<Prisma.FormUpdateWithoutCreatorInput, Prisma.FormUncheckedUpdateWithoutCreatorInput>
}

export type FormUpdateManyWithWhereWithoutCreatorInput = {
  where: Prisma.FormScalarWhereInput
  data: Prisma.XOR<Prisma.FormUpdateManyMutationInput, Prisma.FormUncheckedUpdateManyWithoutCreatorInput>
}

export type FormScalarWhereInput = {
  AND?: Prisma.FormScalarWhereInput | Prisma.FormScalarWhereInput[]
  OR?: Prisma.FormScalarWhereInput[]
  NOT?: Prisma.FormScalarWhereInput | Prisma.FormScalarWhereInput[]
  id?: Prisma.UuidFilter<"Form"> | string
  name?: Prisma.StringFilter<"Form"> | string
  type?: Prisma.EnumFormTypeFilter<"Form"> | $Enums.FormType
  status?: Prisma.EnumFormStatusFilter<"Form"> | $Enums.FormStatus
  archived?: Prisma.BoolFilter<"Form"> | boolean
  creatorId?: Prisma.UuidFilter<"Form"> | string
  folderId?: Prisma.UuidNullableFilter<"Form"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Form"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Form"> | Date | string
  design?: Prisma.JsonNullableFilter<"Form">
}

export type FormCreateWithoutFolderInput = {
  id?: string
  name: string
  type?: $Enums.FormType
  status?: $Enums.FormStatus
  archived?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  responses?: Prisma.FormResponseCreateNestedManyWithoutFormInput
  creator: Prisma.UserCreateNestedOneWithoutCreatedFormsInput
  processForms?: Prisma.ProcessFormCreateNestedManyWithoutFormInput
}

export type FormUncheckedCreateWithoutFolderInput = {
  id?: string
  name: string
  type?: $Enums.FormType
  status?: $Enums.FormStatus
  archived?: boolean
  creatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  responses?: Prisma.FormResponseUncheckedCreateNestedManyWithoutFormInput
  processForms?: Prisma.ProcessFormUncheckedCreateNestedManyWithoutFormInput
}

export type FormCreateOrConnectWithoutFolderInput = {
  where: Prisma.FormWhereUniqueInput
  create: Prisma.XOR<Prisma.FormCreateWithoutFolderInput, Prisma.FormUncheckedCreateWithoutFolderInput>
}

export type FormCreateManyFolderInputEnvelope = {
  data: Prisma.FormCreateManyFolderInput | Prisma.FormCreateManyFolderInput[]
  skipDuplicates?: boolean
}

export type FormUpsertWithWhereUniqueWithoutFolderInput = {
  where: Prisma.FormWhereUniqueInput
  update: Prisma.XOR<Prisma.FormUpdateWithoutFolderInput, Prisma.FormUncheckedUpdateWithoutFolderInput>
  create: Prisma.XOR<Prisma.FormCreateWithoutFolderInput, Prisma.FormUncheckedCreateWithoutFolderInput>
}

export type FormUpdateWithWhereUniqueWithoutFolderInput = {
  where: Prisma.FormWhereUniqueInput
  data: Prisma.XOR<Prisma.FormUpdateWithoutFolderInput, Prisma.FormUncheckedUpdateWithoutFolderInput>
}

export type FormUpdateManyWithWhereWithoutFolderInput = {
  where: Prisma.FormScalarWhereInput
  data: Prisma.XOR<Prisma.FormUpdateManyMutationInput, Prisma.FormUncheckedUpdateManyWithoutFolderInput>
}

export type FormCreateWithoutResponsesInput = {
  id?: string
  name: string
  type?: $Enums.FormType
  status?: $Enums.FormStatus
  archived?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  creator: Prisma.UserCreateNestedOneWithoutCreatedFormsInput
  folder?: Prisma.FolderCreateNestedOneWithoutFormsInput
  processForms?: Prisma.ProcessFormCreateNestedManyWithoutFormInput
}

export type FormUncheckedCreateWithoutResponsesInput = {
  id?: string
  name: string
  type?: $Enums.FormType
  status?: $Enums.FormStatus
  archived?: boolean
  creatorId: string
  folderId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  processForms?: Prisma.ProcessFormUncheckedCreateNestedManyWithoutFormInput
}

export type FormCreateOrConnectWithoutResponsesInput = {
  where: Prisma.FormWhereUniqueInput
  create: Prisma.XOR<Prisma.FormCreateWithoutResponsesInput, Prisma.FormUncheckedCreateWithoutResponsesInput>
}

export type FormUpsertWithoutResponsesInput = {
  update: Prisma.XOR<Prisma.FormUpdateWithoutResponsesInput, Prisma.FormUncheckedUpdateWithoutResponsesInput>
  create: Prisma.XOR<Prisma.FormCreateWithoutResponsesInput, Prisma.FormUncheckedCreateWithoutResponsesInput>
  where?: Prisma.FormWhereInput
}

export type FormUpdateToOneWithWhereWithoutResponsesInput = {
  where?: Prisma.FormWhereInput
  data: Prisma.XOR<Prisma.FormUpdateWithoutResponsesInput, Prisma.FormUncheckedUpdateWithoutResponsesInput>
}

export type FormUpdateWithoutResponsesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  archived?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  creator?: Prisma.UserUpdateOneRequiredWithoutCreatedFormsNestedInput
  folder?: Prisma.FolderUpdateOneWithoutFormsNestedInput
  processForms?: Prisma.ProcessFormUpdateManyWithoutFormNestedInput
}

export type FormUncheckedUpdateWithoutResponsesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  archived?: Prisma.BoolFieldUpdateOperationsInput | boolean
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  folderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  processForms?: Prisma.ProcessFormUncheckedUpdateManyWithoutFormNestedInput
}

export type FormCreateWithoutProcessFormsInput = {
  id?: string
  name: string
  type?: $Enums.FormType
  status?: $Enums.FormStatus
  archived?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  responses?: Prisma.FormResponseCreateNestedManyWithoutFormInput
  creator: Prisma.UserCreateNestedOneWithoutCreatedFormsInput
  folder?: Prisma.FolderCreateNestedOneWithoutFormsInput
}

export type FormUncheckedCreateWithoutProcessFormsInput = {
  id?: string
  name: string
  type?: $Enums.FormType
  status?: $Enums.FormStatus
  archived?: boolean
  creatorId: string
  folderId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  responses?: Prisma.FormResponseUncheckedCreateNestedManyWithoutFormInput
}

export type FormCreateOrConnectWithoutProcessFormsInput = {
  where: Prisma.FormWhereUniqueInput
  create: Prisma.XOR<Prisma.FormCreateWithoutProcessFormsInput, Prisma.FormUncheckedCreateWithoutProcessFormsInput>
}

export type FormUpsertWithoutProcessFormsInput = {
  update: Prisma.XOR<Prisma.FormUpdateWithoutProcessFormsInput, Prisma.FormUncheckedUpdateWithoutProcessFormsInput>
  create: Prisma.XOR<Prisma.FormCreateWithoutProcessFormsInput, Prisma.FormUncheckedCreateWithoutProcessFormsInput>
  where?: Prisma.FormWhereInput
}

export type FormUpdateToOneWithWhereWithoutProcessFormsInput = {
  where?: Prisma.FormWhereInput
  data: Prisma.XOR<Prisma.FormUpdateWithoutProcessFormsInput, Prisma.FormUncheckedUpdateWithoutProcessFormsInput>
}

export type FormUpdateWithoutProcessFormsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  archived?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  responses?: Prisma.FormResponseUpdateManyWithoutFormNestedInput
  creator?: Prisma.UserUpdateOneRequiredWithoutCreatedFormsNestedInput
  folder?: Prisma.FolderUpdateOneWithoutFormsNestedInput
}

export type FormUncheckedUpdateWithoutProcessFormsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  archived?: Prisma.BoolFieldUpdateOperationsInput | boolean
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  folderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  responses?: Prisma.FormResponseUncheckedUpdateManyWithoutFormNestedInput
}

export type FormCreateManyCreatorInput = {
  id?: string
  name: string
  type?: $Enums.FormType
  status?: $Enums.FormStatus
  archived?: boolean
  folderId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type FormUpdateWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  archived?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  responses?: Prisma.FormResponseUpdateManyWithoutFormNestedInput
  folder?: Prisma.FolderUpdateOneWithoutFormsNestedInput
  processForms?: Prisma.ProcessFormUpdateManyWithoutFormNestedInput
}

export type FormUncheckedUpdateWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  archived?: Prisma.BoolFieldUpdateOperationsInput | boolean
  folderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  responses?: Prisma.FormResponseUncheckedUpdateManyWithoutFormNestedInput
  processForms?: Prisma.ProcessFormUncheckedUpdateManyWithoutFormNestedInput
}

export type FormUncheckedUpdateManyWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  archived?: Prisma.BoolFieldUpdateOperationsInput | boolean
  folderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type FormCreateManyFolderInput = {
  id?: string
  name: string
  type?: $Enums.FormType
  status?: $Enums.FormStatus
  archived?: boolean
  creatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type FormUpdateWithoutFolderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  archived?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  responses?: Prisma.FormResponseUpdateManyWithoutFormNestedInput
  creator?: Prisma.UserUpdateOneRequiredWithoutCreatedFormsNestedInput
  processForms?: Prisma.ProcessFormUpdateManyWithoutFormNestedInput
}

export type FormUncheckedUpdateWithoutFolderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  archived?: Prisma.BoolFieldUpdateOperationsInput | boolean
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  responses?: Prisma.FormResponseUncheckedUpdateManyWithoutFormNestedInput
  processForms?: Prisma.ProcessFormUncheckedUpdateManyWithoutFormNestedInput
}

export type FormUncheckedUpdateManyWithoutFolderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  archived?: Prisma.BoolFieldUpdateOperationsInput | boolean
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  design?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}


/**
 * Count Type FormCountOutputType
 */

export type FormCountOutputType = {
  responses: number
  processForms: number
}

export type FormCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  responses?: boolean | FormCountOutputTypeCountResponsesArgs
  processForms?: boolean | FormCountOutputTypeCountProcessFormsArgs
}

/**
 * FormCountOutputType without action
 */
export type FormCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormCountOutputType
   */
  select?: Prisma.FormCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FormCountOutputType without action
 */
export type FormCountOutputTypeCountResponsesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormResponseWhereInput
}

/**
 * FormCountOutputType without action
 */
export type FormCountOutputTypeCountProcessFormsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProcessFormWhereInput
}


export type FormSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  type?: boolean
  status?: boolean
  archived?: boolean
  creatorId?: boolean
  folderId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  design?: boolean
  responses?: boolean | Prisma.Form$responsesArgs<ExtArgs>
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  folder?: boolean | Prisma.Form$folderArgs<ExtArgs>
  processForms?: boolean | Prisma.Form$processFormsArgs<ExtArgs>
  _count?: boolean | Prisma.FormCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["form"]>

export type FormSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  type?: boolean
  status?: boolean
  archived?: boolean
  creatorId?: boolean
  folderId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  design?: boolean
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  folder?: boolean | Prisma.Form$folderArgs<ExtArgs>
}, ExtArgs["result"]["form"]>

export type FormSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  type?: boolean
  status?: boolean
  archived?: boolean
  creatorId?: boolean
  folderId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  design?: boolean
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  folder?: boolean | Prisma.Form$folderArgs<ExtArgs>
}, ExtArgs["result"]["form"]>

export type FormSelectScalar = {
  id?: boolean
  name?: boolean
  type?: boolean
  status?: boolean
  archived?: boolean
  creatorId?: boolean
  folderId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  design?: boolean
}

export type FormOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "type" | "status" | "archived" | "creatorId" | "folderId" | "createdAt" | "updatedAt" | "design", ExtArgs["result"]["form"]>
export type FormInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  responses?: boolean | Prisma.Form$responsesArgs<ExtArgs>
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  folder?: boolean | Prisma.Form$folderArgs<ExtArgs>
  processForms?: boolean | Prisma.Form$processFormsArgs<ExtArgs>
  _count?: boolean | Prisma.FormCountOutputTypeDefaultArgs<ExtArgs>
}
export type FormIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  folder?: boolean | Prisma.Form$folderArgs<ExtArgs>
}
export type FormIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  folder?: boolean | Prisma.Form$folderArgs<ExtArgs>
}

export type $FormPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Form"
  objects: {
    responses: Prisma.$FormResponsePayload<ExtArgs>[]
    creator: Prisma.$UserPayload<ExtArgs>
    folder: Prisma.$FolderPayload<ExtArgs> | null
    processForms: Prisma.$ProcessFormPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    type: $Enums.FormType
    status: $Enums.FormStatus
    archived: boolean
    creatorId: string
    folderId: string | null
    createdAt: Date
    updatedAt: Date
    design: runtime.JsonValue | null
  }, ExtArgs["result"]["form"]>
  composites: {}
}

export type FormGetPayload<S extends boolean | null | undefined | FormDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FormPayload, S>

export type FormCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FormFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: FormCountAggregateInputType | true
  }

export interface FormDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Form'], meta: { name: 'Form' } }
  /**
   * Find zero or one Form that matches the filter.
   * @param {FormFindUniqueArgs} args - Arguments to find a Form
   * @example
   * // Get one Form
   * const form = await prisma.form.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FormFindUniqueArgs>(args: Prisma.SelectSubset<T, FormFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FormClient<runtime.Types.Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Form that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FormFindUniqueOrThrowArgs} args - Arguments to find a Form
   * @example
   * // Get one Form
   * const form = await prisma.form.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FormFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FormFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FormClient<runtime.Types.Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Form that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormFindFirstArgs} args - Arguments to find a Form
   * @example
   * // Get one Form
   * const form = await prisma.form.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FormFindFirstArgs>(args?: Prisma.SelectSubset<T, FormFindFirstArgs<ExtArgs>>): Prisma.Prisma__FormClient<runtime.Types.Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Form that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormFindFirstOrThrowArgs} args - Arguments to find a Form
   * @example
   * // Get one Form
   * const form = await prisma.form.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FormFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FormFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FormClient<runtime.Types.Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Forms that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Forms
   * const forms = await prisma.form.findMany()
   * 
   * // Get first 10 Forms
   * const forms = await prisma.form.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const formWithIdOnly = await prisma.form.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FormFindManyArgs>(args?: Prisma.SelectSubset<T, FormFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Form.
   * @param {FormCreateArgs} args - Arguments to create a Form.
   * @example
   * // Create one Form
   * const Form = await prisma.form.create({
   *   data: {
   *     // ... data to create a Form
   *   }
   * })
   * 
   */
  create<T extends FormCreateArgs>(args: Prisma.SelectSubset<T, FormCreateArgs<ExtArgs>>): Prisma.Prisma__FormClient<runtime.Types.Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Forms.
   * @param {FormCreateManyArgs} args - Arguments to create many Forms.
   * @example
   * // Create many Forms
   * const form = await prisma.form.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FormCreateManyArgs>(args?: Prisma.SelectSubset<T, FormCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Forms and returns the data saved in the database.
   * @param {FormCreateManyAndReturnArgs} args - Arguments to create many Forms.
   * @example
   * // Create many Forms
   * const form = await prisma.form.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Forms and only return the `id`
   * const formWithIdOnly = await prisma.form.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FormCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FormCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Form.
   * @param {FormDeleteArgs} args - Arguments to delete one Form.
   * @example
   * // Delete one Form
   * const Form = await prisma.form.delete({
   *   where: {
   *     // ... filter to delete one Form
   *   }
   * })
   * 
   */
  delete<T extends FormDeleteArgs>(args: Prisma.SelectSubset<T, FormDeleteArgs<ExtArgs>>): Prisma.Prisma__FormClient<runtime.Types.Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Form.
   * @param {FormUpdateArgs} args - Arguments to update one Form.
   * @example
   * // Update one Form
   * const form = await prisma.form.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FormUpdateArgs>(args: Prisma.SelectSubset<T, FormUpdateArgs<ExtArgs>>): Prisma.Prisma__FormClient<runtime.Types.Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Forms.
   * @param {FormDeleteManyArgs} args - Arguments to filter Forms to delete.
   * @example
   * // Delete a few Forms
   * const { count } = await prisma.form.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FormDeleteManyArgs>(args?: Prisma.SelectSubset<T, FormDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Forms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Forms
   * const form = await prisma.form.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FormUpdateManyArgs>(args: Prisma.SelectSubset<T, FormUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Forms and returns the data updated in the database.
   * @param {FormUpdateManyAndReturnArgs} args - Arguments to update many Forms.
   * @example
   * // Update many Forms
   * const form = await prisma.form.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Forms and only return the `id`
   * const formWithIdOnly = await prisma.form.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FormUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FormUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Form.
   * @param {FormUpsertArgs} args - Arguments to update or create a Form.
   * @example
   * // Update or create a Form
   * const form = await prisma.form.upsert({
   *   create: {
   *     // ... data to create a Form
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Form we want to update
   *   }
   * })
   */
  upsert<T extends FormUpsertArgs>(args: Prisma.SelectSubset<T, FormUpsertArgs<ExtArgs>>): Prisma.Prisma__FormClient<runtime.Types.Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Forms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormCountArgs} args - Arguments to filter Forms to count.
   * @example
   * // Count the number of Forms
   * const count = await prisma.form.count({
   *   where: {
   *     // ... the filter for the Forms we want to count
   *   }
   * })
  **/
  count<T extends FormCountArgs>(
    args?: Prisma.Subset<T, FormCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FormCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Form.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FormAggregateArgs>(args: Prisma.Subset<T, FormAggregateArgs>): Prisma.PrismaPromise<GetFormAggregateType<T>>

  /**
   * Group by Form.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FormGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FormGroupByArgs['orderBy'] }
      : { orderBy?: FormGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FormGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Form model
 */
readonly fields: FormFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Form.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FormClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  responses<T extends Prisma.Form$responsesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Form$responsesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  creator<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  folder<T extends Prisma.Form$folderArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Form$folderArgs<ExtArgs>>): Prisma.Prisma__FolderClient<runtime.Types.Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  processForms<T extends Prisma.Form$processFormsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Form$processFormsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessFormPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Form model
 */
export interface FormFieldRefs {
  readonly id: Prisma.FieldRef<"Form", 'String'>
  readonly name: Prisma.FieldRef<"Form", 'String'>
  readonly type: Prisma.FieldRef<"Form", 'FormType'>
  readonly status: Prisma.FieldRef<"Form", 'FormStatus'>
  readonly archived: Prisma.FieldRef<"Form", 'Boolean'>
  readonly creatorId: Prisma.FieldRef<"Form", 'String'>
  readonly folderId: Prisma.FieldRef<"Form", 'String'>
  readonly createdAt: Prisma.FieldRef<"Form", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Form", 'DateTime'>
  readonly design: Prisma.FieldRef<"Form", 'Json'>
}
    

// Custom InputTypes
/**
 * Form findUnique
 */
export type FormFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Form
   */
  select?: Prisma.FormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Form
   */
  omit?: Prisma.FormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormInclude<ExtArgs> | null
  /**
   * Filter, which Form to fetch.
   */
  where: Prisma.FormWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Form findUniqueOrThrow
 */
export type FormFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Form
   */
  select?: Prisma.FormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Form
   */
  omit?: Prisma.FormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormInclude<ExtArgs> | null
  /**
   * Filter, which Form to fetch.
   */
  where: Prisma.FormWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Form findFirst
 */
export type FormFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Form
   */
  select?: Prisma.FormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Form
   */
  omit?: Prisma.FormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormInclude<ExtArgs> | null
  /**
   * Filter, which Form to fetch.
   */
  where?: Prisma.FormWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Forms to fetch.
   */
  orderBy?: Prisma.FormOrderByWithRelationInput | Prisma.FormOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Forms.
   */
  cursor?: Prisma.FormWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Forms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Forms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Forms.
   */
  distinct?: Prisma.FormScalarFieldEnum | Prisma.FormScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Form findFirstOrThrow
 */
export type FormFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Form
   */
  select?: Prisma.FormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Form
   */
  omit?: Prisma.FormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormInclude<ExtArgs> | null
  /**
   * Filter, which Form to fetch.
   */
  where?: Prisma.FormWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Forms to fetch.
   */
  orderBy?: Prisma.FormOrderByWithRelationInput | Prisma.FormOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Forms.
   */
  cursor?: Prisma.FormWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Forms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Forms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Forms.
   */
  distinct?: Prisma.FormScalarFieldEnum | Prisma.FormScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Form findMany
 */
export type FormFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Form
   */
  select?: Prisma.FormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Form
   */
  omit?: Prisma.FormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormInclude<ExtArgs> | null
  /**
   * Filter, which Forms to fetch.
   */
  where?: Prisma.FormWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Forms to fetch.
   */
  orderBy?: Prisma.FormOrderByWithRelationInput | Prisma.FormOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Forms.
   */
  cursor?: Prisma.FormWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Forms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Forms.
   */
  skip?: number
  distinct?: Prisma.FormScalarFieldEnum | Prisma.FormScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Form create
 */
export type FormCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Form
   */
  select?: Prisma.FormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Form
   */
  omit?: Prisma.FormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormInclude<ExtArgs> | null
  /**
   * The data needed to create a Form.
   */
  data: Prisma.XOR<Prisma.FormCreateInput, Prisma.FormUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Form createMany
 */
export type FormCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Forms.
   */
  data: Prisma.FormCreateManyInput | Prisma.FormCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Form createManyAndReturn
 */
export type FormCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Form
   */
  select?: Prisma.FormSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Form
   */
  omit?: Prisma.FormOmit<ExtArgs> | null
  /**
   * The data used to create many Forms.
   */
  data: Prisma.FormCreateManyInput | Prisma.FormCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Form update
 */
export type FormUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Form
   */
  select?: Prisma.FormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Form
   */
  omit?: Prisma.FormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormInclude<ExtArgs> | null
  /**
   * The data needed to update a Form.
   */
  data: Prisma.XOR<Prisma.FormUpdateInput, Prisma.FormUncheckedUpdateInput>
  /**
   * Choose, which Form to update.
   */
  where: Prisma.FormWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Form updateMany
 */
export type FormUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Forms.
   */
  data: Prisma.XOR<Prisma.FormUpdateManyMutationInput, Prisma.FormUncheckedUpdateManyInput>
  /**
   * Filter which Forms to update
   */
  where?: Prisma.FormWhereInput
  /**
   * Limit how many Forms to update.
   */
  limit?: number
}

/**
 * Form updateManyAndReturn
 */
export type FormUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Form
   */
  select?: Prisma.FormSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Form
   */
  omit?: Prisma.FormOmit<ExtArgs> | null
  /**
   * The data used to update Forms.
   */
  data: Prisma.XOR<Prisma.FormUpdateManyMutationInput, Prisma.FormUncheckedUpdateManyInput>
  /**
   * Filter which Forms to update
   */
  where?: Prisma.FormWhereInput
  /**
   * Limit how many Forms to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Form upsert
 */
export type FormUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Form
   */
  select?: Prisma.FormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Form
   */
  omit?: Prisma.FormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormInclude<ExtArgs> | null
  /**
   * The filter to search for the Form to update in case it exists.
   */
  where: Prisma.FormWhereUniqueInput
  /**
   * In case the Form found by the `where` argument doesn't exist, create a new Form with this data.
   */
  create: Prisma.XOR<Prisma.FormCreateInput, Prisma.FormUncheckedCreateInput>
  /**
   * In case the Form was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FormUpdateInput, Prisma.FormUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Form delete
 */
export type FormDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Form
   */
  select?: Prisma.FormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Form
   */
  omit?: Prisma.FormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormInclude<ExtArgs> | null
  /**
   * Filter which Form to delete.
   */
  where: Prisma.FormWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Form deleteMany
 */
export type FormDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Forms to delete
   */
  where?: Prisma.FormWhereInput
  /**
   * Limit how many Forms to delete.
   */
  limit?: number
}

/**
 * Form.responses
 */
export type Form$responsesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormResponse
   */
  select?: Prisma.FormResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormResponse
   */
  omit?: Prisma.FormResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormResponseInclude<ExtArgs> | null
  where?: Prisma.FormResponseWhereInput
  orderBy?: Prisma.FormResponseOrderByWithRelationInput | Prisma.FormResponseOrderByWithRelationInput[]
  cursor?: Prisma.FormResponseWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FormResponseScalarFieldEnum | Prisma.FormResponseScalarFieldEnum[]
}

/**
 * Form.folder
 */
export type Form$folderArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Folder
   */
  select?: Prisma.FolderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Folder
   */
  omit?: Prisma.FolderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FolderInclude<ExtArgs> | null
  where?: Prisma.FolderWhereInput
}

/**
 * Form.processForms
 */
export type Form$processFormsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessForm
   */
  select?: Prisma.ProcessFormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessForm
   */
  omit?: Prisma.ProcessFormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessFormInclude<ExtArgs> | null
  where?: Prisma.ProcessFormWhereInput
  orderBy?: Prisma.ProcessFormOrderByWithRelationInput | Prisma.ProcessFormOrderByWithRelationInput[]
  cursor?: Prisma.ProcessFormWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProcessFormScalarFieldEnum | Prisma.ProcessFormScalarFieldEnum[]
}

/**
 * Form without action
 */
export type FormDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Form
   */
  select?: Prisma.FormSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Form
   */
  omit?: Prisma.FormOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormInclude<ExtArgs> | null
}
