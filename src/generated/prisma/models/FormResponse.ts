
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `FormResponse` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model FormResponse
 * 
 */
export type FormResponseModel = runtime.Types.Result.DefaultSelection<Prisma.$FormResponsePayload>

export type AggregateFormResponse = {
  _count: FormResponseCountAggregateOutputType | null
  _min: FormResponseMinAggregateOutputType | null
  _max: FormResponseMaxAggregateOutputType | null
}

export type FormResponseMinAggregateOutputType = {
  id: string | null
  formId: string | null
  applicantProcessId: string | null
  createdAt: Date | null
  processId: string | null
}

export type FormResponseMaxAggregateOutputType = {
  id: string | null
  formId: string | null
  applicantProcessId: string | null
  createdAt: Date | null
  processId: string | null
}

export type FormResponseCountAggregateOutputType = {
  id: number
  formId: number
  applicantProcessId: number
  responses: number
  createdAt: number
  processId: number
  _all: number
}


export type FormResponseMinAggregateInputType = {
  id?: true
  formId?: true
  applicantProcessId?: true
  createdAt?: true
  processId?: true
}

export type FormResponseMaxAggregateInputType = {
  id?: true
  formId?: true
  applicantProcessId?: true
  createdAt?: true
  processId?: true
}

export type FormResponseCountAggregateInputType = {
  id?: true
  formId?: true
  applicantProcessId?: true
  responses?: true
  createdAt?: true
  processId?: true
  _all?: true
}

export type FormResponseAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FormResponse to aggregate.
   */
  where?: Prisma.FormResponseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormResponses to fetch.
   */
  orderBy?: Prisma.FormResponseOrderByWithRelationInput | Prisma.FormResponseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FormResponseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormResponses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormResponses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FormResponses
  **/
  _count?: true | FormResponseCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FormResponseMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FormResponseMaxAggregateInputType
}

export type GetFormResponseAggregateType<T extends FormResponseAggregateArgs> = {
      [P in keyof T & keyof AggregateFormResponse]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFormResponse[P]>
    : Prisma.GetScalarType<T[P], AggregateFormResponse[P]>
}




export type FormResponseGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormResponseWhereInput
  orderBy?: Prisma.FormResponseOrderByWithAggregationInput | Prisma.FormResponseOrderByWithAggregationInput[]
  by: Prisma.FormResponseScalarFieldEnum[] | Prisma.FormResponseScalarFieldEnum
  having?: Prisma.FormResponseScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FormResponseCountAggregateInputType | true
  _min?: FormResponseMinAggregateInputType
  _max?: FormResponseMaxAggregateInputType
}

export type FormResponseGroupByOutputType = {
  id: string
  formId: string
  applicantProcessId: string
  responses: runtime.JsonValue
  createdAt: Date
  processId: string
  _count: FormResponseCountAggregateOutputType | null
  _min: FormResponseMinAggregateOutputType | null
  _max: FormResponseMaxAggregateOutputType | null
}

type GetFormResponseGroupByPayload<T extends FormResponseGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FormResponseGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FormResponseGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FormResponseGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FormResponseGroupByOutputType[P]>
      }
    >
  >



export type FormResponseWhereInput = {
  AND?: Prisma.FormResponseWhereInput | Prisma.FormResponseWhereInput[]
  OR?: Prisma.FormResponseWhereInput[]
  NOT?: Prisma.FormResponseWhereInput | Prisma.FormResponseWhereInput[]
  id?: Prisma.UuidFilter<"FormResponse"> | string
  formId?: Prisma.UuidFilter<"FormResponse"> | string
  applicantProcessId?: Prisma.UuidFilter<"FormResponse"> | string
  responses?: Prisma.JsonFilter<"FormResponse">
  createdAt?: Prisma.DateTimeFilter<"FormResponse"> | Date | string
  processId?: Prisma.UuidFilter<"FormResponse"> | string
  applicantProcess?: Prisma.XOR<Prisma.ApplicantProcessScalarRelationFilter, Prisma.ApplicantProcessWhereInput>
  form?: Prisma.XOR<Prisma.FormScalarRelationFilter, Prisma.FormWhereInput>
  process?: Prisma.XOR<Prisma.ProcessScalarRelationFilter, Prisma.ProcessWhereInput>
}

export type FormResponseOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  formId?: Prisma.SortOrder
  applicantProcessId?: Prisma.SortOrder
  responses?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  processId?: Prisma.SortOrder
  applicantProcess?: Prisma.ApplicantProcessOrderByWithRelationInput
  form?: Prisma.FormOrderByWithRelationInput
  process?: Prisma.ProcessOrderByWithRelationInput
  _relevance?: Prisma.FormResponseOrderByRelevanceInput
}

export type FormResponseWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  formId_applicantProcessId?: Prisma.FormResponseFormIdApplicantProcessIdCompoundUniqueInput
  AND?: Prisma.FormResponseWhereInput | Prisma.FormResponseWhereInput[]
  OR?: Prisma.FormResponseWhereInput[]
  NOT?: Prisma.FormResponseWhereInput | Prisma.FormResponseWhereInput[]
  formId?: Prisma.UuidFilter<"FormResponse"> | string
  applicantProcessId?: Prisma.UuidFilter<"FormResponse"> | string
  responses?: Prisma.JsonFilter<"FormResponse">
  createdAt?: Prisma.DateTimeFilter<"FormResponse"> | Date | string
  processId?: Prisma.UuidFilter<"FormResponse"> | string
  applicantProcess?: Prisma.XOR<Prisma.ApplicantProcessScalarRelationFilter, Prisma.ApplicantProcessWhereInput>
  form?: Prisma.XOR<Prisma.FormScalarRelationFilter, Prisma.FormWhereInput>
  process?: Prisma.XOR<Prisma.ProcessScalarRelationFilter, Prisma.ProcessWhereInput>
}, "id" | "formId_applicantProcessId">

export type FormResponseOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  formId?: Prisma.SortOrder
  applicantProcessId?: Prisma.SortOrder
  responses?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  processId?: Prisma.SortOrder
  _count?: Prisma.FormResponseCountOrderByAggregateInput
  _max?: Prisma.FormResponseMaxOrderByAggregateInput
  _min?: Prisma.FormResponseMinOrderByAggregateInput
}

export type FormResponseScalarWhereWithAggregatesInput = {
  AND?: Prisma.FormResponseScalarWhereWithAggregatesInput | Prisma.FormResponseScalarWhereWithAggregatesInput[]
  OR?: Prisma.FormResponseScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FormResponseScalarWhereWithAggregatesInput | Prisma.FormResponseScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"FormResponse"> | string
  formId?: Prisma.UuidWithAggregatesFilter<"FormResponse"> | string
  applicantProcessId?: Prisma.UuidWithAggregatesFilter<"FormResponse"> | string
  responses?: Prisma.JsonWithAggregatesFilter<"FormResponse">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"FormResponse"> | Date | string
  processId?: Prisma.UuidWithAggregatesFilter<"FormResponse"> | string
}

export type FormResponseCreateInput = {
  id?: string
  responses: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  applicantProcess: Prisma.ApplicantProcessCreateNestedOneWithoutResponsesInput
  form: Prisma.FormCreateNestedOneWithoutResponsesInput
  process: Prisma.ProcessCreateNestedOneWithoutFormResponsesInput
}

export type FormResponseUncheckedCreateInput = {
  id?: string
  formId: string
  applicantProcessId: string
  responses: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  processId: string
}

export type FormResponseUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  applicantProcess?: Prisma.ApplicantProcessUpdateOneRequiredWithoutResponsesNestedInput
  form?: Prisma.FormUpdateOneRequiredWithoutResponsesNestedInput
  process?: Prisma.ProcessUpdateOneRequiredWithoutFormResponsesNestedInput
}

export type FormResponseUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  applicantProcessId?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FormResponseCreateManyInput = {
  id?: string
  formId: string
  applicantProcessId: string
  responses: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  processId: string
}

export type FormResponseUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FormResponseUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  applicantProcessId?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FormResponseListRelationFilter = {
  every?: Prisma.FormResponseWhereInput
  some?: Prisma.FormResponseWhereInput
  none?: Prisma.FormResponseWhereInput
}

export type FormResponseOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FormResponseOrderByRelevanceInput = {
  fields: Prisma.FormResponseOrderByRelevanceFieldEnum | Prisma.FormResponseOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type FormResponseFormIdApplicantProcessIdCompoundUniqueInput = {
  formId: string
  applicantProcessId: string
}

export type FormResponseCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  formId?: Prisma.SortOrder
  applicantProcessId?: Prisma.SortOrder
  responses?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  processId?: Prisma.SortOrder
}

export type FormResponseMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  formId?: Prisma.SortOrder
  applicantProcessId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  processId?: Prisma.SortOrder
}

export type FormResponseMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  formId?: Prisma.SortOrder
  applicantProcessId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  processId?: Prisma.SortOrder
}

export type FormResponseCreateNestedManyWithoutProcessInput = {
  create?: Prisma.XOR<Prisma.FormResponseCreateWithoutProcessInput, Prisma.FormResponseUncheckedCreateWithoutProcessInput> | Prisma.FormResponseCreateWithoutProcessInput[] | Prisma.FormResponseUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.FormResponseCreateOrConnectWithoutProcessInput | Prisma.FormResponseCreateOrConnectWithoutProcessInput[]
  createMany?: Prisma.FormResponseCreateManyProcessInputEnvelope
  connect?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
}

export type FormResponseUncheckedCreateNestedManyWithoutProcessInput = {
  create?: Prisma.XOR<Prisma.FormResponseCreateWithoutProcessInput, Prisma.FormResponseUncheckedCreateWithoutProcessInput> | Prisma.FormResponseCreateWithoutProcessInput[] | Prisma.FormResponseUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.FormResponseCreateOrConnectWithoutProcessInput | Prisma.FormResponseCreateOrConnectWithoutProcessInput[]
  createMany?: Prisma.FormResponseCreateManyProcessInputEnvelope
  connect?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
}

export type FormResponseUpdateManyWithoutProcessNestedInput = {
  create?: Prisma.XOR<Prisma.FormResponseCreateWithoutProcessInput, Prisma.FormResponseUncheckedCreateWithoutProcessInput> | Prisma.FormResponseCreateWithoutProcessInput[] | Prisma.FormResponseUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.FormResponseCreateOrConnectWithoutProcessInput | Prisma.FormResponseCreateOrConnectWithoutProcessInput[]
  upsert?: Prisma.FormResponseUpsertWithWhereUniqueWithoutProcessInput | Prisma.FormResponseUpsertWithWhereUniqueWithoutProcessInput[]
  createMany?: Prisma.FormResponseCreateManyProcessInputEnvelope
  set?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  disconnect?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  delete?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  connect?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  update?: Prisma.FormResponseUpdateWithWhereUniqueWithoutProcessInput | Prisma.FormResponseUpdateWithWhereUniqueWithoutProcessInput[]
  updateMany?: Prisma.FormResponseUpdateManyWithWhereWithoutProcessInput | Prisma.FormResponseUpdateManyWithWhereWithoutProcessInput[]
  deleteMany?: Prisma.FormResponseScalarWhereInput | Prisma.FormResponseScalarWhereInput[]
}

export type FormResponseUncheckedUpdateManyWithoutProcessNestedInput = {
  create?: Prisma.XOR<Prisma.FormResponseCreateWithoutProcessInput, Prisma.FormResponseUncheckedCreateWithoutProcessInput> | Prisma.FormResponseCreateWithoutProcessInput[] | Prisma.FormResponseUncheckedCreateWithoutProcessInput[]
  connectOrCreate?: Prisma.FormResponseCreateOrConnectWithoutProcessInput | Prisma.FormResponseCreateOrConnectWithoutProcessInput[]
  upsert?: Prisma.FormResponseUpsertWithWhereUniqueWithoutProcessInput | Prisma.FormResponseUpsertWithWhereUniqueWithoutProcessInput[]
  createMany?: Prisma.FormResponseCreateManyProcessInputEnvelope
  set?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  disconnect?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  delete?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  connect?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  update?: Prisma.FormResponseUpdateWithWhereUniqueWithoutProcessInput | Prisma.FormResponseUpdateWithWhereUniqueWithoutProcessInput[]
  updateMany?: Prisma.FormResponseUpdateManyWithWhereWithoutProcessInput | Prisma.FormResponseUpdateManyWithWhereWithoutProcessInput[]
  deleteMany?: Prisma.FormResponseScalarWhereInput | Prisma.FormResponseScalarWhereInput[]
}

export type FormResponseCreateNestedManyWithoutFormInput = {
  create?: Prisma.XOR<Prisma.FormResponseCreateWithoutFormInput, Prisma.FormResponseUncheckedCreateWithoutFormInput> | Prisma.FormResponseCreateWithoutFormInput[] | Prisma.FormResponseUncheckedCreateWithoutFormInput[]
  connectOrCreate?: Prisma.FormResponseCreateOrConnectWithoutFormInput | Prisma.FormResponseCreateOrConnectWithoutFormInput[]
  createMany?: Prisma.FormResponseCreateManyFormInputEnvelope
  connect?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
}

export type FormResponseUncheckedCreateNestedManyWithoutFormInput = {
  create?: Prisma.XOR<Prisma.FormResponseCreateWithoutFormInput, Prisma.FormResponseUncheckedCreateWithoutFormInput> | Prisma.FormResponseCreateWithoutFormInput[] | Prisma.FormResponseUncheckedCreateWithoutFormInput[]
  connectOrCreate?: Prisma.FormResponseCreateOrConnectWithoutFormInput | Prisma.FormResponseCreateOrConnectWithoutFormInput[]
  createMany?: Prisma.FormResponseCreateManyFormInputEnvelope
  connect?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
}

export type FormResponseUpdateManyWithoutFormNestedInput = {
  create?: Prisma.XOR<Prisma.FormResponseCreateWithoutFormInput, Prisma.FormResponseUncheckedCreateWithoutFormInput> | Prisma.FormResponseCreateWithoutFormInput[] | Prisma.FormResponseUncheckedCreateWithoutFormInput[]
  connectOrCreate?: Prisma.FormResponseCreateOrConnectWithoutFormInput | Prisma.FormResponseCreateOrConnectWithoutFormInput[]
  upsert?: Prisma.FormResponseUpsertWithWhereUniqueWithoutFormInput | Prisma.FormResponseUpsertWithWhereUniqueWithoutFormInput[]
  createMany?: Prisma.FormResponseCreateManyFormInputEnvelope
  set?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  disconnect?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  delete?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  connect?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  update?: Prisma.FormResponseUpdateWithWhereUniqueWithoutFormInput | Prisma.FormResponseUpdateWithWhereUniqueWithoutFormInput[]
  updateMany?: Prisma.FormResponseUpdateManyWithWhereWithoutFormInput | Prisma.FormResponseUpdateManyWithWhereWithoutFormInput[]
  deleteMany?: Prisma.FormResponseScalarWhereInput | Prisma.FormResponseScalarWhereInput[]
}

export type FormResponseUncheckedUpdateManyWithoutFormNestedInput = {
  create?: Prisma.XOR<Prisma.FormResponseCreateWithoutFormInput, Prisma.FormResponseUncheckedCreateWithoutFormInput> | Prisma.FormResponseCreateWithoutFormInput[] | Prisma.FormResponseUncheckedCreateWithoutFormInput[]
  connectOrCreate?: Prisma.FormResponseCreateOrConnectWithoutFormInput | Prisma.FormResponseCreateOrConnectWithoutFormInput[]
  upsert?: Prisma.FormResponseUpsertWithWhereUniqueWithoutFormInput | Prisma.FormResponseUpsertWithWhereUniqueWithoutFormInput[]
  createMany?: Prisma.FormResponseCreateManyFormInputEnvelope
  set?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  disconnect?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  delete?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  connect?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  update?: Prisma.FormResponseUpdateWithWhereUniqueWithoutFormInput | Prisma.FormResponseUpdateWithWhereUniqueWithoutFormInput[]
  updateMany?: Prisma.FormResponseUpdateManyWithWhereWithoutFormInput | Prisma.FormResponseUpdateManyWithWhereWithoutFormInput[]
  deleteMany?: Prisma.FormResponseScalarWhereInput | Prisma.FormResponseScalarWhereInput[]
}

export type FormResponseCreateNestedManyWithoutApplicantProcessInput = {
  create?: Prisma.XOR<Prisma.FormResponseCreateWithoutApplicantProcessInput, Prisma.FormResponseUncheckedCreateWithoutApplicantProcessInput> | Prisma.FormResponseCreateWithoutApplicantProcessInput[] | Prisma.FormResponseUncheckedCreateWithoutApplicantProcessInput[]
  connectOrCreate?: Prisma.FormResponseCreateOrConnectWithoutApplicantProcessInput | Prisma.FormResponseCreateOrConnectWithoutApplicantProcessInput[]
  createMany?: Prisma.FormResponseCreateManyApplicantProcessInputEnvelope
  connect?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
}

export type FormResponseUncheckedCreateNestedManyWithoutApplicantProcessInput = {
  create?: Prisma.XOR<Prisma.FormResponseCreateWithoutApplicantProcessInput, Prisma.FormResponseUncheckedCreateWithoutApplicantProcessInput> | Prisma.FormResponseCreateWithoutApplicantProcessInput[] | Prisma.FormResponseUncheckedCreateWithoutApplicantProcessInput[]
  connectOrCreate?: Prisma.FormResponseCreateOrConnectWithoutApplicantProcessInput | Prisma.FormResponseCreateOrConnectWithoutApplicantProcessInput[]
  createMany?: Prisma.FormResponseCreateManyApplicantProcessInputEnvelope
  connect?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
}

export type FormResponseUpdateManyWithoutApplicantProcessNestedInput = {
  create?: Prisma.XOR<Prisma.FormResponseCreateWithoutApplicantProcessInput, Prisma.FormResponseUncheckedCreateWithoutApplicantProcessInput> | Prisma.FormResponseCreateWithoutApplicantProcessInput[] | Prisma.FormResponseUncheckedCreateWithoutApplicantProcessInput[]
  connectOrCreate?: Prisma.FormResponseCreateOrConnectWithoutApplicantProcessInput | Prisma.FormResponseCreateOrConnectWithoutApplicantProcessInput[]
  upsert?: Prisma.FormResponseUpsertWithWhereUniqueWithoutApplicantProcessInput | Prisma.FormResponseUpsertWithWhereUniqueWithoutApplicantProcessInput[]
  createMany?: Prisma.FormResponseCreateManyApplicantProcessInputEnvelope
  set?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  disconnect?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  delete?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  connect?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  update?: Prisma.FormResponseUpdateWithWhereUniqueWithoutApplicantProcessInput | Prisma.FormResponseUpdateWithWhereUniqueWithoutApplicantProcessInput[]
  updateMany?: Prisma.FormResponseUpdateManyWithWhereWithoutApplicantProcessInput | Prisma.FormResponseUpdateManyWithWhereWithoutApplicantProcessInput[]
  deleteMany?: Prisma.FormResponseScalarWhereInput | Prisma.FormResponseScalarWhereInput[]
}

export type FormResponseUncheckedUpdateManyWithoutApplicantProcessNestedInput = {
  create?: Prisma.XOR<Prisma.FormResponseCreateWithoutApplicantProcessInput, Prisma.FormResponseUncheckedCreateWithoutApplicantProcessInput> | Prisma.FormResponseCreateWithoutApplicantProcessInput[] | Prisma.FormResponseUncheckedCreateWithoutApplicantProcessInput[]
  connectOrCreate?: Prisma.FormResponseCreateOrConnectWithoutApplicantProcessInput | Prisma.FormResponseCreateOrConnectWithoutApplicantProcessInput[]
  upsert?: Prisma.FormResponseUpsertWithWhereUniqueWithoutApplicantProcessInput | Prisma.FormResponseUpsertWithWhereUniqueWithoutApplicantProcessInput[]
  createMany?: Prisma.FormResponseCreateManyApplicantProcessInputEnvelope
  set?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  disconnect?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  delete?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  connect?: Prisma.FormResponseWhereUniqueInput | Prisma.FormResponseWhereUniqueInput[]
  update?: Prisma.FormResponseUpdateWithWhereUniqueWithoutApplicantProcessInput | Prisma.FormResponseUpdateWithWhereUniqueWithoutApplicantProcessInput[]
  updateMany?: Prisma.FormResponseUpdateManyWithWhereWithoutApplicantProcessInput | Prisma.FormResponseUpdateManyWithWhereWithoutApplicantProcessInput[]
  deleteMany?: Prisma.FormResponseScalarWhereInput | Prisma.FormResponseScalarWhereInput[]
}

export type FormResponseCreateWithoutProcessInput = {
  id?: string
  responses: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  applicantProcess: Prisma.ApplicantProcessCreateNestedOneWithoutResponsesInput
  form: Prisma.FormCreateNestedOneWithoutResponsesInput
}

export type FormResponseUncheckedCreateWithoutProcessInput = {
  id?: string
  formId: string
  applicantProcessId: string
  responses: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type FormResponseCreateOrConnectWithoutProcessInput = {
  where: Prisma.FormResponseWhereUniqueInput
  create: Prisma.XOR<Prisma.FormResponseCreateWithoutProcessInput, Prisma.FormResponseUncheckedCreateWithoutProcessInput>
}

export type FormResponseCreateManyProcessInputEnvelope = {
  data: Prisma.FormResponseCreateManyProcessInput | Prisma.FormResponseCreateManyProcessInput[]
  skipDuplicates?: boolean
}

export type FormResponseUpsertWithWhereUniqueWithoutProcessInput = {
  where: Prisma.FormResponseWhereUniqueInput
  update: Prisma.XOR<Prisma.FormResponseUpdateWithoutProcessInput, Prisma.FormResponseUncheckedUpdateWithoutProcessInput>
  create: Prisma.XOR<Prisma.FormResponseCreateWithoutProcessInput, Prisma.FormResponseUncheckedCreateWithoutProcessInput>
}

export type FormResponseUpdateWithWhereUniqueWithoutProcessInput = {
  where: Prisma.FormResponseWhereUniqueInput
  data: Prisma.XOR<Prisma.FormResponseUpdateWithoutProcessInput, Prisma.FormResponseUncheckedUpdateWithoutProcessInput>
}

export type FormResponseUpdateManyWithWhereWithoutProcessInput = {
  where: Prisma.FormResponseScalarWhereInput
  data: Prisma.XOR<Prisma.FormResponseUpdateManyMutationInput, Prisma.FormResponseUncheckedUpdateManyWithoutProcessInput>
}

export type FormResponseScalarWhereInput = {
  AND?: Prisma.FormResponseScalarWhereInput | Prisma.FormResponseScalarWhereInput[]
  OR?: Prisma.FormResponseScalarWhereInput[]
  NOT?: Prisma.FormResponseScalarWhereInput | Prisma.FormResponseScalarWhereInput[]
  id?: Prisma.UuidFilter<"FormResponse"> | string
  formId?: Prisma.UuidFilter<"FormResponse"> | string
  applicantProcessId?: Prisma.UuidFilter<"FormResponse"> | string
  responses?: Prisma.JsonFilter<"FormResponse">
  createdAt?: Prisma.DateTimeFilter<"FormResponse"> | Date | string
  processId?: Prisma.UuidFilter<"FormResponse"> | string
}

export type FormResponseCreateWithoutFormInput = {
  id?: string
  responses: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  applicantProcess: Prisma.ApplicantProcessCreateNestedOneWithoutResponsesInput
  process: Prisma.ProcessCreateNestedOneWithoutFormResponsesInput
}

export type FormResponseUncheckedCreateWithoutFormInput = {
  id?: string
  applicantProcessId: string
  responses: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  processId: string
}

export type FormResponseCreateOrConnectWithoutFormInput = {
  where: Prisma.FormResponseWhereUniqueInput
  create: Prisma.XOR<Prisma.FormResponseCreateWithoutFormInput, Prisma.FormResponseUncheckedCreateWithoutFormInput>
}

export type FormResponseCreateManyFormInputEnvelope = {
  data: Prisma.FormResponseCreateManyFormInput | Prisma.FormResponseCreateManyFormInput[]
  skipDuplicates?: boolean
}

export type FormResponseUpsertWithWhereUniqueWithoutFormInput = {
  where: Prisma.FormResponseWhereUniqueInput
  update: Prisma.XOR<Prisma.FormResponseUpdateWithoutFormInput, Prisma.FormResponseUncheckedUpdateWithoutFormInput>
  create: Prisma.XOR<Prisma.FormResponseCreateWithoutFormInput, Prisma.FormResponseUncheckedCreateWithoutFormInput>
}

export type FormResponseUpdateWithWhereUniqueWithoutFormInput = {
  where: Prisma.FormResponseWhereUniqueInput
  data: Prisma.XOR<Prisma.FormResponseUpdateWithoutFormInput, Prisma.FormResponseUncheckedUpdateWithoutFormInput>
}

export type FormResponseUpdateManyWithWhereWithoutFormInput = {
  where: Prisma.FormResponseScalarWhereInput
  data: Prisma.XOR<Prisma.FormResponseUpdateManyMutationInput, Prisma.FormResponseUncheckedUpdateManyWithoutFormInput>
}

export type FormResponseCreateWithoutApplicantProcessInput = {
  id?: string
  responses: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  form: Prisma.FormCreateNestedOneWithoutResponsesInput
  process: Prisma.ProcessCreateNestedOneWithoutFormResponsesInput
}

export type FormResponseUncheckedCreateWithoutApplicantProcessInput = {
  id?: string
  formId: string
  responses: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  processId: string
}

export type FormResponseCreateOrConnectWithoutApplicantProcessInput = {
  where: Prisma.FormResponseWhereUniqueInput
  create: Prisma.XOR<Prisma.FormResponseCreateWithoutApplicantProcessInput, Prisma.FormResponseUncheckedCreateWithoutApplicantProcessInput>
}

export type FormResponseCreateManyApplicantProcessInputEnvelope = {
  data: Prisma.FormResponseCreateManyApplicantProcessInput | Prisma.FormResponseCreateManyApplicantProcessInput[]
  skipDuplicates?: boolean
}

export type FormResponseUpsertWithWhereUniqueWithoutApplicantProcessInput = {
  where: Prisma.FormResponseWhereUniqueInput
  update: Prisma.XOR<Prisma.FormResponseUpdateWithoutApplicantProcessInput, Prisma.FormResponseUncheckedUpdateWithoutApplicantProcessInput>
  create: Prisma.XOR<Prisma.FormResponseCreateWithoutApplicantProcessInput, Prisma.FormResponseUncheckedCreateWithoutApplicantProcessInput>
}

export type FormResponseUpdateWithWhereUniqueWithoutApplicantProcessInput = {
  where: Prisma.FormResponseWhereUniqueInput
  data: Prisma.XOR<Prisma.FormResponseUpdateWithoutApplicantProcessInput, Prisma.FormResponseUncheckedUpdateWithoutApplicantProcessInput>
}

export type FormResponseUpdateManyWithWhereWithoutApplicantProcessInput = {
  where: Prisma.FormResponseScalarWhereInput
  data: Prisma.XOR<Prisma.FormResponseUpdateManyMutationInput, Prisma.FormResponseUncheckedUpdateManyWithoutApplicantProcessInput>
}

export type FormResponseCreateManyProcessInput = {
  id?: string
  formId: string
  applicantProcessId: string
  responses: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type FormResponseUpdateWithoutProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  applicantProcess?: Prisma.ApplicantProcessUpdateOneRequiredWithoutResponsesNestedInput
  form?: Prisma.FormUpdateOneRequiredWithoutResponsesNestedInput
}

export type FormResponseUncheckedUpdateWithoutProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  applicantProcessId?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FormResponseUncheckedUpdateManyWithoutProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  applicantProcessId?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FormResponseCreateManyFormInput = {
  id?: string
  applicantProcessId: string
  responses: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  processId: string
}

export type FormResponseUpdateWithoutFormInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  applicantProcess?: Prisma.ApplicantProcessUpdateOneRequiredWithoutResponsesNestedInput
  process?: Prisma.ProcessUpdateOneRequiredWithoutFormResponsesNestedInput
}

export type FormResponseUncheckedUpdateWithoutFormInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  applicantProcessId?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FormResponseUncheckedUpdateManyWithoutFormInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  applicantProcessId?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FormResponseCreateManyApplicantProcessInput = {
  id?: string
  formId: string
  responses: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  processId: string
}

export type FormResponseUpdateWithoutApplicantProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  form?: Prisma.FormUpdateOneRequiredWithoutResponsesNestedInput
  process?: Prisma.ProcessUpdateOneRequiredWithoutFormResponsesNestedInput
}

export type FormResponseUncheckedUpdateWithoutApplicantProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FormResponseUncheckedUpdateManyWithoutApplicantProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formId?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  processId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type FormResponseSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  formId?: boolean
  applicantProcessId?: boolean
  responses?: boolean
  createdAt?: boolean
  processId?: boolean
  applicantProcess?: boolean | Prisma.ApplicantProcessDefaultArgs<ExtArgs>
  form?: boolean | Prisma.FormDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formResponse"]>

export type FormResponseSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  formId?: boolean
  applicantProcessId?: boolean
  responses?: boolean
  createdAt?: boolean
  processId?: boolean
  applicantProcess?: boolean | Prisma.ApplicantProcessDefaultArgs<ExtArgs>
  form?: boolean | Prisma.FormDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formResponse"]>

export type FormResponseSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  formId?: boolean
  applicantProcessId?: boolean
  responses?: boolean
  createdAt?: boolean
  processId?: boolean
  applicantProcess?: boolean | Prisma.ApplicantProcessDefaultArgs<ExtArgs>
  form?: boolean | Prisma.FormDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formResponse"]>

export type FormResponseSelectScalar = {
  id?: boolean
  formId?: boolean
  applicantProcessId?: boolean
  responses?: boolean
  createdAt?: boolean
  processId?: boolean
}

export type FormResponseOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "formId" | "applicantProcessId" | "responses" | "createdAt" | "processId", ExtArgs["result"]["formResponse"]>
export type FormResponseInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  applicantProcess?: boolean | Prisma.ApplicantProcessDefaultArgs<ExtArgs>
  form?: boolean | Prisma.FormDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
}
export type FormResponseIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  applicantProcess?: boolean | Prisma.ApplicantProcessDefaultArgs<ExtArgs>
  form?: boolean | Prisma.FormDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
}
export type FormResponseIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  applicantProcess?: boolean | Prisma.ApplicantProcessDefaultArgs<ExtArgs>
  form?: boolean | Prisma.FormDefaultArgs<ExtArgs>
  process?: boolean | Prisma.ProcessDefaultArgs<ExtArgs>
}

export type $FormResponsePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FormResponse"
  objects: {
    applicantProcess: Prisma.$ApplicantProcessPayload<ExtArgs>
    form: Prisma.$FormPayload<ExtArgs>
    process: Prisma.$ProcessPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    formId: string
    applicantProcessId: string
    responses: runtime.JsonValue
    createdAt: Date
    processId: string
  }, ExtArgs["result"]["formResponse"]>
  composites: {}
}

export type FormResponseGetPayload<S extends boolean | null | undefined | FormResponseDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FormResponsePayload, S>

export type FormResponseCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FormResponseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: FormResponseCountAggregateInputType | true
  }

export interface FormResponseDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FormResponse'], meta: { name: 'FormResponse' } }
  /**
   * Find zero or one FormResponse that matches the filter.
   * @param {FormResponseFindUniqueArgs} args - Arguments to find a FormResponse
   * @example
   * // Get one FormResponse
   * const formResponse = await prisma.formResponse.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FormResponseFindUniqueArgs>(args: Prisma.SelectSubset<T, FormResponseFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FormResponseClient<runtime.Types.Result.GetResult<Prisma.$FormResponsePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FormResponse that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FormResponseFindUniqueOrThrowArgs} args - Arguments to find a FormResponse
   * @example
   * // Get one FormResponse
   * const formResponse = await prisma.formResponse.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FormResponseFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FormResponseFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FormResponseClient<runtime.Types.Result.GetResult<Prisma.$FormResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FormResponse that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormResponseFindFirstArgs} args - Arguments to find a FormResponse
   * @example
   * // Get one FormResponse
   * const formResponse = await prisma.formResponse.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FormResponseFindFirstArgs>(args?: Prisma.SelectSubset<T, FormResponseFindFirstArgs<ExtArgs>>): Prisma.Prisma__FormResponseClient<runtime.Types.Result.GetResult<Prisma.$FormResponsePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FormResponse that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormResponseFindFirstOrThrowArgs} args - Arguments to find a FormResponse
   * @example
   * // Get one FormResponse
   * const formResponse = await prisma.formResponse.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FormResponseFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FormResponseFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FormResponseClient<runtime.Types.Result.GetResult<Prisma.$FormResponsePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FormResponses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormResponseFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FormResponses
   * const formResponses = await prisma.formResponse.findMany()
   * 
   * // Get first 10 FormResponses
   * const formResponses = await prisma.formResponse.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const formResponseWithIdOnly = await prisma.formResponse.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FormResponseFindManyArgs>(args?: Prisma.SelectSubset<T, FormResponseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FormResponse.
   * @param {FormResponseCreateArgs} args - Arguments to create a FormResponse.
   * @example
   * // Create one FormResponse
   * const FormResponse = await prisma.formResponse.create({
   *   data: {
   *     // ... data to create a FormResponse
   *   }
   * })
   * 
   */
  create<T extends FormResponseCreateArgs>(args: Prisma.SelectSubset<T, FormResponseCreateArgs<ExtArgs>>): Prisma.Prisma__FormResponseClient<runtime.Types.Result.GetResult<Prisma.$FormResponsePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FormResponses.
   * @param {FormResponseCreateManyArgs} args - Arguments to create many FormResponses.
   * @example
   * // Create many FormResponses
   * const formResponse = await prisma.formResponse.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FormResponseCreateManyArgs>(args?: Prisma.SelectSubset<T, FormResponseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FormResponses and returns the data saved in the database.
   * @param {FormResponseCreateManyAndReturnArgs} args - Arguments to create many FormResponses.
   * @example
   * // Create many FormResponses
   * const formResponse = await prisma.formResponse.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FormResponses and only return the `id`
   * const formResponseWithIdOnly = await prisma.formResponse.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FormResponseCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FormResponseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormResponsePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FormResponse.
   * @param {FormResponseDeleteArgs} args - Arguments to delete one FormResponse.
   * @example
   * // Delete one FormResponse
   * const FormResponse = await prisma.formResponse.delete({
   *   where: {
   *     // ... filter to delete one FormResponse
   *   }
   * })
   * 
   */
  delete<T extends FormResponseDeleteArgs>(args: Prisma.SelectSubset<T, FormResponseDeleteArgs<ExtArgs>>): Prisma.Prisma__FormResponseClient<runtime.Types.Result.GetResult<Prisma.$FormResponsePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FormResponse.
   * @param {FormResponseUpdateArgs} args - Arguments to update one FormResponse.
   * @example
   * // Update one FormResponse
   * const formResponse = await prisma.formResponse.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FormResponseUpdateArgs>(args: Prisma.SelectSubset<T, FormResponseUpdateArgs<ExtArgs>>): Prisma.Prisma__FormResponseClient<runtime.Types.Result.GetResult<Prisma.$FormResponsePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FormResponses.
   * @param {FormResponseDeleteManyArgs} args - Arguments to filter FormResponses to delete.
   * @example
   * // Delete a few FormResponses
   * const { count } = await prisma.formResponse.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FormResponseDeleteManyArgs>(args?: Prisma.SelectSubset<T, FormResponseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FormResponses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormResponseUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FormResponses
   * const formResponse = await prisma.formResponse.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FormResponseUpdateManyArgs>(args: Prisma.SelectSubset<T, FormResponseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FormResponses and returns the data updated in the database.
   * @param {FormResponseUpdateManyAndReturnArgs} args - Arguments to update many FormResponses.
   * @example
   * // Update many FormResponses
   * const formResponse = await prisma.formResponse.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FormResponses and only return the `id`
   * const formResponseWithIdOnly = await prisma.formResponse.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FormResponseUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FormResponseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormResponsePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FormResponse.
   * @param {FormResponseUpsertArgs} args - Arguments to update or create a FormResponse.
   * @example
   * // Update or create a FormResponse
   * const formResponse = await prisma.formResponse.upsert({
   *   create: {
   *     // ... data to create a FormResponse
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FormResponse we want to update
   *   }
   * })
   */
  upsert<T extends FormResponseUpsertArgs>(args: Prisma.SelectSubset<T, FormResponseUpsertArgs<ExtArgs>>): Prisma.Prisma__FormResponseClient<runtime.Types.Result.GetResult<Prisma.$FormResponsePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FormResponses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormResponseCountArgs} args - Arguments to filter FormResponses to count.
   * @example
   * // Count the number of FormResponses
   * const count = await prisma.formResponse.count({
   *   where: {
   *     // ... the filter for the FormResponses we want to count
   *   }
   * })
  **/
  count<T extends FormResponseCountArgs>(
    args?: Prisma.Subset<T, FormResponseCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FormResponseCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FormResponse.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FormResponseAggregateArgs>(args: Prisma.Subset<T, FormResponseAggregateArgs>): Prisma.PrismaPromise<GetFormResponseAggregateType<T>>

  /**
   * Group by FormResponse.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormResponseGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FormResponseGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FormResponseGroupByArgs['orderBy'] }
      : { orderBy?: FormResponseGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FormResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FormResponse model
 */
readonly fields: FormResponseFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FormResponse.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FormResponseClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  applicantProcess<T extends Prisma.ApplicantProcessDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ApplicantProcessDefaultArgs<ExtArgs>>): Prisma.Prisma__ApplicantProcessClient<runtime.Types.Result.GetResult<Prisma.$ApplicantProcessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  form<T extends Prisma.FormDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FormDefaultArgs<ExtArgs>>): Prisma.Prisma__FormClient<runtime.Types.Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  process<T extends Prisma.ProcessDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProcessDefaultArgs<ExtArgs>>): Prisma.Prisma__ProcessClient<runtime.Types.Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FormResponse model
 */
export interface FormResponseFieldRefs {
  readonly id: Prisma.FieldRef<"FormResponse", 'String'>
  readonly formId: Prisma.FieldRef<"FormResponse", 'String'>
  readonly applicantProcessId: Prisma.FieldRef<"FormResponse", 'String'>
  readonly responses: Prisma.FieldRef<"FormResponse", 'Json'>
  readonly createdAt: Prisma.FieldRef<"FormResponse", 'DateTime'>
  readonly processId: Prisma.FieldRef<"FormResponse", 'String'>
}
    

// Custom InputTypes
/**
 * FormResponse findUnique
 */
export type FormResponseFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormResponse
   */
  select?: Prisma.FormResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormResponse
   */
  omit?: Prisma.FormResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormResponseInclude<ExtArgs> | null
  /**
   * Filter, which FormResponse to fetch.
   */
  where: Prisma.FormResponseWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * FormResponse findUniqueOrThrow
 */
export type FormResponseFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormResponse
   */
  select?: Prisma.FormResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormResponse
   */
  omit?: Prisma.FormResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormResponseInclude<ExtArgs> | null
  /**
   * Filter, which FormResponse to fetch.
   */
  where: Prisma.FormResponseWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * FormResponse findFirst
 */
export type FormResponseFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormResponse
   */
  select?: Prisma.FormResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormResponse
   */
  omit?: Prisma.FormResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormResponseInclude<ExtArgs> | null
  /**
   * Filter, which FormResponse to fetch.
   */
  where?: Prisma.FormResponseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormResponses to fetch.
   */
  orderBy?: Prisma.FormResponseOrderByWithRelationInput | Prisma.FormResponseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FormResponses.
   */
  cursor?: Prisma.FormResponseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormResponses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormResponses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FormResponses.
   */
  distinct?: Prisma.FormResponseScalarFieldEnum | Prisma.FormResponseScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * FormResponse findFirstOrThrow
 */
export type FormResponseFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormResponse
   */
  select?: Prisma.FormResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormResponse
   */
  omit?: Prisma.FormResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormResponseInclude<ExtArgs> | null
  /**
   * Filter, which FormResponse to fetch.
   */
  where?: Prisma.FormResponseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormResponses to fetch.
   */
  orderBy?: Prisma.FormResponseOrderByWithRelationInput | Prisma.FormResponseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FormResponses.
   */
  cursor?: Prisma.FormResponseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormResponses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormResponses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FormResponses.
   */
  distinct?: Prisma.FormResponseScalarFieldEnum | Prisma.FormResponseScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * FormResponse findMany
 */
export type FormResponseFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormResponse
   */
  select?: Prisma.FormResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormResponse
   */
  omit?: Prisma.FormResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormResponseInclude<ExtArgs> | null
  /**
   * Filter, which FormResponses to fetch.
   */
  where?: Prisma.FormResponseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormResponses to fetch.
   */
  orderBy?: Prisma.FormResponseOrderByWithRelationInput | Prisma.FormResponseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FormResponses.
   */
  cursor?: Prisma.FormResponseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormResponses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormResponses.
   */
  skip?: number
  distinct?: Prisma.FormResponseScalarFieldEnum | Prisma.FormResponseScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * FormResponse create
 */
export type FormResponseCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormResponse
   */
  select?: Prisma.FormResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormResponse
   */
  omit?: Prisma.FormResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormResponseInclude<ExtArgs> | null
  /**
   * The data needed to create a FormResponse.
   */
  data: Prisma.XOR<Prisma.FormResponseCreateInput, Prisma.FormResponseUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * FormResponse createMany
 */
export type FormResponseCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FormResponses.
   */
  data: Prisma.FormResponseCreateManyInput | Prisma.FormResponseCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FormResponse createManyAndReturn
 */
export type FormResponseCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormResponse
   */
  select?: Prisma.FormResponseSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FormResponse
   */
  omit?: Prisma.FormResponseOmit<ExtArgs> | null
  /**
   * The data used to create many FormResponses.
   */
  data: Prisma.FormResponseCreateManyInput | Prisma.FormResponseCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormResponseIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FormResponse update
 */
export type FormResponseUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormResponse
   */
  select?: Prisma.FormResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormResponse
   */
  omit?: Prisma.FormResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormResponseInclude<ExtArgs> | null
  /**
   * The data needed to update a FormResponse.
   */
  data: Prisma.XOR<Prisma.FormResponseUpdateInput, Prisma.FormResponseUncheckedUpdateInput>
  /**
   * Choose, which FormResponse to update.
   */
  where: Prisma.FormResponseWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * FormResponse updateMany
 */
export type FormResponseUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FormResponses.
   */
  data: Prisma.XOR<Prisma.FormResponseUpdateManyMutationInput, Prisma.FormResponseUncheckedUpdateManyInput>
  /**
   * Filter which FormResponses to update
   */
  where?: Prisma.FormResponseWhereInput
  /**
   * Limit how many FormResponses to update.
   */
  limit?: number
}

/**
 * FormResponse updateManyAndReturn
 */
export type FormResponseUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormResponse
   */
  select?: Prisma.FormResponseSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FormResponse
   */
  omit?: Prisma.FormResponseOmit<ExtArgs> | null
  /**
   * The data used to update FormResponses.
   */
  data: Prisma.XOR<Prisma.FormResponseUpdateManyMutationInput, Prisma.FormResponseUncheckedUpdateManyInput>
  /**
   * Filter which FormResponses to update
   */
  where?: Prisma.FormResponseWhereInput
  /**
   * Limit how many FormResponses to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormResponseIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FormResponse upsert
 */
export type FormResponseUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormResponse
   */
  select?: Prisma.FormResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormResponse
   */
  omit?: Prisma.FormResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormResponseInclude<ExtArgs> | null
  /**
   * The filter to search for the FormResponse to update in case it exists.
   */
  where: Prisma.FormResponseWhereUniqueInput
  /**
   * In case the FormResponse found by the `where` argument doesn't exist, create a new FormResponse with this data.
   */
  create: Prisma.XOR<Prisma.FormResponseCreateInput, Prisma.FormResponseUncheckedCreateInput>
  /**
   * In case the FormResponse was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FormResponseUpdateInput, Prisma.FormResponseUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * FormResponse delete
 */
export type FormResponseDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormResponse
   */
  select?: Prisma.FormResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormResponse
   */
  omit?: Prisma.FormResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormResponseInclude<ExtArgs> | null
  /**
   * Filter which FormResponse to delete.
   */
  where: Prisma.FormResponseWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * FormResponse deleteMany
 */
export type FormResponseDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FormResponses to delete
   */
  where?: Prisma.FormResponseWhereInput
  /**
   * Limit how many FormResponses to delete.
   */
  limit?: number
}

/**
 * FormResponse without action
 */
export type FormResponseDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormResponse
   */
  select?: Prisma.FormResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormResponse
   */
  omit?: Prisma.FormResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormResponseInclude<ExtArgs> | null
}
