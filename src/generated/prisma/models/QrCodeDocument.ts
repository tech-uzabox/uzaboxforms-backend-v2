
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `QrCodeDocument` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model QrCodeDocument
 * 
 */
export type QrCodeDocumentModel = runtime.Types.Result.DefaultSelection<Prisma.$QrCodeDocumentPayload>

export type AggregateQrCodeDocument = {
  _count: QrCodeDocumentCountAggregateOutputType | null
  _min: QrCodeDocumentMinAggregateOutputType | null
  _max: QrCodeDocumentMaxAggregateOutputType | null
}

export type QrCodeDocumentMinAggregateOutputType = {
  id: string | null
  documentName: string | null
  fileName: string | null
  qrCodeId: string | null
  creatorId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type QrCodeDocumentMaxAggregateOutputType = {
  id: string | null
  documentName: string | null
  fileName: string | null
  qrCodeId: string | null
  creatorId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type QrCodeDocumentCountAggregateOutputType = {
  id: number
  documentName: number
  fileName: number
  qrCodeId: number
  creatorId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type QrCodeDocumentMinAggregateInputType = {
  id?: true
  documentName?: true
  fileName?: true
  qrCodeId?: true
  creatorId?: true
  createdAt?: true
  updatedAt?: true
}

export type QrCodeDocumentMaxAggregateInputType = {
  id?: true
  documentName?: true
  fileName?: true
  qrCodeId?: true
  creatorId?: true
  createdAt?: true
  updatedAt?: true
}

export type QrCodeDocumentCountAggregateInputType = {
  id?: true
  documentName?: true
  fileName?: true
  qrCodeId?: true
  creatorId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type QrCodeDocumentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which QrCodeDocument to aggregate.
   */
  where?: Prisma.QrCodeDocumentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of QrCodeDocuments to fetch.
   */
  orderBy?: Prisma.QrCodeDocumentOrderByWithRelationInput | Prisma.QrCodeDocumentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.QrCodeDocumentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` QrCodeDocuments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` QrCodeDocuments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned QrCodeDocuments
  **/
  _count?: true | QrCodeDocumentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: QrCodeDocumentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: QrCodeDocumentMaxAggregateInputType
}

export type GetQrCodeDocumentAggregateType<T extends QrCodeDocumentAggregateArgs> = {
      [P in keyof T & keyof AggregateQrCodeDocument]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateQrCodeDocument[P]>
    : Prisma.GetScalarType<T[P], AggregateQrCodeDocument[P]>
}




export type QrCodeDocumentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.QrCodeDocumentWhereInput
  orderBy?: Prisma.QrCodeDocumentOrderByWithAggregationInput | Prisma.QrCodeDocumentOrderByWithAggregationInput[]
  by: Prisma.QrCodeDocumentScalarFieldEnum[] | Prisma.QrCodeDocumentScalarFieldEnum
  having?: Prisma.QrCodeDocumentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: QrCodeDocumentCountAggregateInputType | true
  _min?: QrCodeDocumentMinAggregateInputType
  _max?: QrCodeDocumentMaxAggregateInputType
}

export type QrCodeDocumentGroupByOutputType = {
  id: string
  documentName: string
  fileName: string
  qrCodeId: string
  creatorId: string
  createdAt: Date
  updatedAt: Date
  _count: QrCodeDocumentCountAggregateOutputType | null
  _min: QrCodeDocumentMinAggregateOutputType | null
  _max: QrCodeDocumentMaxAggregateOutputType | null
}

type GetQrCodeDocumentGroupByPayload<T extends QrCodeDocumentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<QrCodeDocumentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof QrCodeDocumentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], QrCodeDocumentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], QrCodeDocumentGroupByOutputType[P]>
      }
    >
  >



export type QrCodeDocumentWhereInput = {
  AND?: Prisma.QrCodeDocumentWhereInput | Prisma.QrCodeDocumentWhereInput[]
  OR?: Prisma.QrCodeDocumentWhereInput[]
  NOT?: Prisma.QrCodeDocumentWhereInput | Prisma.QrCodeDocumentWhereInput[]
  id?: Prisma.UuidFilter<"QrCodeDocument"> | string
  documentName?: Prisma.StringFilter<"QrCodeDocument"> | string
  fileName?: Prisma.StringFilter<"QrCodeDocument"> | string
  qrCodeId?: Prisma.StringFilter<"QrCodeDocument"> | string
  creatorId?: Prisma.UuidFilter<"QrCodeDocument"> | string
  createdAt?: Prisma.DateTimeFilter<"QrCodeDocument"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"QrCodeDocument"> | Date | string
  creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type QrCodeDocumentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  documentName?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  qrCodeId?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  creator?: Prisma.UserOrderByWithRelationInput
  _relevance?: Prisma.QrCodeDocumentOrderByRelevanceInput
}

export type QrCodeDocumentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  qrCodeId?: string
  AND?: Prisma.QrCodeDocumentWhereInput | Prisma.QrCodeDocumentWhereInput[]
  OR?: Prisma.QrCodeDocumentWhereInput[]
  NOT?: Prisma.QrCodeDocumentWhereInput | Prisma.QrCodeDocumentWhereInput[]
  documentName?: Prisma.StringFilter<"QrCodeDocument"> | string
  fileName?: Prisma.StringFilter<"QrCodeDocument"> | string
  creatorId?: Prisma.UuidFilter<"QrCodeDocument"> | string
  createdAt?: Prisma.DateTimeFilter<"QrCodeDocument"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"QrCodeDocument"> | Date | string
  creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "qrCodeId">

export type QrCodeDocumentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  documentName?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  qrCodeId?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.QrCodeDocumentCountOrderByAggregateInput
  _max?: Prisma.QrCodeDocumentMaxOrderByAggregateInput
  _min?: Prisma.QrCodeDocumentMinOrderByAggregateInput
}

export type QrCodeDocumentScalarWhereWithAggregatesInput = {
  AND?: Prisma.QrCodeDocumentScalarWhereWithAggregatesInput | Prisma.QrCodeDocumentScalarWhereWithAggregatesInput[]
  OR?: Prisma.QrCodeDocumentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.QrCodeDocumentScalarWhereWithAggregatesInput | Prisma.QrCodeDocumentScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"QrCodeDocument"> | string
  documentName?: Prisma.StringWithAggregatesFilter<"QrCodeDocument"> | string
  fileName?: Prisma.StringWithAggregatesFilter<"QrCodeDocument"> | string
  qrCodeId?: Prisma.StringWithAggregatesFilter<"QrCodeDocument"> | string
  creatorId?: Prisma.UuidWithAggregatesFilter<"QrCodeDocument"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"QrCodeDocument"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"QrCodeDocument"> | Date | string
}

export type QrCodeDocumentCreateInput = {
  id?: string
  documentName: string
  fileName: string
  qrCodeId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  creator: Prisma.UserCreateNestedOneWithoutQrCodeDocumentsInput
}

export type QrCodeDocumentUncheckedCreateInput = {
  id?: string
  documentName: string
  fileName: string
  qrCodeId: string
  creatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type QrCodeDocumentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentName?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  qrCodeId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator?: Prisma.UserUpdateOneRequiredWithoutQrCodeDocumentsNestedInput
}

export type QrCodeDocumentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentName?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  qrCodeId?: Prisma.StringFieldUpdateOperationsInput | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type QrCodeDocumentCreateManyInput = {
  id?: string
  documentName: string
  fileName: string
  qrCodeId: string
  creatorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type QrCodeDocumentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentName?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  qrCodeId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type QrCodeDocumentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentName?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  qrCodeId?: Prisma.StringFieldUpdateOperationsInput | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type QrCodeDocumentListRelationFilter = {
  every?: Prisma.QrCodeDocumentWhereInput
  some?: Prisma.QrCodeDocumentWhereInput
  none?: Prisma.QrCodeDocumentWhereInput
}

export type QrCodeDocumentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type QrCodeDocumentOrderByRelevanceInput = {
  fields: Prisma.QrCodeDocumentOrderByRelevanceFieldEnum | Prisma.QrCodeDocumentOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type QrCodeDocumentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentName?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  qrCodeId?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type QrCodeDocumentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentName?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  qrCodeId?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type QrCodeDocumentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentName?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  qrCodeId?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type QrCodeDocumentCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.QrCodeDocumentCreateWithoutCreatorInput, Prisma.QrCodeDocumentUncheckedCreateWithoutCreatorInput> | Prisma.QrCodeDocumentCreateWithoutCreatorInput[] | Prisma.QrCodeDocumentUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.QrCodeDocumentCreateOrConnectWithoutCreatorInput | Prisma.QrCodeDocumentCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.QrCodeDocumentCreateManyCreatorInputEnvelope
  connect?: Prisma.QrCodeDocumentWhereUniqueInput | Prisma.QrCodeDocumentWhereUniqueInput[]
}

export type QrCodeDocumentUncheckedCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.QrCodeDocumentCreateWithoutCreatorInput, Prisma.QrCodeDocumentUncheckedCreateWithoutCreatorInput> | Prisma.QrCodeDocumentCreateWithoutCreatorInput[] | Prisma.QrCodeDocumentUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.QrCodeDocumentCreateOrConnectWithoutCreatorInput | Prisma.QrCodeDocumentCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.QrCodeDocumentCreateManyCreatorInputEnvelope
  connect?: Prisma.QrCodeDocumentWhereUniqueInput | Prisma.QrCodeDocumentWhereUniqueInput[]
}

export type QrCodeDocumentUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.QrCodeDocumentCreateWithoutCreatorInput, Prisma.QrCodeDocumentUncheckedCreateWithoutCreatorInput> | Prisma.QrCodeDocumentCreateWithoutCreatorInput[] | Prisma.QrCodeDocumentUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.QrCodeDocumentCreateOrConnectWithoutCreatorInput | Prisma.QrCodeDocumentCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.QrCodeDocumentUpsertWithWhereUniqueWithoutCreatorInput | Prisma.QrCodeDocumentUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.QrCodeDocumentCreateManyCreatorInputEnvelope
  set?: Prisma.QrCodeDocumentWhereUniqueInput | Prisma.QrCodeDocumentWhereUniqueInput[]
  disconnect?: Prisma.QrCodeDocumentWhereUniqueInput | Prisma.QrCodeDocumentWhereUniqueInput[]
  delete?: Prisma.QrCodeDocumentWhereUniqueInput | Prisma.QrCodeDocumentWhereUniqueInput[]
  connect?: Prisma.QrCodeDocumentWhereUniqueInput | Prisma.QrCodeDocumentWhereUniqueInput[]
  update?: Prisma.QrCodeDocumentUpdateWithWhereUniqueWithoutCreatorInput | Prisma.QrCodeDocumentUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.QrCodeDocumentUpdateManyWithWhereWithoutCreatorInput | Prisma.QrCodeDocumentUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.QrCodeDocumentScalarWhereInput | Prisma.QrCodeDocumentScalarWhereInput[]
}

export type QrCodeDocumentUncheckedUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.QrCodeDocumentCreateWithoutCreatorInput, Prisma.QrCodeDocumentUncheckedCreateWithoutCreatorInput> | Prisma.QrCodeDocumentCreateWithoutCreatorInput[] | Prisma.QrCodeDocumentUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.QrCodeDocumentCreateOrConnectWithoutCreatorInput | Prisma.QrCodeDocumentCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.QrCodeDocumentUpsertWithWhereUniqueWithoutCreatorInput | Prisma.QrCodeDocumentUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.QrCodeDocumentCreateManyCreatorInputEnvelope
  set?: Prisma.QrCodeDocumentWhereUniqueInput | Prisma.QrCodeDocumentWhereUniqueInput[]
  disconnect?: Prisma.QrCodeDocumentWhereUniqueInput | Prisma.QrCodeDocumentWhereUniqueInput[]
  delete?: Prisma.QrCodeDocumentWhereUniqueInput | Prisma.QrCodeDocumentWhereUniqueInput[]
  connect?: Prisma.QrCodeDocumentWhereUniqueInput | Prisma.QrCodeDocumentWhereUniqueInput[]
  update?: Prisma.QrCodeDocumentUpdateWithWhereUniqueWithoutCreatorInput | Prisma.QrCodeDocumentUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.QrCodeDocumentUpdateManyWithWhereWithoutCreatorInput | Prisma.QrCodeDocumentUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.QrCodeDocumentScalarWhereInput | Prisma.QrCodeDocumentScalarWhereInput[]
}

export type QrCodeDocumentCreateWithoutCreatorInput = {
  id?: string
  documentName: string
  fileName: string
  qrCodeId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type QrCodeDocumentUncheckedCreateWithoutCreatorInput = {
  id?: string
  documentName: string
  fileName: string
  qrCodeId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type QrCodeDocumentCreateOrConnectWithoutCreatorInput = {
  where: Prisma.QrCodeDocumentWhereUniqueInput
  create: Prisma.XOR<Prisma.QrCodeDocumentCreateWithoutCreatorInput, Prisma.QrCodeDocumentUncheckedCreateWithoutCreatorInput>
}

export type QrCodeDocumentCreateManyCreatorInputEnvelope = {
  data: Prisma.QrCodeDocumentCreateManyCreatorInput | Prisma.QrCodeDocumentCreateManyCreatorInput[]
  skipDuplicates?: boolean
}

export type QrCodeDocumentUpsertWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.QrCodeDocumentWhereUniqueInput
  update: Prisma.XOR<Prisma.QrCodeDocumentUpdateWithoutCreatorInput, Prisma.QrCodeDocumentUncheckedUpdateWithoutCreatorInput>
  create: Prisma.XOR<Prisma.QrCodeDocumentCreateWithoutCreatorInput, Prisma.QrCodeDocumentUncheckedCreateWithoutCreatorInput>
}

export type QrCodeDocumentUpdateWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.QrCodeDocumentWhereUniqueInput
  data: Prisma.XOR<Prisma.QrCodeDocumentUpdateWithoutCreatorInput, Prisma.QrCodeDocumentUncheckedUpdateWithoutCreatorInput>
}

export type QrCodeDocumentUpdateManyWithWhereWithoutCreatorInput = {
  where: Prisma.QrCodeDocumentScalarWhereInput
  data: Prisma.XOR<Prisma.QrCodeDocumentUpdateManyMutationInput, Prisma.QrCodeDocumentUncheckedUpdateManyWithoutCreatorInput>
}

export type QrCodeDocumentScalarWhereInput = {
  AND?: Prisma.QrCodeDocumentScalarWhereInput | Prisma.QrCodeDocumentScalarWhereInput[]
  OR?: Prisma.QrCodeDocumentScalarWhereInput[]
  NOT?: Prisma.QrCodeDocumentScalarWhereInput | Prisma.QrCodeDocumentScalarWhereInput[]
  id?: Prisma.UuidFilter<"QrCodeDocument"> | string
  documentName?: Prisma.StringFilter<"QrCodeDocument"> | string
  fileName?: Prisma.StringFilter<"QrCodeDocument"> | string
  qrCodeId?: Prisma.StringFilter<"QrCodeDocument"> | string
  creatorId?: Prisma.UuidFilter<"QrCodeDocument"> | string
  createdAt?: Prisma.DateTimeFilter<"QrCodeDocument"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"QrCodeDocument"> | Date | string
}

export type QrCodeDocumentCreateManyCreatorInput = {
  id?: string
  documentName: string
  fileName: string
  qrCodeId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type QrCodeDocumentUpdateWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentName?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  qrCodeId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type QrCodeDocumentUncheckedUpdateWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentName?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  qrCodeId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type QrCodeDocumentUncheckedUpdateManyWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentName?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  qrCodeId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type QrCodeDocumentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentName?: boolean
  fileName?: boolean
  qrCodeId?: boolean
  creatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["qrCodeDocument"]>

export type QrCodeDocumentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentName?: boolean
  fileName?: boolean
  qrCodeId?: boolean
  creatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["qrCodeDocument"]>

export type QrCodeDocumentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentName?: boolean
  fileName?: boolean
  qrCodeId?: boolean
  creatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["qrCodeDocument"]>

export type QrCodeDocumentSelectScalar = {
  id?: boolean
  documentName?: boolean
  fileName?: boolean
  qrCodeId?: boolean
  creatorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type QrCodeDocumentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "documentName" | "fileName" | "qrCodeId" | "creatorId" | "createdAt" | "updatedAt", ExtArgs["result"]["qrCodeDocument"]>
export type QrCodeDocumentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type QrCodeDocumentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type QrCodeDocumentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $QrCodeDocumentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "QrCodeDocument"
  objects: {
    creator: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    documentName: string
    fileName: string
    qrCodeId: string
    creatorId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["qrCodeDocument"]>
  composites: {}
}

export type QrCodeDocumentGetPayload<S extends boolean | null | undefined | QrCodeDocumentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$QrCodeDocumentPayload, S>

export type QrCodeDocumentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<QrCodeDocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: QrCodeDocumentCountAggregateInputType | true
  }

export interface QrCodeDocumentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QrCodeDocument'], meta: { name: 'QrCodeDocument' } }
  /**
   * Find zero or one QrCodeDocument that matches the filter.
   * @param {QrCodeDocumentFindUniqueArgs} args - Arguments to find a QrCodeDocument
   * @example
   * // Get one QrCodeDocument
   * const qrCodeDocument = await prisma.qrCodeDocument.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends QrCodeDocumentFindUniqueArgs>(args: Prisma.SelectSubset<T, QrCodeDocumentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__QrCodeDocumentClient<runtime.Types.Result.GetResult<Prisma.$QrCodeDocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one QrCodeDocument that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {QrCodeDocumentFindUniqueOrThrowArgs} args - Arguments to find a QrCodeDocument
   * @example
   * // Get one QrCodeDocument
   * const qrCodeDocument = await prisma.qrCodeDocument.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends QrCodeDocumentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, QrCodeDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__QrCodeDocumentClient<runtime.Types.Result.GetResult<Prisma.$QrCodeDocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first QrCodeDocument that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QrCodeDocumentFindFirstArgs} args - Arguments to find a QrCodeDocument
   * @example
   * // Get one QrCodeDocument
   * const qrCodeDocument = await prisma.qrCodeDocument.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends QrCodeDocumentFindFirstArgs>(args?: Prisma.SelectSubset<T, QrCodeDocumentFindFirstArgs<ExtArgs>>): Prisma.Prisma__QrCodeDocumentClient<runtime.Types.Result.GetResult<Prisma.$QrCodeDocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first QrCodeDocument that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QrCodeDocumentFindFirstOrThrowArgs} args - Arguments to find a QrCodeDocument
   * @example
   * // Get one QrCodeDocument
   * const qrCodeDocument = await prisma.qrCodeDocument.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends QrCodeDocumentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, QrCodeDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__QrCodeDocumentClient<runtime.Types.Result.GetResult<Prisma.$QrCodeDocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more QrCodeDocuments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QrCodeDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all QrCodeDocuments
   * const qrCodeDocuments = await prisma.qrCodeDocument.findMany()
   * 
   * // Get first 10 QrCodeDocuments
   * const qrCodeDocuments = await prisma.qrCodeDocument.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const qrCodeDocumentWithIdOnly = await prisma.qrCodeDocument.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends QrCodeDocumentFindManyArgs>(args?: Prisma.SelectSubset<T, QrCodeDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QrCodeDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a QrCodeDocument.
   * @param {QrCodeDocumentCreateArgs} args - Arguments to create a QrCodeDocument.
   * @example
   * // Create one QrCodeDocument
   * const QrCodeDocument = await prisma.qrCodeDocument.create({
   *   data: {
   *     // ... data to create a QrCodeDocument
   *   }
   * })
   * 
   */
  create<T extends QrCodeDocumentCreateArgs>(args: Prisma.SelectSubset<T, QrCodeDocumentCreateArgs<ExtArgs>>): Prisma.Prisma__QrCodeDocumentClient<runtime.Types.Result.GetResult<Prisma.$QrCodeDocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many QrCodeDocuments.
   * @param {QrCodeDocumentCreateManyArgs} args - Arguments to create many QrCodeDocuments.
   * @example
   * // Create many QrCodeDocuments
   * const qrCodeDocument = await prisma.qrCodeDocument.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends QrCodeDocumentCreateManyArgs>(args?: Prisma.SelectSubset<T, QrCodeDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many QrCodeDocuments and returns the data saved in the database.
   * @param {QrCodeDocumentCreateManyAndReturnArgs} args - Arguments to create many QrCodeDocuments.
   * @example
   * // Create many QrCodeDocuments
   * const qrCodeDocument = await prisma.qrCodeDocument.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many QrCodeDocuments and only return the `id`
   * const qrCodeDocumentWithIdOnly = await prisma.qrCodeDocument.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends QrCodeDocumentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, QrCodeDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QrCodeDocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a QrCodeDocument.
   * @param {QrCodeDocumentDeleteArgs} args - Arguments to delete one QrCodeDocument.
   * @example
   * // Delete one QrCodeDocument
   * const QrCodeDocument = await prisma.qrCodeDocument.delete({
   *   where: {
   *     // ... filter to delete one QrCodeDocument
   *   }
   * })
   * 
   */
  delete<T extends QrCodeDocumentDeleteArgs>(args: Prisma.SelectSubset<T, QrCodeDocumentDeleteArgs<ExtArgs>>): Prisma.Prisma__QrCodeDocumentClient<runtime.Types.Result.GetResult<Prisma.$QrCodeDocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one QrCodeDocument.
   * @param {QrCodeDocumentUpdateArgs} args - Arguments to update one QrCodeDocument.
   * @example
   * // Update one QrCodeDocument
   * const qrCodeDocument = await prisma.qrCodeDocument.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends QrCodeDocumentUpdateArgs>(args: Prisma.SelectSubset<T, QrCodeDocumentUpdateArgs<ExtArgs>>): Prisma.Prisma__QrCodeDocumentClient<runtime.Types.Result.GetResult<Prisma.$QrCodeDocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more QrCodeDocuments.
   * @param {QrCodeDocumentDeleteManyArgs} args - Arguments to filter QrCodeDocuments to delete.
   * @example
   * // Delete a few QrCodeDocuments
   * const { count } = await prisma.qrCodeDocument.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends QrCodeDocumentDeleteManyArgs>(args?: Prisma.SelectSubset<T, QrCodeDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more QrCodeDocuments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QrCodeDocumentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many QrCodeDocuments
   * const qrCodeDocument = await prisma.qrCodeDocument.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends QrCodeDocumentUpdateManyArgs>(args: Prisma.SelectSubset<T, QrCodeDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more QrCodeDocuments and returns the data updated in the database.
   * @param {QrCodeDocumentUpdateManyAndReturnArgs} args - Arguments to update many QrCodeDocuments.
   * @example
   * // Update many QrCodeDocuments
   * const qrCodeDocument = await prisma.qrCodeDocument.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more QrCodeDocuments and only return the `id`
   * const qrCodeDocumentWithIdOnly = await prisma.qrCodeDocument.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends QrCodeDocumentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, QrCodeDocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QrCodeDocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one QrCodeDocument.
   * @param {QrCodeDocumentUpsertArgs} args - Arguments to update or create a QrCodeDocument.
   * @example
   * // Update or create a QrCodeDocument
   * const qrCodeDocument = await prisma.qrCodeDocument.upsert({
   *   create: {
   *     // ... data to create a QrCodeDocument
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the QrCodeDocument we want to update
   *   }
   * })
   */
  upsert<T extends QrCodeDocumentUpsertArgs>(args: Prisma.SelectSubset<T, QrCodeDocumentUpsertArgs<ExtArgs>>): Prisma.Prisma__QrCodeDocumentClient<runtime.Types.Result.GetResult<Prisma.$QrCodeDocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of QrCodeDocuments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QrCodeDocumentCountArgs} args - Arguments to filter QrCodeDocuments to count.
   * @example
   * // Count the number of QrCodeDocuments
   * const count = await prisma.qrCodeDocument.count({
   *   where: {
   *     // ... the filter for the QrCodeDocuments we want to count
   *   }
   * })
  **/
  count<T extends QrCodeDocumentCountArgs>(
    args?: Prisma.Subset<T, QrCodeDocumentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], QrCodeDocumentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a QrCodeDocument.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QrCodeDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends QrCodeDocumentAggregateArgs>(args: Prisma.Subset<T, QrCodeDocumentAggregateArgs>): Prisma.PrismaPromise<GetQrCodeDocumentAggregateType<T>>

  /**
   * Group by QrCodeDocument.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QrCodeDocumentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends QrCodeDocumentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: QrCodeDocumentGroupByArgs['orderBy'] }
      : { orderBy?: QrCodeDocumentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, QrCodeDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQrCodeDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the QrCodeDocument model
 */
readonly fields: QrCodeDocumentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for QrCodeDocument.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__QrCodeDocumentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  creator<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the QrCodeDocument model
 */
export interface QrCodeDocumentFieldRefs {
  readonly id: Prisma.FieldRef<"QrCodeDocument", 'String'>
  readonly documentName: Prisma.FieldRef<"QrCodeDocument", 'String'>
  readonly fileName: Prisma.FieldRef<"QrCodeDocument", 'String'>
  readonly qrCodeId: Prisma.FieldRef<"QrCodeDocument", 'String'>
  readonly creatorId: Prisma.FieldRef<"QrCodeDocument", 'String'>
  readonly createdAt: Prisma.FieldRef<"QrCodeDocument", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"QrCodeDocument", 'DateTime'>
}
    

// Custom InputTypes
/**
 * QrCodeDocument findUnique
 */
export type QrCodeDocumentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QrCodeDocument
   */
  select?: Prisma.QrCodeDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QrCodeDocument
   */
  omit?: Prisma.QrCodeDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QrCodeDocumentInclude<ExtArgs> | null
  /**
   * Filter, which QrCodeDocument to fetch.
   */
  where: Prisma.QrCodeDocumentWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * QrCodeDocument findUniqueOrThrow
 */
export type QrCodeDocumentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QrCodeDocument
   */
  select?: Prisma.QrCodeDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QrCodeDocument
   */
  omit?: Prisma.QrCodeDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QrCodeDocumentInclude<ExtArgs> | null
  /**
   * Filter, which QrCodeDocument to fetch.
   */
  where: Prisma.QrCodeDocumentWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * QrCodeDocument findFirst
 */
export type QrCodeDocumentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QrCodeDocument
   */
  select?: Prisma.QrCodeDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QrCodeDocument
   */
  omit?: Prisma.QrCodeDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QrCodeDocumentInclude<ExtArgs> | null
  /**
   * Filter, which QrCodeDocument to fetch.
   */
  where?: Prisma.QrCodeDocumentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of QrCodeDocuments to fetch.
   */
  orderBy?: Prisma.QrCodeDocumentOrderByWithRelationInput | Prisma.QrCodeDocumentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for QrCodeDocuments.
   */
  cursor?: Prisma.QrCodeDocumentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` QrCodeDocuments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` QrCodeDocuments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of QrCodeDocuments.
   */
  distinct?: Prisma.QrCodeDocumentScalarFieldEnum | Prisma.QrCodeDocumentScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * QrCodeDocument findFirstOrThrow
 */
export type QrCodeDocumentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QrCodeDocument
   */
  select?: Prisma.QrCodeDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QrCodeDocument
   */
  omit?: Prisma.QrCodeDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QrCodeDocumentInclude<ExtArgs> | null
  /**
   * Filter, which QrCodeDocument to fetch.
   */
  where?: Prisma.QrCodeDocumentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of QrCodeDocuments to fetch.
   */
  orderBy?: Prisma.QrCodeDocumentOrderByWithRelationInput | Prisma.QrCodeDocumentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for QrCodeDocuments.
   */
  cursor?: Prisma.QrCodeDocumentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` QrCodeDocuments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` QrCodeDocuments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of QrCodeDocuments.
   */
  distinct?: Prisma.QrCodeDocumentScalarFieldEnum | Prisma.QrCodeDocumentScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * QrCodeDocument findMany
 */
export type QrCodeDocumentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QrCodeDocument
   */
  select?: Prisma.QrCodeDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QrCodeDocument
   */
  omit?: Prisma.QrCodeDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QrCodeDocumentInclude<ExtArgs> | null
  /**
   * Filter, which QrCodeDocuments to fetch.
   */
  where?: Prisma.QrCodeDocumentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of QrCodeDocuments to fetch.
   */
  orderBy?: Prisma.QrCodeDocumentOrderByWithRelationInput | Prisma.QrCodeDocumentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing QrCodeDocuments.
   */
  cursor?: Prisma.QrCodeDocumentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` QrCodeDocuments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` QrCodeDocuments.
   */
  skip?: number
  distinct?: Prisma.QrCodeDocumentScalarFieldEnum | Prisma.QrCodeDocumentScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * QrCodeDocument create
 */
export type QrCodeDocumentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QrCodeDocument
   */
  select?: Prisma.QrCodeDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QrCodeDocument
   */
  omit?: Prisma.QrCodeDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QrCodeDocumentInclude<ExtArgs> | null
  /**
   * The data needed to create a QrCodeDocument.
   */
  data: Prisma.XOR<Prisma.QrCodeDocumentCreateInput, Prisma.QrCodeDocumentUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * QrCodeDocument createMany
 */
export type QrCodeDocumentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many QrCodeDocuments.
   */
  data: Prisma.QrCodeDocumentCreateManyInput | Prisma.QrCodeDocumentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * QrCodeDocument createManyAndReturn
 */
export type QrCodeDocumentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QrCodeDocument
   */
  select?: Prisma.QrCodeDocumentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the QrCodeDocument
   */
  omit?: Prisma.QrCodeDocumentOmit<ExtArgs> | null
  /**
   * The data used to create many QrCodeDocuments.
   */
  data: Prisma.QrCodeDocumentCreateManyInput | Prisma.QrCodeDocumentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QrCodeDocumentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * QrCodeDocument update
 */
export type QrCodeDocumentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QrCodeDocument
   */
  select?: Prisma.QrCodeDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QrCodeDocument
   */
  omit?: Prisma.QrCodeDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QrCodeDocumentInclude<ExtArgs> | null
  /**
   * The data needed to update a QrCodeDocument.
   */
  data: Prisma.XOR<Prisma.QrCodeDocumentUpdateInput, Prisma.QrCodeDocumentUncheckedUpdateInput>
  /**
   * Choose, which QrCodeDocument to update.
   */
  where: Prisma.QrCodeDocumentWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * QrCodeDocument updateMany
 */
export type QrCodeDocumentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update QrCodeDocuments.
   */
  data: Prisma.XOR<Prisma.QrCodeDocumentUpdateManyMutationInput, Prisma.QrCodeDocumentUncheckedUpdateManyInput>
  /**
   * Filter which QrCodeDocuments to update
   */
  where?: Prisma.QrCodeDocumentWhereInput
  /**
   * Limit how many QrCodeDocuments to update.
   */
  limit?: number
}

/**
 * QrCodeDocument updateManyAndReturn
 */
export type QrCodeDocumentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QrCodeDocument
   */
  select?: Prisma.QrCodeDocumentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the QrCodeDocument
   */
  omit?: Prisma.QrCodeDocumentOmit<ExtArgs> | null
  /**
   * The data used to update QrCodeDocuments.
   */
  data: Prisma.XOR<Prisma.QrCodeDocumentUpdateManyMutationInput, Prisma.QrCodeDocumentUncheckedUpdateManyInput>
  /**
   * Filter which QrCodeDocuments to update
   */
  where?: Prisma.QrCodeDocumentWhereInput
  /**
   * Limit how many QrCodeDocuments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QrCodeDocumentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * QrCodeDocument upsert
 */
export type QrCodeDocumentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QrCodeDocument
   */
  select?: Prisma.QrCodeDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QrCodeDocument
   */
  omit?: Prisma.QrCodeDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QrCodeDocumentInclude<ExtArgs> | null
  /**
   * The filter to search for the QrCodeDocument to update in case it exists.
   */
  where: Prisma.QrCodeDocumentWhereUniqueInput
  /**
   * In case the QrCodeDocument found by the `where` argument doesn't exist, create a new QrCodeDocument with this data.
   */
  create: Prisma.XOR<Prisma.QrCodeDocumentCreateInput, Prisma.QrCodeDocumentUncheckedCreateInput>
  /**
   * In case the QrCodeDocument was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.QrCodeDocumentUpdateInput, Prisma.QrCodeDocumentUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * QrCodeDocument delete
 */
export type QrCodeDocumentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QrCodeDocument
   */
  select?: Prisma.QrCodeDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QrCodeDocument
   */
  omit?: Prisma.QrCodeDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QrCodeDocumentInclude<ExtArgs> | null
  /**
   * Filter which QrCodeDocument to delete.
   */
  where: Prisma.QrCodeDocumentWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * QrCodeDocument deleteMany
 */
export type QrCodeDocumentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which QrCodeDocuments to delete
   */
  where?: Prisma.QrCodeDocumentWhereInput
  /**
   * Limit how many QrCodeDocuments to delete.
   */
  limit?: number
}

/**
 * QrCodeDocument without action
 */
export type QrCodeDocumentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QrCodeDocument
   */
  select?: Prisma.QrCodeDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QrCodeDocument
   */
  omit?: Prisma.QrCodeDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QrCodeDocumentInclude<ExtArgs> | null
}
