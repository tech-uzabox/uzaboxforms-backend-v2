
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProcessSave` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model ProcessSave
 * 
 */
export type ProcessSaveModel = runtime.Types.Result.DefaultSelection<Prisma.$ProcessSavePayload>

export type AggregateProcessSave = {
  _count: ProcessSaveCountAggregateOutputType | null
  _min: ProcessSaveMinAggregateOutputType | null
  _max: ProcessSaveMaxAggregateOutputType | null
}

export type ProcessSaveMinAggregateOutputType = {
  id: string | null
  chatId: string | null
  isComplete: boolean | null
  createdAt: Date | null
}

export type ProcessSaveMaxAggregateOutputType = {
  id: string | null
  chatId: string | null
  isComplete: boolean | null
  createdAt: Date | null
}

export type ProcessSaveCountAggregateOutputType = {
  id: number
  chatId: number
  rolesData: number
  processData: number
  stepsData: number
  formsData: number
  isComplete: number
  createdAt: number
  _all: number
}


export type ProcessSaveMinAggregateInputType = {
  id?: true
  chatId?: true
  isComplete?: true
  createdAt?: true
}

export type ProcessSaveMaxAggregateInputType = {
  id?: true
  chatId?: true
  isComplete?: true
  createdAt?: true
}

export type ProcessSaveCountAggregateInputType = {
  id?: true
  chatId?: true
  rolesData?: true
  processData?: true
  stepsData?: true
  formsData?: true
  isComplete?: true
  createdAt?: true
  _all?: true
}

export type ProcessSaveAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProcessSave to aggregate.
   */
  where?: Prisma.ProcessSaveWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessSaves to fetch.
   */
  orderBy?: Prisma.ProcessSaveOrderByWithRelationInput | Prisma.ProcessSaveOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProcessSaveWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessSaves from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessSaves.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProcessSaves
  **/
  _count?: true | ProcessSaveCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProcessSaveMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProcessSaveMaxAggregateInputType
}

export type GetProcessSaveAggregateType<T extends ProcessSaveAggregateArgs> = {
      [P in keyof T & keyof AggregateProcessSave]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProcessSave[P]>
    : Prisma.GetScalarType<T[P], AggregateProcessSave[P]>
}




export type ProcessSaveGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProcessSaveWhereInput
  orderBy?: Prisma.ProcessSaveOrderByWithAggregationInput | Prisma.ProcessSaveOrderByWithAggregationInput[]
  by: Prisma.ProcessSaveScalarFieldEnum[] | Prisma.ProcessSaveScalarFieldEnum
  having?: Prisma.ProcessSaveScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProcessSaveCountAggregateInputType | true
  _min?: ProcessSaveMinAggregateInputType
  _max?: ProcessSaveMaxAggregateInputType
}

export type ProcessSaveGroupByOutputType = {
  id: string
  chatId: string
  rolesData: runtime.JsonValue | null
  processData: runtime.JsonValue | null
  stepsData: runtime.JsonValue | null
  formsData: runtime.JsonValue | null
  isComplete: boolean
  createdAt: Date
  _count: ProcessSaveCountAggregateOutputType | null
  _min: ProcessSaveMinAggregateOutputType | null
  _max: ProcessSaveMaxAggregateOutputType | null
}

type GetProcessSaveGroupByPayload<T extends ProcessSaveGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProcessSaveGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProcessSaveGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProcessSaveGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProcessSaveGroupByOutputType[P]>
      }
    >
  >



export type ProcessSaveWhereInput = {
  AND?: Prisma.ProcessSaveWhereInput | Prisma.ProcessSaveWhereInput[]
  OR?: Prisma.ProcessSaveWhereInput[]
  NOT?: Prisma.ProcessSaveWhereInput | Prisma.ProcessSaveWhereInput[]
  id?: Prisma.UuidFilter<"ProcessSave"> | string
  chatId?: Prisma.UuidFilter<"ProcessSave"> | string
  rolesData?: Prisma.JsonNullableFilter<"ProcessSave">
  processData?: Prisma.JsonNullableFilter<"ProcessSave">
  stepsData?: Prisma.JsonNullableFilter<"ProcessSave">
  formsData?: Prisma.JsonNullableFilter<"ProcessSave">
  isComplete?: Prisma.BoolFilter<"ProcessSave"> | boolean
  createdAt?: Prisma.DateTimeFilter<"ProcessSave"> | Date | string
}

export type ProcessSaveOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  rolesData?: Prisma.SortOrderInput | Prisma.SortOrder
  processData?: Prisma.SortOrderInput | Prisma.SortOrder
  stepsData?: Prisma.SortOrderInput | Prisma.SortOrder
  formsData?: Prisma.SortOrderInput | Prisma.SortOrder
  isComplete?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _relevance?: Prisma.ProcessSaveOrderByRelevanceInput
}

export type ProcessSaveWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  chatId?: string
  AND?: Prisma.ProcessSaveWhereInput | Prisma.ProcessSaveWhereInput[]
  OR?: Prisma.ProcessSaveWhereInput[]
  NOT?: Prisma.ProcessSaveWhereInput | Prisma.ProcessSaveWhereInput[]
  rolesData?: Prisma.JsonNullableFilter<"ProcessSave">
  processData?: Prisma.JsonNullableFilter<"ProcessSave">
  stepsData?: Prisma.JsonNullableFilter<"ProcessSave">
  formsData?: Prisma.JsonNullableFilter<"ProcessSave">
  isComplete?: Prisma.BoolFilter<"ProcessSave"> | boolean
  createdAt?: Prisma.DateTimeFilter<"ProcessSave"> | Date | string
}, "id" | "chatId">

export type ProcessSaveOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  rolesData?: Prisma.SortOrderInput | Prisma.SortOrder
  processData?: Prisma.SortOrderInput | Prisma.SortOrder
  stepsData?: Prisma.SortOrderInput | Prisma.SortOrder
  formsData?: Prisma.SortOrderInput | Prisma.SortOrder
  isComplete?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ProcessSaveCountOrderByAggregateInput
  _max?: Prisma.ProcessSaveMaxOrderByAggregateInput
  _min?: Prisma.ProcessSaveMinOrderByAggregateInput
}

export type ProcessSaveScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProcessSaveScalarWhereWithAggregatesInput | Prisma.ProcessSaveScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProcessSaveScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProcessSaveScalarWhereWithAggregatesInput | Prisma.ProcessSaveScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"ProcessSave"> | string
  chatId?: Prisma.UuidWithAggregatesFilter<"ProcessSave"> | string
  rolesData?: Prisma.JsonNullableWithAggregatesFilter<"ProcessSave">
  processData?: Prisma.JsonNullableWithAggregatesFilter<"ProcessSave">
  stepsData?: Prisma.JsonNullableWithAggregatesFilter<"ProcessSave">
  formsData?: Prisma.JsonNullableWithAggregatesFilter<"ProcessSave">
  isComplete?: Prisma.BoolWithAggregatesFilter<"ProcessSave"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProcessSave"> | Date | string
}

export type ProcessSaveCreateInput = {
  id?: string
  chatId: string
  rolesData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  processData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  stepsData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  formsData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  isComplete?: boolean
  createdAt?: Date | string
}

export type ProcessSaveUncheckedCreateInput = {
  id?: string
  chatId: string
  rolesData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  processData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  stepsData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  formsData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  isComplete?: boolean
  createdAt?: Date | string
}

export type ProcessSaveUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  rolesData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  processData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  stepsData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  formsData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  isComplete?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessSaveUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  rolesData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  processData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  stepsData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  formsData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  isComplete?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessSaveCreateManyInput = {
  id?: string
  chatId: string
  rolesData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  processData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  stepsData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  formsData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  isComplete?: boolean
  createdAt?: Date | string
}

export type ProcessSaveUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  rolesData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  processData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  stepsData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  formsData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  isComplete?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessSaveUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  rolesData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  processData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  stepsData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  formsData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  isComplete?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessSaveOrderByRelevanceInput = {
  fields: Prisma.ProcessSaveOrderByRelevanceFieldEnum | Prisma.ProcessSaveOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ProcessSaveCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  rolesData?: Prisma.SortOrder
  processData?: Prisma.SortOrder
  stepsData?: Prisma.SortOrder
  formsData?: Prisma.SortOrder
  isComplete?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ProcessSaveMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  isComplete?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ProcessSaveMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  isComplete?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}



export type ProcessSaveSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chatId?: boolean
  rolesData?: boolean
  processData?: boolean
  stepsData?: boolean
  formsData?: boolean
  isComplete?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["processSave"]>

export type ProcessSaveSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chatId?: boolean
  rolesData?: boolean
  processData?: boolean
  stepsData?: boolean
  formsData?: boolean
  isComplete?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["processSave"]>

export type ProcessSaveSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chatId?: boolean
  rolesData?: boolean
  processData?: boolean
  stepsData?: boolean
  formsData?: boolean
  isComplete?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["processSave"]>

export type ProcessSaveSelectScalar = {
  id?: boolean
  chatId?: boolean
  rolesData?: boolean
  processData?: boolean
  stepsData?: boolean
  formsData?: boolean
  isComplete?: boolean
  createdAt?: boolean
}

export type ProcessSaveOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "chatId" | "rolesData" | "processData" | "stepsData" | "formsData" | "isComplete" | "createdAt", ExtArgs["result"]["processSave"]>

export type $ProcessSavePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProcessSave"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    chatId: string
    rolesData: runtime.JsonValue | null
    processData: runtime.JsonValue | null
    stepsData: runtime.JsonValue | null
    formsData: runtime.JsonValue | null
    isComplete: boolean
    createdAt: Date
  }, ExtArgs["result"]["processSave"]>
  composites: {}
}

export type ProcessSaveGetPayload<S extends boolean | null | undefined | ProcessSaveDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProcessSavePayload, S>

export type ProcessSaveCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProcessSaveFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: ProcessSaveCountAggregateInputType | true
  }

export interface ProcessSaveDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProcessSave'], meta: { name: 'ProcessSave' } }
  /**
   * Find zero or one ProcessSave that matches the filter.
   * @param {ProcessSaveFindUniqueArgs} args - Arguments to find a ProcessSave
   * @example
   * // Get one ProcessSave
   * const processSave = await prisma.processSave.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProcessSaveFindUniqueArgs>(args: Prisma.SelectSubset<T, ProcessSaveFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProcessSaveClient<runtime.Types.Result.GetResult<Prisma.$ProcessSavePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProcessSave that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProcessSaveFindUniqueOrThrowArgs} args - Arguments to find a ProcessSave
   * @example
   * // Get one ProcessSave
   * const processSave = await prisma.processSave.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProcessSaveFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProcessSaveFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProcessSaveClient<runtime.Types.Result.GetResult<Prisma.$ProcessSavePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProcessSave that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessSaveFindFirstArgs} args - Arguments to find a ProcessSave
   * @example
   * // Get one ProcessSave
   * const processSave = await prisma.processSave.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProcessSaveFindFirstArgs>(args?: Prisma.SelectSubset<T, ProcessSaveFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProcessSaveClient<runtime.Types.Result.GetResult<Prisma.$ProcessSavePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProcessSave that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessSaveFindFirstOrThrowArgs} args - Arguments to find a ProcessSave
   * @example
   * // Get one ProcessSave
   * const processSave = await prisma.processSave.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProcessSaveFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProcessSaveFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProcessSaveClient<runtime.Types.Result.GetResult<Prisma.$ProcessSavePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProcessSaves that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessSaveFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProcessSaves
   * const processSaves = await prisma.processSave.findMany()
   * 
   * // Get first 10 ProcessSaves
   * const processSaves = await prisma.processSave.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const processSaveWithIdOnly = await prisma.processSave.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProcessSaveFindManyArgs>(args?: Prisma.SelectSubset<T, ProcessSaveFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessSavePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProcessSave.
   * @param {ProcessSaveCreateArgs} args - Arguments to create a ProcessSave.
   * @example
   * // Create one ProcessSave
   * const ProcessSave = await prisma.processSave.create({
   *   data: {
   *     // ... data to create a ProcessSave
   *   }
   * })
   * 
   */
  create<T extends ProcessSaveCreateArgs>(args: Prisma.SelectSubset<T, ProcessSaveCreateArgs<ExtArgs>>): Prisma.Prisma__ProcessSaveClient<runtime.Types.Result.GetResult<Prisma.$ProcessSavePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProcessSaves.
   * @param {ProcessSaveCreateManyArgs} args - Arguments to create many ProcessSaves.
   * @example
   * // Create many ProcessSaves
   * const processSave = await prisma.processSave.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProcessSaveCreateManyArgs>(args?: Prisma.SelectSubset<T, ProcessSaveCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProcessSaves and returns the data saved in the database.
   * @param {ProcessSaveCreateManyAndReturnArgs} args - Arguments to create many ProcessSaves.
   * @example
   * // Create many ProcessSaves
   * const processSave = await prisma.processSave.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProcessSaves and only return the `id`
   * const processSaveWithIdOnly = await prisma.processSave.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProcessSaveCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProcessSaveCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessSavePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProcessSave.
   * @param {ProcessSaveDeleteArgs} args - Arguments to delete one ProcessSave.
   * @example
   * // Delete one ProcessSave
   * const ProcessSave = await prisma.processSave.delete({
   *   where: {
   *     // ... filter to delete one ProcessSave
   *   }
   * })
   * 
   */
  delete<T extends ProcessSaveDeleteArgs>(args: Prisma.SelectSubset<T, ProcessSaveDeleteArgs<ExtArgs>>): Prisma.Prisma__ProcessSaveClient<runtime.Types.Result.GetResult<Prisma.$ProcessSavePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProcessSave.
   * @param {ProcessSaveUpdateArgs} args - Arguments to update one ProcessSave.
   * @example
   * // Update one ProcessSave
   * const processSave = await prisma.processSave.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProcessSaveUpdateArgs>(args: Prisma.SelectSubset<T, ProcessSaveUpdateArgs<ExtArgs>>): Prisma.Prisma__ProcessSaveClient<runtime.Types.Result.GetResult<Prisma.$ProcessSavePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProcessSaves.
   * @param {ProcessSaveDeleteManyArgs} args - Arguments to filter ProcessSaves to delete.
   * @example
   * // Delete a few ProcessSaves
   * const { count } = await prisma.processSave.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProcessSaveDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProcessSaveDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProcessSaves.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessSaveUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProcessSaves
   * const processSave = await prisma.processSave.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProcessSaveUpdateManyArgs>(args: Prisma.SelectSubset<T, ProcessSaveUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProcessSaves and returns the data updated in the database.
   * @param {ProcessSaveUpdateManyAndReturnArgs} args - Arguments to update many ProcessSaves.
   * @example
   * // Update many ProcessSaves
   * const processSave = await prisma.processSave.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProcessSaves and only return the `id`
   * const processSaveWithIdOnly = await prisma.processSave.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProcessSaveUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProcessSaveUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessSavePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProcessSave.
   * @param {ProcessSaveUpsertArgs} args - Arguments to update or create a ProcessSave.
   * @example
   * // Update or create a ProcessSave
   * const processSave = await prisma.processSave.upsert({
   *   create: {
   *     // ... data to create a ProcessSave
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProcessSave we want to update
   *   }
   * })
   */
  upsert<T extends ProcessSaveUpsertArgs>(args: Prisma.SelectSubset<T, ProcessSaveUpsertArgs<ExtArgs>>): Prisma.Prisma__ProcessSaveClient<runtime.Types.Result.GetResult<Prisma.$ProcessSavePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProcessSaves.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessSaveCountArgs} args - Arguments to filter ProcessSaves to count.
   * @example
   * // Count the number of ProcessSaves
   * const count = await prisma.processSave.count({
   *   where: {
   *     // ... the filter for the ProcessSaves we want to count
   *   }
   * })
  **/
  count<T extends ProcessSaveCountArgs>(
    args?: Prisma.Subset<T, ProcessSaveCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProcessSaveCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProcessSave.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessSaveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProcessSaveAggregateArgs>(args: Prisma.Subset<T, ProcessSaveAggregateArgs>): Prisma.PrismaPromise<GetProcessSaveAggregateType<T>>

  /**
   * Group by ProcessSave.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessSaveGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProcessSaveGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProcessSaveGroupByArgs['orderBy'] }
      : { orderBy?: ProcessSaveGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProcessSaveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcessSaveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProcessSave model
 */
readonly fields: ProcessSaveFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProcessSave.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProcessSaveClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProcessSave model
 */
export interface ProcessSaveFieldRefs {
  readonly id: Prisma.FieldRef<"ProcessSave", 'String'>
  readonly chatId: Prisma.FieldRef<"ProcessSave", 'String'>
  readonly rolesData: Prisma.FieldRef<"ProcessSave", 'Json'>
  readonly processData: Prisma.FieldRef<"ProcessSave", 'Json'>
  readonly stepsData: Prisma.FieldRef<"ProcessSave", 'Json'>
  readonly formsData: Prisma.FieldRef<"ProcessSave", 'Json'>
  readonly isComplete: Prisma.FieldRef<"ProcessSave", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"ProcessSave", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProcessSave findUnique
 */
export type ProcessSaveFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessSave
   */
  select?: Prisma.ProcessSaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessSave
   */
  omit?: Prisma.ProcessSaveOmit<ExtArgs> | null
  /**
   * Filter, which ProcessSave to fetch.
   */
  where: Prisma.ProcessSaveWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessSave findUniqueOrThrow
 */
export type ProcessSaveFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessSave
   */
  select?: Prisma.ProcessSaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessSave
   */
  omit?: Prisma.ProcessSaveOmit<ExtArgs> | null
  /**
   * Filter, which ProcessSave to fetch.
   */
  where: Prisma.ProcessSaveWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessSave findFirst
 */
export type ProcessSaveFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessSave
   */
  select?: Prisma.ProcessSaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessSave
   */
  omit?: Prisma.ProcessSaveOmit<ExtArgs> | null
  /**
   * Filter, which ProcessSave to fetch.
   */
  where?: Prisma.ProcessSaveWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessSaves to fetch.
   */
  orderBy?: Prisma.ProcessSaveOrderByWithRelationInput | Prisma.ProcessSaveOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProcessSaves.
   */
  cursor?: Prisma.ProcessSaveWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessSaves from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessSaves.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProcessSaves.
   */
  distinct?: Prisma.ProcessSaveScalarFieldEnum | Prisma.ProcessSaveScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessSave findFirstOrThrow
 */
export type ProcessSaveFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessSave
   */
  select?: Prisma.ProcessSaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessSave
   */
  omit?: Prisma.ProcessSaveOmit<ExtArgs> | null
  /**
   * Filter, which ProcessSave to fetch.
   */
  where?: Prisma.ProcessSaveWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessSaves to fetch.
   */
  orderBy?: Prisma.ProcessSaveOrderByWithRelationInput | Prisma.ProcessSaveOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProcessSaves.
   */
  cursor?: Prisma.ProcessSaveWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessSaves from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessSaves.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProcessSaves.
   */
  distinct?: Prisma.ProcessSaveScalarFieldEnum | Prisma.ProcessSaveScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessSave findMany
 */
export type ProcessSaveFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessSave
   */
  select?: Prisma.ProcessSaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessSave
   */
  omit?: Prisma.ProcessSaveOmit<ExtArgs> | null
  /**
   * Filter, which ProcessSaves to fetch.
   */
  where?: Prisma.ProcessSaveWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessSaves to fetch.
   */
  orderBy?: Prisma.ProcessSaveOrderByWithRelationInput | Prisma.ProcessSaveOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProcessSaves.
   */
  cursor?: Prisma.ProcessSaveWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessSaves from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessSaves.
   */
  skip?: number
  distinct?: Prisma.ProcessSaveScalarFieldEnum | Prisma.ProcessSaveScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessSave create
 */
export type ProcessSaveCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessSave
   */
  select?: Prisma.ProcessSaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessSave
   */
  omit?: Prisma.ProcessSaveOmit<ExtArgs> | null
  /**
   * The data needed to create a ProcessSave.
   */
  data: Prisma.XOR<Prisma.ProcessSaveCreateInput, Prisma.ProcessSaveUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessSave createMany
 */
export type ProcessSaveCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProcessSaves.
   */
  data: Prisma.ProcessSaveCreateManyInput | Prisma.ProcessSaveCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProcessSave createManyAndReturn
 */
export type ProcessSaveCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessSave
   */
  select?: Prisma.ProcessSaveSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessSave
   */
  omit?: Prisma.ProcessSaveOmit<ExtArgs> | null
  /**
   * The data used to create many ProcessSaves.
   */
  data: Prisma.ProcessSaveCreateManyInput | Prisma.ProcessSaveCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProcessSave update
 */
export type ProcessSaveUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessSave
   */
  select?: Prisma.ProcessSaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessSave
   */
  omit?: Prisma.ProcessSaveOmit<ExtArgs> | null
  /**
   * The data needed to update a ProcessSave.
   */
  data: Prisma.XOR<Prisma.ProcessSaveUpdateInput, Prisma.ProcessSaveUncheckedUpdateInput>
  /**
   * Choose, which ProcessSave to update.
   */
  where: Prisma.ProcessSaveWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessSave updateMany
 */
export type ProcessSaveUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProcessSaves.
   */
  data: Prisma.XOR<Prisma.ProcessSaveUpdateManyMutationInput, Prisma.ProcessSaveUncheckedUpdateManyInput>
  /**
   * Filter which ProcessSaves to update
   */
  where?: Prisma.ProcessSaveWhereInput
  /**
   * Limit how many ProcessSaves to update.
   */
  limit?: number
}

/**
 * ProcessSave updateManyAndReturn
 */
export type ProcessSaveUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessSave
   */
  select?: Prisma.ProcessSaveSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessSave
   */
  omit?: Prisma.ProcessSaveOmit<ExtArgs> | null
  /**
   * The data used to update ProcessSaves.
   */
  data: Prisma.XOR<Prisma.ProcessSaveUpdateManyMutationInput, Prisma.ProcessSaveUncheckedUpdateManyInput>
  /**
   * Filter which ProcessSaves to update
   */
  where?: Prisma.ProcessSaveWhereInput
  /**
   * Limit how many ProcessSaves to update.
   */
  limit?: number
}

/**
 * ProcessSave upsert
 */
export type ProcessSaveUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessSave
   */
  select?: Prisma.ProcessSaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessSave
   */
  omit?: Prisma.ProcessSaveOmit<ExtArgs> | null
  /**
   * The filter to search for the ProcessSave to update in case it exists.
   */
  where: Prisma.ProcessSaveWhereUniqueInput
  /**
   * In case the ProcessSave found by the `where` argument doesn't exist, create a new ProcessSave with this data.
   */
  create: Prisma.XOR<Prisma.ProcessSaveCreateInput, Prisma.ProcessSaveUncheckedCreateInput>
  /**
   * In case the ProcessSave was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProcessSaveUpdateInput, Prisma.ProcessSaveUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessSave delete
 */
export type ProcessSaveDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessSave
   */
  select?: Prisma.ProcessSaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessSave
   */
  omit?: Prisma.ProcessSaveOmit<ExtArgs> | null
  /**
   * Filter which ProcessSave to delete.
   */
  where: Prisma.ProcessSaveWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessSave deleteMany
 */
export type ProcessSaveDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProcessSaves to delete
   */
  where?: Prisma.ProcessSaveWhereInput
  /**
   * Limit how many ProcessSaves to delete.
   */
  limit?: number
}

/**
 * ProcessSave without action
 */
export type ProcessSaveDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessSave
   */
  select?: Prisma.ProcessSaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessSave
   */
  omit?: Prisma.ProcessSaveOmit<ExtArgs> | null
}
