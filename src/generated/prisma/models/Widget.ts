
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Widget` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Widget
 * 
 */
export type WidgetModel = runtime.Types.Result.DefaultSelection<Prisma.$WidgetPayload>

export type AggregateWidget = {
  _count: WidgetCountAggregateOutputType | null
  _avg: WidgetAvgAggregateOutputType | null
  _sum: WidgetSumAggregateOutputType | null
  _min: WidgetMinAggregateOutputType | null
  _max: WidgetMaxAggregateOutputType | null
}

export type WidgetAvgAggregateOutputType = {
  order: number | null
}

export type WidgetSumAggregateOutputType = {
  order: number | null
}

export type WidgetMinAggregateOutputType = {
  id: string | null
  dashboardId: string | null
  description: string | null
  title: string | null
  visualizationType: string | null
  order: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WidgetMaxAggregateOutputType = {
  id: string | null
  dashboardId: string | null
  description: string | null
  title: string | null
  visualizationType: string | null
  order: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WidgetCountAggregateOutputType = {
  id: number
  dashboardId: number
  description: number
  title: number
  visualizationType: number
  config: number
  order: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type WidgetAvgAggregateInputType = {
  order?: true
}

export type WidgetSumAggregateInputType = {
  order?: true
}

export type WidgetMinAggregateInputType = {
  id?: true
  dashboardId?: true
  description?: true
  title?: true
  visualizationType?: true
  order?: true
  createdAt?: true
  updatedAt?: true
}

export type WidgetMaxAggregateInputType = {
  id?: true
  dashboardId?: true
  description?: true
  title?: true
  visualizationType?: true
  order?: true
  createdAt?: true
  updatedAt?: true
}

export type WidgetCountAggregateInputType = {
  id?: true
  dashboardId?: true
  description?: true
  title?: true
  visualizationType?: true
  config?: true
  order?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type WidgetAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Widget to aggregate.
   */
  where?: Prisma.WidgetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Widgets to fetch.
   */
  orderBy?: Prisma.WidgetOrderByWithRelationInput | Prisma.WidgetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WidgetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Widgets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Widgets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Widgets
  **/
  _count?: true | WidgetCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WidgetAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WidgetSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WidgetMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WidgetMaxAggregateInputType
}

export type GetWidgetAggregateType<T extends WidgetAggregateArgs> = {
      [P in keyof T & keyof AggregateWidget]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWidget[P]>
    : Prisma.GetScalarType<T[P], AggregateWidget[P]>
}




export type WidgetGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WidgetWhereInput
  orderBy?: Prisma.WidgetOrderByWithAggregationInput | Prisma.WidgetOrderByWithAggregationInput[]
  by: Prisma.WidgetScalarFieldEnum[] | Prisma.WidgetScalarFieldEnum
  having?: Prisma.WidgetScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WidgetCountAggregateInputType | true
  _avg?: WidgetAvgAggregateInputType
  _sum?: WidgetSumAggregateInputType
  _min?: WidgetMinAggregateInputType
  _max?: WidgetMaxAggregateInputType
}

export type WidgetGroupByOutputType = {
  id: string
  dashboardId: string
  description: string | null
  title: string
  visualizationType: string
  config: runtime.JsonValue
  order: number
  createdAt: Date
  updatedAt: Date
  _count: WidgetCountAggregateOutputType | null
  _avg: WidgetAvgAggregateOutputType | null
  _sum: WidgetSumAggregateOutputType | null
  _min: WidgetMinAggregateOutputType | null
  _max: WidgetMaxAggregateOutputType | null
}

type GetWidgetGroupByPayload<T extends WidgetGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WidgetGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WidgetGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WidgetGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WidgetGroupByOutputType[P]>
      }
    >
  >



export type WidgetWhereInput = {
  AND?: Prisma.WidgetWhereInput | Prisma.WidgetWhereInput[]
  OR?: Prisma.WidgetWhereInput[]
  NOT?: Prisma.WidgetWhereInput | Prisma.WidgetWhereInput[]
  id?: Prisma.UuidFilter<"Widget"> | string
  dashboardId?: Prisma.UuidFilter<"Widget"> | string
  description?: Prisma.StringNullableFilter<"Widget"> | string | null
  title?: Prisma.StringFilter<"Widget"> | string
  visualizationType?: Prisma.StringFilter<"Widget"> | string
  config?: Prisma.JsonFilter<"Widget">
  order?: Prisma.IntFilter<"Widget"> | number
  createdAt?: Prisma.DateTimeFilter<"Widget"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Widget"> | Date | string
  dashboard?: Prisma.XOR<Prisma.DashboardScalarRelationFilter, Prisma.DashboardWhereInput>
}

export type WidgetOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  dashboardId?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  title?: Prisma.SortOrder
  visualizationType?: Prisma.SortOrder
  config?: Prisma.SortOrder
  order?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dashboard?: Prisma.DashboardOrderByWithRelationInput
  _relevance?: Prisma.WidgetOrderByRelevanceInput
}

export type WidgetWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.WidgetWhereInput | Prisma.WidgetWhereInput[]
  OR?: Prisma.WidgetWhereInput[]
  NOT?: Prisma.WidgetWhereInput | Prisma.WidgetWhereInput[]
  dashboardId?: Prisma.UuidFilter<"Widget"> | string
  description?: Prisma.StringNullableFilter<"Widget"> | string | null
  title?: Prisma.StringFilter<"Widget"> | string
  visualizationType?: Prisma.StringFilter<"Widget"> | string
  config?: Prisma.JsonFilter<"Widget">
  order?: Prisma.IntFilter<"Widget"> | number
  createdAt?: Prisma.DateTimeFilter<"Widget"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Widget"> | Date | string
  dashboard?: Prisma.XOR<Prisma.DashboardScalarRelationFilter, Prisma.DashboardWhereInput>
}, "id">

export type WidgetOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  dashboardId?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  title?: Prisma.SortOrder
  visualizationType?: Prisma.SortOrder
  config?: Prisma.SortOrder
  order?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.WidgetCountOrderByAggregateInput
  _avg?: Prisma.WidgetAvgOrderByAggregateInput
  _max?: Prisma.WidgetMaxOrderByAggregateInput
  _min?: Prisma.WidgetMinOrderByAggregateInput
  _sum?: Prisma.WidgetSumOrderByAggregateInput
}

export type WidgetScalarWhereWithAggregatesInput = {
  AND?: Prisma.WidgetScalarWhereWithAggregatesInput | Prisma.WidgetScalarWhereWithAggregatesInput[]
  OR?: Prisma.WidgetScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WidgetScalarWhereWithAggregatesInput | Prisma.WidgetScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Widget"> | string
  dashboardId?: Prisma.UuidWithAggregatesFilter<"Widget"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Widget"> | string | null
  title?: Prisma.StringWithAggregatesFilter<"Widget"> | string
  visualizationType?: Prisma.StringWithAggregatesFilter<"Widget"> | string
  config?: Prisma.JsonWithAggregatesFilter<"Widget">
  order?: Prisma.IntWithAggregatesFilter<"Widget"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Widget"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Widget"> | Date | string
}

export type WidgetCreateInput = {
  id?: string
  description?: string | null
  title: string
  visualizationType: string
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order: number
  createdAt?: Date | string
  updatedAt?: Date | string
  dashboard: Prisma.DashboardCreateNestedOneWithoutWidgetsInput
}

export type WidgetUncheckedCreateInput = {
  id?: string
  dashboardId: string
  description?: string | null
  title: string
  visualizationType: string
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WidgetUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  visualizationType?: Prisma.StringFieldUpdateOperationsInput | string
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dashboard?: Prisma.DashboardUpdateOneRequiredWithoutWidgetsNestedInput
}

export type WidgetUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dashboardId?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  visualizationType?: Prisma.StringFieldUpdateOperationsInput | string
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WidgetCreateManyInput = {
  id?: string
  dashboardId: string
  description?: string | null
  title: string
  visualizationType: string
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WidgetUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  visualizationType?: Prisma.StringFieldUpdateOperationsInput | string
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WidgetUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dashboardId?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  visualizationType?: Prisma.StringFieldUpdateOperationsInput | string
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WidgetListRelationFilter = {
  every?: Prisma.WidgetWhereInput
  some?: Prisma.WidgetWhereInput
  none?: Prisma.WidgetWhereInput
}

export type WidgetOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WidgetOrderByRelevanceInput = {
  fields: Prisma.WidgetOrderByRelevanceFieldEnum | Prisma.WidgetOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type WidgetCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dashboardId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  title?: Prisma.SortOrder
  visualizationType?: Prisma.SortOrder
  config?: Prisma.SortOrder
  order?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WidgetAvgOrderByAggregateInput = {
  order?: Prisma.SortOrder
}

export type WidgetMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dashboardId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  title?: Prisma.SortOrder
  visualizationType?: Prisma.SortOrder
  order?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WidgetMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dashboardId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  title?: Prisma.SortOrder
  visualizationType?: Prisma.SortOrder
  order?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WidgetSumOrderByAggregateInput = {
  order?: Prisma.SortOrder
}

export type WidgetCreateNestedManyWithoutDashboardInput = {
  create?: Prisma.XOR<Prisma.WidgetCreateWithoutDashboardInput, Prisma.WidgetUncheckedCreateWithoutDashboardInput> | Prisma.WidgetCreateWithoutDashboardInput[] | Prisma.WidgetUncheckedCreateWithoutDashboardInput[]
  connectOrCreate?: Prisma.WidgetCreateOrConnectWithoutDashboardInput | Prisma.WidgetCreateOrConnectWithoutDashboardInput[]
  createMany?: Prisma.WidgetCreateManyDashboardInputEnvelope
  connect?: Prisma.WidgetWhereUniqueInput | Prisma.WidgetWhereUniqueInput[]
}

export type WidgetUncheckedCreateNestedManyWithoutDashboardInput = {
  create?: Prisma.XOR<Prisma.WidgetCreateWithoutDashboardInput, Prisma.WidgetUncheckedCreateWithoutDashboardInput> | Prisma.WidgetCreateWithoutDashboardInput[] | Prisma.WidgetUncheckedCreateWithoutDashboardInput[]
  connectOrCreate?: Prisma.WidgetCreateOrConnectWithoutDashboardInput | Prisma.WidgetCreateOrConnectWithoutDashboardInput[]
  createMany?: Prisma.WidgetCreateManyDashboardInputEnvelope
  connect?: Prisma.WidgetWhereUniqueInput | Prisma.WidgetWhereUniqueInput[]
}

export type WidgetUpdateManyWithoutDashboardNestedInput = {
  create?: Prisma.XOR<Prisma.WidgetCreateWithoutDashboardInput, Prisma.WidgetUncheckedCreateWithoutDashboardInput> | Prisma.WidgetCreateWithoutDashboardInput[] | Prisma.WidgetUncheckedCreateWithoutDashboardInput[]
  connectOrCreate?: Prisma.WidgetCreateOrConnectWithoutDashboardInput | Prisma.WidgetCreateOrConnectWithoutDashboardInput[]
  upsert?: Prisma.WidgetUpsertWithWhereUniqueWithoutDashboardInput | Prisma.WidgetUpsertWithWhereUniqueWithoutDashboardInput[]
  createMany?: Prisma.WidgetCreateManyDashboardInputEnvelope
  set?: Prisma.WidgetWhereUniqueInput | Prisma.WidgetWhereUniqueInput[]
  disconnect?: Prisma.WidgetWhereUniqueInput | Prisma.WidgetWhereUniqueInput[]
  delete?: Prisma.WidgetWhereUniqueInput | Prisma.WidgetWhereUniqueInput[]
  connect?: Prisma.WidgetWhereUniqueInput | Prisma.WidgetWhereUniqueInput[]
  update?: Prisma.WidgetUpdateWithWhereUniqueWithoutDashboardInput | Prisma.WidgetUpdateWithWhereUniqueWithoutDashboardInput[]
  updateMany?: Prisma.WidgetUpdateManyWithWhereWithoutDashboardInput | Prisma.WidgetUpdateManyWithWhereWithoutDashboardInput[]
  deleteMany?: Prisma.WidgetScalarWhereInput | Prisma.WidgetScalarWhereInput[]
}

export type WidgetUncheckedUpdateManyWithoutDashboardNestedInput = {
  create?: Prisma.XOR<Prisma.WidgetCreateWithoutDashboardInput, Prisma.WidgetUncheckedCreateWithoutDashboardInput> | Prisma.WidgetCreateWithoutDashboardInput[] | Prisma.WidgetUncheckedCreateWithoutDashboardInput[]
  connectOrCreate?: Prisma.WidgetCreateOrConnectWithoutDashboardInput | Prisma.WidgetCreateOrConnectWithoutDashboardInput[]
  upsert?: Prisma.WidgetUpsertWithWhereUniqueWithoutDashboardInput | Prisma.WidgetUpsertWithWhereUniqueWithoutDashboardInput[]
  createMany?: Prisma.WidgetCreateManyDashboardInputEnvelope
  set?: Prisma.WidgetWhereUniqueInput | Prisma.WidgetWhereUniqueInput[]
  disconnect?: Prisma.WidgetWhereUniqueInput | Prisma.WidgetWhereUniqueInput[]
  delete?: Prisma.WidgetWhereUniqueInput | Prisma.WidgetWhereUniqueInput[]
  connect?: Prisma.WidgetWhereUniqueInput | Prisma.WidgetWhereUniqueInput[]
  update?: Prisma.WidgetUpdateWithWhereUniqueWithoutDashboardInput | Prisma.WidgetUpdateWithWhereUniqueWithoutDashboardInput[]
  updateMany?: Prisma.WidgetUpdateManyWithWhereWithoutDashboardInput | Prisma.WidgetUpdateManyWithWhereWithoutDashboardInput[]
  deleteMany?: Prisma.WidgetScalarWhereInput | Prisma.WidgetScalarWhereInput[]
}

export type WidgetCreateWithoutDashboardInput = {
  id?: string
  description?: string | null
  title: string
  visualizationType: string
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WidgetUncheckedCreateWithoutDashboardInput = {
  id?: string
  description?: string | null
  title: string
  visualizationType: string
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WidgetCreateOrConnectWithoutDashboardInput = {
  where: Prisma.WidgetWhereUniqueInput
  create: Prisma.XOR<Prisma.WidgetCreateWithoutDashboardInput, Prisma.WidgetUncheckedCreateWithoutDashboardInput>
}

export type WidgetCreateManyDashboardInputEnvelope = {
  data: Prisma.WidgetCreateManyDashboardInput | Prisma.WidgetCreateManyDashboardInput[]
  skipDuplicates?: boolean
}

export type WidgetUpsertWithWhereUniqueWithoutDashboardInput = {
  where: Prisma.WidgetWhereUniqueInput
  update: Prisma.XOR<Prisma.WidgetUpdateWithoutDashboardInput, Prisma.WidgetUncheckedUpdateWithoutDashboardInput>
  create: Prisma.XOR<Prisma.WidgetCreateWithoutDashboardInput, Prisma.WidgetUncheckedCreateWithoutDashboardInput>
}

export type WidgetUpdateWithWhereUniqueWithoutDashboardInput = {
  where: Prisma.WidgetWhereUniqueInput
  data: Prisma.XOR<Prisma.WidgetUpdateWithoutDashboardInput, Prisma.WidgetUncheckedUpdateWithoutDashboardInput>
}

export type WidgetUpdateManyWithWhereWithoutDashboardInput = {
  where: Prisma.WidgetScalarWhereInput
  data: Prisma.XOR<Prisma.WidgetUpdateManyMutationInput, Prisma.WidgetUncheckedUpdateManyWithoutDashboardInput>
}

export type WidgetScalarWhereInput = {
  AND?: Prisma.WidgetScalarWhereInput | Prisma.WidgetScalarWhereInput[]
  OR?: Prisma.WidgetScalarWhereInput[]
  NOT?: Prisma.WidgetScalarWhereInput | Prisma.WidgetScalarWhereInput[]
  id?: Prisma.UuidFilter<"Widget"> | string
  dashboardId?: Prisma.UuidFilter<"Widget"> | string
  description?: Prisma.StringNullableFilter<"Widget"> | string | null
  title?: Prisma.StringFilter<"Widget"> | string
  visualizationType?: Prisma.StringFilter<"Widget"> | string
  config?: Prisma.JsonFilter<"Widget">
  order?: Prisma.IntFilter<"Widget"> | number
  createdAt?: Prisma.DateTimeFilter<"Widget"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Widget"> | Date | string
}

export type WidgetCreateManyDashboardInput = {
  id?: string
  description?: string | null
  title: string
  visualizationType: string
  config: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WidgetUpdateWithoutDashboardInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  visualizationType?: Prisma.StringFieldUpdateOperationsInput | string
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WidgetUncheckedUpdateWithoutDashboardInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  visualizationType?: Prisma.StringFieldUpdateOperationsInput | string
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WidgetUncheckedUpdateManyWithoutDashboardInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  visualizationType?: Prisma.StringFieldUpdateOperationsInput | string
  config?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type WidgetSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  dashboardId?: boolean
  description?: boolean
  title?: boolean
  visualizationType?: boolean
  config?: boolean
  order?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dashboard?: boolean | Prisma.DashboardDefaultArgs<ExtArgs>
}, ExtArgs["result"]["widget"]>

export type WidgetSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  dashboardId?: boolean
  description?: boolean
  title?: boolean
  visualizationType?: boolean
  config?: boolean
  order?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dashboard?: boolean | Prisma.DashboardDefaultArgs<ExtArgs>
}, ExtArgs["result"]["widget"]>

export type WidgetSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  dashboardId?: boolean
  description?: boolean
  title?: boolean
  visualizationType?: boolean
  config?: boolean
  order?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dashboard?: boolean | Prisma.DashboardDefaultArgs<ExtArgs>
}, ExtArgs["result"]["widget"]>

export type WidgetSelectScalar = {
  id?: boolean
  dashboardId?: boolean
  description?: boolean
  title?: boolean
  visualizationType?: boolean
  config?: boolean
  order?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type WidgetOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "dashboardId" | "description" | "title" | "visualizationType" | "config" | "order" | "createdAt" | "updatedAt", ExtArgs["result"]["widget"]>
export type WidgetInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dashboard?: boolean | Prisma.DashboardDefaultArgs<ExtArgs>
}
export type WidgetIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dashboard?: boolean | Prisma.DashboardDefaultArgs<ExtArgs>
}
export type WidgetIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dashboard?: boolean | Prisma.DashboardDefaultArgs<ExtArgs>
}

export type $WidgetPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Widget"
  objects: {
    dashboard: Prisma.$DashboardPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    dashboardId: string
    description: string | null
    title: string
    visualizationType: string
    config: runtime.JsonValue
    order: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["widget"]>
  composites: {}
}

export type WidgetGetPayload<S extends boolean | null | undefined | WidgetDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WidgetPayload, S>

export type WidgetCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WidgetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: WidgetCountAggregateInputType | true
  }

export interface WidgetDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Widget'], meta: { name: 'Widget' } }
  /**
   * Find zero or one Widget that matches the filter.
   * @param {WidgetFindUniqueArgs} args - Arguments to find a Widget
   * @example
   * // Get one Widget
   * const widget = await prisma.widget.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WidgetFindUniqueArgs>(args: Prisma.SelectSubset<T, WidgetFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WidgetClient<runtime.Types.Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Widget that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WidgetFindUniqueOrThrowArgs} args - Arguments to find a Widget
   * @example
   * // Get one Widget
   * const widget = await prisma.widget.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WidgetFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WidgetFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WidgetClient<runtime.Types.Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Widget that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WidgetFindFirstArgs} args - Arguments to find a Widget
   * @example
   * // Get one Widget
   * const widget = await prisma.widget.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WidgetFindFirstArgs>(args?: Prisma.SelectSubset<T, WidgetFindFirstArgs<ExtArgs>>): Prisma.Prisma__WidgetClient<runtime.Types.Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Widget that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WidgetFindFirstOrThrowArgs} args - Arguments to find a Widget
   * @example
   * // Get one Widget
   * const widget = await prisma.widget.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WidgetFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WidgetFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WidgetClient<runtime.Types.Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Widgets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WidgetFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Widgets
   * const widgets = await prisma.widget.findMany()
   * 
   * // Get first 10 Widgets
   * const widgets = await prisma.widget.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const widgetWithIdOnly = await prisma.widget.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WidgetFindManyArgs>(args?: Prisma.SelectSubset<T, WidgetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Widget.
   * @param {WidgetCreateArgs} args - Arguments to create a Widget.
   * @example
   * // Create one Widget
   * const Widget = await prisma.widget.create({
   *   data: {
   *     // ... data to create a Widget
   *   }
   * })
   * 
   */
  create<T extends WidgetCreateArgs>(args: Prisma.SelectSubset<T, WidgetCreateArgs<ExtArgs>>): Prisma.Prisma__WidgetClient<runtime.Types.Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Widgets.
   * @param {WidgetCreateManyArgs} args - Arguments to create many Widgets.
   * @example
   * // Create many Widgets
   * const widget = await prisma.widget.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WidgetCreateManyArgs>(args?: Prisma.SelectSubset<T, WidgetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Widgets and returns the data saved in the database.
   * @param {WidgetCreateManyAndReturnArgs} args - Arguments to create many Widgets.
   * @example
   * // Create many Widgets
   * const widget = await prisma.widget.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Widgets and only return the `id`
   * const widgetWithIdOnly = await prisma.widget.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WidgetCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WidgetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Widget.
   * @param {WidgetDeleteArgs} args - Arguments to delete one Widget.
   * @example
   * // Delete one Widget
   * const Widget = await prisma.widget.delete({
   *   where: {
   *     // ... filter to delete one Widget
   *   }
   * })
   * 
   */
  delete<T extends WidgetDeleteArgs>(args: Prisma.SelectSubset<T, WidgetDeleteArgs<ExtArgs>>): Prisma.Prisma__WidgetClient<runtime.Types.Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Widget.
   * @param {WidgetUpdateArgs} args - Arguments to update one Widget.
   * @example
   * // Update one Widget
   * const widget = await prisma.widget.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WidgetUpdateArgs>(args: Prisma.SelectSubset<T, WidgetUpdateArgs<ExtArgs>>): Prisma.Prisma__WidgetClient<runtime.Types.Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Widgets.
   * @param {WidgetDeleteManyArgs} args - Arguments to filter Widgets to delete.
   * @example
   * // Delete a few Widgets
   * const { count } = await prisma.widget.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WidgetDeleteManyArgs>(args?: Prisma.SelectSubset<T, WidgetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Widgets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WidgetUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Widgets
   * const widget = await prisma.widget.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WidgetUpdateManyArgs>(args: Prisma.SelectSubset<T, WidgetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Widgets and returns the data updated in the database.
   * @param {WidgetUpdateManyAndReturnArgs} args - Arguments to update many Widgets.
   * @example
   * // Update many Widgets
   * const widget = await prisma.widget.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Widgets and only return the `id`
   * const widgetWithIdOnly = await prisma.widget.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WidgetUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WidgetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Widget.
   * @param {WidgetUpsertArgs} args - Arguments to update or create a Widget.
   * @example
   * // Update or create a Widget
   * const widget = await prisma.widget.upsert({
   *   create: {
   *     // ... data to create a Widget
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Widget we want to update
   *   }
   * })
   */
  upsert<T extends WidgetUpsertArgs>(args: Prisma.SelectSubset<T, WidgetUpsertArgs<ExtArgs>>): Prisma.Prisma__WidgetClient<runtime.Types.Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Widgets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WidgetCountArgs} args - Arguments to filter Widgets to count.
   * @example
   * // Count the number of Widgets
   * const count = await prisma.widget.count({
   *   where: {
   *     // ... the filter for the Widgets we want to count
   *   }
   * })
  **/
  count<T extends WidgetCountArgs>(
    args?: Prisma.Subset<T, WidgetCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WidgetCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Widget.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WidgetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WidgetAggregateArgs>(args: Prisma.Subset<T, WidgetAggregateArgs>): Prisma.PrismaPromise<GetWidgetAggregateType<T>>

  /**
   * Group by Widget.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WidgetGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WidgetGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WidgetGroupByArgs['orderBy'] }
      : { orderBy?: WidgetGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WidgetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWidgetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Widget model
 */
readonly fields: WidgetFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Widget.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WidgetClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  dashboard<T extends Prisma.DashboardDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DashboardDefaultArgs<ExtArgs>>): Prisma.Prisma__DashboardClient<runtime.Types.Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Widget model
 */
export interface WidgetFieldRefs {
  readonly id: Prisma.FieldRef<"Widget", 'String'>
  readonly dashboardId: Prisma.FieldRef<"Widget", 'String'>
  readonly description: Prisma.FieldRef<"Widget", 'String'>
  readonly title: Prisma.FieldRef<"Widget", 'String'>
  readonly visualizationType: Prisma.FieldRef<"Widget", 'String'>
  readonly config: Prisma.FieldRef<"Widget", 'Json'>
  readonly order: Prisma.FieldRef<"Widget", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Widget", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Widget", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Widget findUnique
 */
export type WidgetFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Widget
   */
  select?: Prisma.WidgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Widget
   */
  omit?: Prisma.WidgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetInclude<ExtArgs> | null
  /**
   * Filter, which Widget to fetch.
   */
  where: Prisma.WidgetWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Widget findUniqueOrThrow
 */
export type WidgetFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Widget
   */
  select?: Prisma.WidgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Widget
   */
  omit?: Prisma.WidgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetInclude<ExtArgs> | null
  /**
   * Filter, which Widget to fetch.
   */
  where: Prisma.WidgetWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Widget findFirst
 */
export type WidgetFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Widget
   */
  select?: Prisma.WidgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Widget
   */
  omit?: Prisma.WidgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetInclude<ExtArgs> | null
  /**
   * Filter, which Widget to fetch.
   */
  where?: Prisma.WidgetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Widgets to fetch.
   */
  orderBy?: Prisma.WidgetOrderByWithRelationInput | Prisma.WidgetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Widgets.
   */
  cursor?: Prisma.WidgetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Widgets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Widgets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Widgets.
   */
  distinct?: Prisma.WidgetScalarFieldEnum | Prisma.WidgetScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Widget findFirstOrThrow
 */
export type WidgetFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Widget
   */
  select?: Prisma.WidgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Widget
   */
  omit?: Prisma.WidgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetInclude<ExtArgs> | null
  /**
   * Filter, which Widget to fetch.
   */
  where?: Prisma.WidgetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Widgets to fetch.
   */
  orderBy?: Prisma.WidgetOrderByWithRelationInput | Prisma.WidgetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Widgets.
   */
  cursor?: Prisma.WidgetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Widgets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Widgets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Widgets.
   */
  distinct?: Prisma.WidgetScalarFieldEnum | Prisma.WidgetScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Widget findMany
 */
export type WidgetFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Widget
   */
  select?: Prisma.WidgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Widget
   */
  omit?: Prisma.WidgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetInclude<ExtArgs> | null
  /**
   * Filter, which Widgets to fetch.
   */
  where?: Prisma.WidgetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Widgets to fetch.
   */
  orderBy?: Prisma.WidgetOrderByWithRelationInput | Prisma.WidgetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Widgets.
   */
  cursor?: Prisma.WidgetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Widgets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Widgets.
   */
  skip?: number
  distinct?: Prisma.WidgetScalarFieldEnum | Prisma.WidgetScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Widget create
 */
export type WidgetCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Widget
   */
  select?: Prisma.WidgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Widget
   */
  omit?: Prisma.WidgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetInclude<ExtArgs> | null
  /**
   * The data needed to create a Widget.
   */
  data: Prisma.XOR<Prisma.WidgetCreateInput, Prisma.WidgetUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Widget createMany
 */
export type WidgetCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Widgets.
   */
  data: Prisma.WidgetCreateManyInput | Prisma.WidgetCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Widget createManyAndReturn
 */
export type WidgetCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Widget
   */
  select?: Prisma.WidgetSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Widget
   */
  omit?: Prisma.WidgetOmit<ExtArgs> | null
  /**
   * The data used to create many Widgets.
   */
  data: Prisma.WidgetCreateManyInput | Prisma.WidgetCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Widget update
 */
export type WidgetUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Widget
   */
  select?: Prisma.WidgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Widget
   */
  omit?: Prisma.WidgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetInclude<ExtArgs> | null
  /**
   * The data needed to update a Widget.
   */
  data: Prisma.XOR<Prisma.WidgetUpdateInput, Prisma.WidgetUncheckedUpdateInput>
  /**
   * Choose, which Widget to update.
   */
  where: Prisma.WidgetWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Widget updateMany
 */
export type WidgetUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Widgets.
   */
  data: Prisma.XOR<Prisma.WidgetUpdateManyMutationInput, Prisma.WidgetUncheckedUpdateManyInput>
  /**
   * Filter which Widgets to update
   */
  where?: Prisma.WidgetWhereInput
  /**
   * Limit how many Widgets to update.
   */
  limit?: number
}

/**
 * Widget updateManyAndReturn
 */
export type WidgetUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Widget
   */
  select?: Prisma.WidgetSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Widget
   */
  omit?: Prisma.WidgetOmit<ExtArgs> | null
  /**
   * The data used to update Widgets.
   */
  data: Prisma.XOR<Prisma.WidgetUpdateManyMutationInput, Prisma.WidgetUncheckedUpdateManyInput>
  /**
   * Filter which Widgets to update
   */
  where?: Prisma.WidgetWhereInput
  /**
   * Limit how many Widgets to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Widget upsert
 */
export type WidgetUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Widget
   */
  select?: Prisma.WidgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Widget
   */
  omit?: Prisma.WidgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetInclude<ExtArgs> | null
  /**
   * The filter to search for the Widget to update in case it exists.
   */
  where: Prisma.WidgetWhereUniqueInput
  /**
   * In case the Widget found by the `where` argument doesn't exist, create a new Widget with this data.
   */
  create: Prisma.XOR<Prisma.WidgetCreateInput, Prisma.WidgetUncheckedCreateInput>
  /**
   * In case the Widget was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WidgetUpdateInput, Prisma.WidgetUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Widget delete
 */
export type WidgetDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Widget
   */
  select?: Prisma.WidgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Widget
   */
  omit?: Prisma.WidgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetInclude<ExtArgs> | null
  /**
   * Filter which Widget to delete.
   */
  where: Prisma.WidgetWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Widget deleteMany
 */
export type WidgetDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Widgets to delete
   */
  where?: Prisma.WidgetWhereInput
  /**
   * Limit how many Widgets to delete.
   */
  limit?: number
}

/**
 * Widget without action
 */
export type WidgetDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Widget
   */
  select?: Prisma.WidgetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Widget
   */
  omit?: Prisma.WidgetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WidgetInclude<ExtArgs> | null
}
