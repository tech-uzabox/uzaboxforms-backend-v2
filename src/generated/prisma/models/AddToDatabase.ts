
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `AddToDatabase` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model AddToDatabase
 * 
 */
export type AddToDatabaseModel = runtime.Types.Result.DefaultSelection<Prisma.$AddToDatabasePayload>

export type AggregateAddToDatabase = {
  _count: AddToDatabaseCountAggregateOutputType | null
  _min: AddToDatabaseMinAggregateOutputType | null
  _max: AddToDatabaseMaxAggregateOutputType | null
}

export type AddToDatabaseMinAggregateOutputType = {
  id: string | null
  name: string | null
  status: $Enums.AddToDatabaseStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AddToDatabaseMaxAggregateOutputType = {
  id: string | null
  name: string | null
  status: $Enums.AddToDatabaseStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AddToDatabaseCountAggregateOutputType = {
  id: number
  name: number
  status: number
  levels: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AddToDatabaseMinAggregateInputType = {
  id?: true
  name?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type AddToDatabaseMaxAggregateInputType = {
  id?: true
  name?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type AddToDatabaseCountAggregateInputType = {
  id?: true
  name?: true
  status?: true
  levels?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AddToDatabaseAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AddToDatabase to aggregate.
   */
  where?: Prisma.AddToDatabaseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AddToDatabases to fetch.
   */
  orderBy?: Prisma.AddToDatabaseOrderByWithRelationInput | Prisma.AddToDatabaseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AddToDatabaseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AddToDatabases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AddToDatabases.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AddToDatabases
  **/
  _count?: true | AddToDatabaseCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AddToDatabaseMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AddToDatabaseMaxAggregateInputType
}

export type GetAddToDatabaseAggregateType<T extends AddToDatabaseAggregateArgs> = {
      [P in keyof T & keyof AggregateAddToDatabase]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAddToDatabase[P]>
    : Prisma.GetScalarType<T[P], AggregateAddToDatabase[P]>
}




export type AddToDatabaseGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AddToDatabaseWhereInput
  orderBy?: Prisma.AddToDatabaseOrderByWithAggregationInput | Prisma.AddToDatabaseOrderByWithAggregationInput[]
  by: Prisma.AddToDatabaseScalarFieldEnum[] | Prisma.AddToDatabaseScalarFieldEnum
  having?: Prisma.AddToDatabaseScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AddToDatabaseCountAggregateInputType | true
  _min?: AddToDatabaseMinAggregateInputType
  _max?: AddToDatabaseMaxAggregateInputType
}

export type AddToDatabaseGroupByOutputType = {
  id: string
  name: string
  status: $Enums.AddToDatabaseStatus
  levels: runtime.JsonValue
  createdAt: Date
  updatedAt: Date
  _count: AddToDatabaseCountAggregateOutputType | null
  _min: AddToDatabaseMinAggregateOutputType | null
  _max: AddToDatabaseMaxAggregateOutputType | null
}

type GetAddToDatabaseGroupByPayload<T extends AddToDatabaseGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AddToDatabaseGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AddToDatabaseGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AddToDatabaseGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AddToDatabaseGroupByOutputType[P]>
      }
    >
  >



export type AddToDatabaseWhereInput = {
  AND?: Prisma.AddToDatabaseWhereInput | Prisma.AddToDatabaseWhereInput[]
  OR?: Prisma.AddToDatabaseWhereInput[]
  NOT?: Prisma.AddToDatabaseWhereInput | Prisma.AddToDatabaseWhereInput[]
  id?: Prisma.UuidFilter<"AddToDatabase"> | string
  name?: Prisma.StringFilter<"AddToDatabase"> | string
  status?: Prisma.EnumAddToDatabaseStatusFilter<"AddToDatabase"> | $Enums.AddToDatabaseStatus
  levels?: Prisma.JsonFilter<"AddToDatabase">
  createdAt?: Prisma.DateTimeFilter<"AddToDatabase"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AddToDatabase"> | Date | string
}

export type AddToDatabaseOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  status?: Prisma.SortOrder
  levels?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _relevance?: Prisma.AddToDatabaseOrderByRelevanceInput
}

export type AddToDatabaseWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AddToDatabaseWhereInput | Prisma.AddToDatabaseWhereInput[]
  OR?: Prisma.AddToDatabaseWhereInput[]
  NOT?: Prisma.AddToDatabaseWhereInput | Prisma.AddToDatabaseWhereInput[]
  name?: Prisma.StringFilter<"AddToDatabase"> | string
  status?: Prisma.EnumAddToDatabaseStatusFilter<"AddToDatabase"> | $Enums.AddToDatabaseStatus
  levels?: Prisma.JsonFilter<"AddToDatabase">
  createdAt?: Prisma.DateTimeFilter<"AddToDatabase"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AddToDatabase"> | Date | string
}, "id">

export type AddToDatabaseOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  status?: Prisma.SortOrder
  levels?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AddToDatabaseCountOrderByAggregateInput
  _max?: Prisma.AddToDatabaseMaxOrderByAggregateInput
  _min?: Prisma.AddToDatabaseMinOrderByAggregateInput
}

export type AddToDatabaseScalarWhereWithAggregatesInput = {
  AND?: Prisma.AddToDatabaseScalarWhereWithAggregatesInput | Prisma.AddToDatabaseScalarWhereWithAggregatesInput[]
  OR?: Prisma.AddToDatabaseScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AddToDatabaseScalarWhereWithAggregatesInput | Prisma.AddToDatabaseScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"AddToDatabase"> | string
  name?: Prisma.StringWithAggregatesFilter<"AddToDatabase"> | string
  status?: Prisma.EnumAddToDatabaseStatusWithAggregatesFilter<"AddToDatabase"> | $Enums.AddToDatabaseStatus
  levels?: Prisma.JsonWithAggregatesFilter<"AddToDatabase">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AddToDatabase"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"AddToDatabase"> | Date | string
}

export type AddToDatabaseCreateInput = {
  id?: string
  name: string
  status?: $Enums.AddToDatabaseStatus
  levels: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AddToDatabaseUncheckedCreateInput = {
  id?: string
  name: string
  status?: $Enums.AddToDatabaseStatus
  levels: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AddToDatabaseUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAddToDatabaseStatusFieldUpdateOperationsInput | $Enums.AddToDatabaseStatus
  levels?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AddToDatabaseUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAddToDatabaseStatusFieldUpdateOperationsInput | $Enums.AddToDatabaseStatus
  levels?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AddToDatabaseCreateManyInput = {
  id?: string
  name: string
  status?: $Enums.AddToDatabaseStatus
  levels: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AddToDatabaseUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAddToDatabaseStatusFieldUpdateOperationsInput | $Enums.AddToDatabaseStatus
  levels?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AddToDatabaseUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAddToDatabaseStatusFieldUpdateOperationsInput | $Enums.AddToDatabaseStatus
  levels?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AddToDatabaseOrderByRelevanceInput = {
  fields: Prisma.AddToDatabaseOrderByRelevanceFieldEnum | Prisma.AddToDatabaseOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type AddToDatabaseCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  status?: Prisma.SortOrder
  levels?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AddToDatabaseMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AddToDatabaseMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EnumAddToDatabaseStatusFieldUpdateOperationsInput = {
  set?: $Enums.AddToDatabaseStatus
}



export type AddToDatabaseSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  status?: boolean
  levels?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["addToDatabase"]>

export type AddToDatabaseSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  status?: boolean
  levels?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["addToDatabase"]>

export type AddToDatabaseSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  status?: boolean
  levels?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["addToDatabase"]>

export type AddToDatabaseSelectScalar = {
  id?: boolean
  name?: boolean
  status?: boolean
  levels?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AddToDatabaseOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "status" | "levels" | "createdAt" | "updatedAt", ExtArgs["result"]["addToDatabase"]>

export type $AddToDatabasePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AddToDatabase"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    status: $Enums.AddToDatabaseStatus
    levels: runtime.JsonValue
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["addToDatabase"]>
  composites: {}
}

export type AddToDatabaseGetPayload<S extends boolean | null | undefined | AddToDatabaseDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AddToDatabasePayload, S>

export type AddToDatabaseCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AddToDatabaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: AddToDatabaseCountAggregateInputType | true
  }

export interface AddToDatabaseDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AddToDatabase'], meta: { name: 'AddToDatabase' } }
  /**
   * Find zero or one AddToDatabase that matches the filter.
   * @param {AddToDatabaseFindUniqueArgs} args - Arguments to find a AddToDatabase
   * @example
   * // Get one AddToDatabase
   * const addToDatabase = await prisma.addToDatabase.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AddToDatabaseFindUniqueArgs>(args: Prisma.SelectSubset<T, AddToDatabaseFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AddToDatabaseClient<runtime.Types.Result.GetResult<Prisma.$AddToDatabasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AddToDatabase that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AddToDatabaseFindUniqueOrThrowArgs} args - Arguments to find a AddToDatabase
   * @example
   * // Get one AddToDatabase
   * const addToDatabase = await prisma.addToDatabase.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AddToDatabaseFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AddToDatabaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AddToDatabaseClient<runtime.Types.Result.GetResult<Prisma.$AddToDatabasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AddToDatabase that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddToDatabaseFindFirstArgs} args - Arguments to find a AddToDatabase
   * @example
   * // Get one AddToDatabase
   * const addToDatabase = await prisma.addToDatabase.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AddToDatabaseFindFirstArgs>(args?: Prisma.SelectSubset<T, AddToDatabaseFindFirstArgs<ExtArgs>>): Prisma.Prisma__AddToDatabaseClient<runtime.Types.Result.GetResult<Prisma.$AddToDatabasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AddToDatabase that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddToDatabaseFindFirstOrThrowArgs} args - Arguments to find a AddToDatabase
   * @example
   * // Get one AddToDatabase
   * const addToDatabase = await prisma.addToDatabase.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AddToDatabaseFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AddToDatabaseFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AddToDatabaseClient<runtime.Types.Result.GetResult<Prisma.$AddToDatabasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AddToDatabases that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddToDatabaseFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AddToDatabases
   * const addToDatabases = await prisma.addToDatabase.findMany()
   * 
   * // Get first 10 AddToDatabases
   * const addToDatabases = await prisma.addToDatabase.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const addToDatabaseWithIdOnly = await prisma.addToDatabase.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AddToDatabaseFindManyArgs>(args?: Prisma.SelectSubset<T, AddToDatabaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AddToDatabasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AddToDatabase.
   * @param {AddToDatabaseCreateArgs} args - Arguments to create a AddToDatabase.
   * @example
   * // Create one AddToDatabase
   * const AddToDatabase = await prisma.addToDatabase.create({
   *   data: {
   *     // ... data to create a AddToDatabase
   *   }
   * })
   * 
   */
  create<T extends AddToDatabaseCreateArgs>(args: Prisma.SelectSubset<T, AddToDatabaseCreateArgs<ExtArgs>>): Prisma.Prisma__AddToDatabaseClient<runtime.Types.Result.GetResult<Prisma.$AddToDatabasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AddToDatabases.
   * @param {AddToDatabaseCreateManyArgs} args - Arguments to create many AddToDatabases.
   * @example
   * // Create many AddToDatabases
   * const addToDatabase = await prisma.addToDatabase.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AddToDatabaseCreateManyArgs>(args?: Prisma.SelectSubset<T, AddToDatabaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AddToDatabases and returns the data saved in the database.
   * @param {AddToDatabaseCreateManyAndReturnArgs} args - Arguments to create many AddToDatabases.
   * @example
   * // Create many AddToDatabases
   * const addToDatabase = await prisma.addToDatabase.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AddToDatabases and only return the `id`
   * const addToDatabaseWithIdOnly = await prisma.addToDatabase.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AddToDatabaseCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AddToDatabaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AddToDatabasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AddToDatabase.
   * @param {AddToDatabaseDeleteArgs} args - Arguments to delete one AddToDatabase.
   * @example
   * // Delete one AddToDatabase
   * const AddToDatabase = await prisma.addToDatabase.delete({
   *   where: {
   *     // ... filter to delete one AddToDatabase
   *   }
   * })
   * 
   */
  delete<T extends AddToDatabaseDeleteArgs>(args: Prisma.SelectSubset<T, AddToDatabaseDeleteArgs<ExtArgs>>): Prisma.Prisma__AddToDatabaseClient<runtime.Types.Result.GetResult<Prisma.$AddToDatabasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AddToDatabase.
   * @param {AddToDatabaseUpdateArgs} args - Arguments to update one AddToDatabase.
   * @example
   * // Update one AddToDatabase
   * const addToDatabase = await prisma.addToDatabase.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AddToDatabaseUpdateArgs>(args: Prisma.SelectSubset<T, AddToDatabaseUpdateArgs<ExtArgs>>): Prisma.Prisma__AddToDatabaseClient<runtime.Types.Result.GetResult<Prisma.$AddToDatabasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AddToDatabases.
   * @param {AddToDatabaseDeleteManyArgs} args - Arguments to filter AddToDatabases to delete.
   * @example
   * // Delete a few AddToDatabases
   * const { count } = await prisma.addToDatabase.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AddToDatabaseDeleteManyArgs>(args?: Prisma.SelectSubset<T, AddToDatabaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AddToDatabases.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddToDatabaseUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AddToDatabases
   * const addToDatabase = await prisma.addToDatabase.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AddToDatabaseUpdateManyArgs>(args: Prisma.SelectSubset<T, AddToDatabaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AddToDatabases and returns the data updated in the database.
   * @param {AddToDatabaseUpdateManyAndReturnArgs} args - Arguments to update many AddToDatabases.
   * @example
   * // Update many AddToDatabases
   * const addToDatabase = await prisma.addToDatabase.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AddToDatabases and only return the `id`
   * const addToDatabaseWithIdOnly = await prisma.addToDatabase.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AddToDatabaseUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AddToDatabaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AddToDatabasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AddToDatabase.
   * @param {AddToDatabaseUpsertArgs} args - Arguments to update or create a AddToDatabase.
   * @example
   * // Update or create a AddToDatabase
   * const addToDatabase = await prisma.addToDatabase.upsert({
   *   create: {
   *     // ... data to create a AddToDatabase
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AddToDatabase we want to update
   *   }
   * })
   */
  upsert<T extends AddToDatabaseUpsertArgs>(args: Prisma.SelectSubset<T, AddToDatabaseUpsertArgs<ExtArgs>>): Prisma.Prisma__AddToDatabaseClient<runtime.Types.Result.GetResult<Prisma.$AddToDatabasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AddToDatabases.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddToDatabaseCountArgs} args - Arguments to filter AddToDatabases to count.
   * @example
   * // Count the number of AddToDatabases
   * const count = await prisma.addToDatabase.count({
   *   where: {
   *     // ... the filter for the AddToDatabases we want to count
   *   }
   * })
  **/
  count<T extends AddToDatabaseCountArgs>(
    args?: Prisma.Subset<T, AddToDatabaseCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AddToDatabaseCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AddToDatabase.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddToDatabaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AddToDatabaseAggregateArgs>(args: Prisma.Subset<T, AddToDatabaseAggregateArgs>): Prisma.PrismaPromise<GetAddToDatabaseAggregateType<T>>

  /**
   * Group by AddToDatabase.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AddToDatabaseGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AddToDatabaseGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AddToDatabaseGroupByArgs['orderBy'] }
      : { orderBy?: AddToDatabaseGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AddToDatabaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddToDatabaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AddToDatabase model
 */
readonly fields: AddToDatabaseFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AddToDatabase.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AddToDatabaseClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AddToDatabase model
 */
export interface AddToDatabaseFieldRefs {
  readonly id: Prisma.FieldRef<"AddToDatabase", 'String'>
  readonly name: Prisma.FieldRef<"AddToDatabase", 'String'>
  readonly status: Prisma.FieldRef<"AddToDatabase", 'AddToDatabaseStatus'>
  readonly levels: Prisma.FieldRef<"AddToDatabase", 'Json'>
  readonly createdAt: Prisma.FieldRef<"AddToDatabase", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"AddToDatabase", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AddToDatabase findUnique
 */
export type AddToDatabaseFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabase
   */
  select?: Prisma.AddToDatabaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabase
   */
  omit?: Prisma.AddToDatabaseOmit<ExtArgs> | null
  /**
   * Filter, which AddToDatabase to fetch.
   */
  where: Prisma.AddToDatabaseWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AddToDatabase findUniqueOrThrow
 */
export type AddToDatabaseFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabase
   */
  select?: Prisma.AddToDatabaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabase
   */
  omit?: Prisma.AddToDatabaseOmit<ExtArgs> | null
  /**
   * Filter, which AddToDatabase to fetch.
   */
  where: Prisma.AddToDatabaseWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AddToDatabase findFirst
 */
export type AddToDatabaseFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabase
   */
  select?: Prisma.AddToDatabaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabase
   */
  omit?: Prisma.AddToDatabaseOmit<ExtArgs> | null
  /**
   * Filter, which AddToDatabase to fetch.
   */
  where?: Prisma.AddToDatabaseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AddToDatabases to fetch.
   */
  orderBy?: Prisma.AddToDatabaseOrderByWithRelationInput | Prisma.AddToDatabaseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AddToDatabases.
   */
  cursor?: Prisma.AddToDatabaseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AddToDatabases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AddToDatabases.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AddToDatabases.
   */
  distinct?: Prisma.AddToDatabaseScalarFieldEnum | Prisma.AddToDatabaseScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AddToDatabase findFirstOrThrow
 */
export type AddToDatabaseFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabase
   */
  select?: Prisma.AddToDatabaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabase
   */
  omit?: Prisma.AddToDatabaseOmit<ExtArgs> | null
  /**
   * Filter, which AddToDatabase to fetch.
   */
  where?: Prisma.AddToDatabaseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AddToDatabases to fetch.
   */
  orderBy?: Prisma.AddToDatabaseOrderByWithRelationInput | Prisma.AddToDatabaseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AddToDatabases.
   */
  cursor?: Prisma.AddToDatabaseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AddToDatabases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AddToDatabases.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AddToDatabases.
   */
  distinct?: Prisma.AddToDatabaseScalarFieldEnum | Prisma.AddToDatabaseScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AddToDatabase findMany
 */
export type AddToDatabaseFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabase
   */
  select?: Prisma.AddToDatabaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabase
   */
  omit?: Prisma.AddToDatabaseOmit<ExtArgs> | null
  /**
   * Filter, which AddToDatabases to fetch.
   */
  where?: Prisma.AddToDatabaseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AddToDatabases to fetch.
   */
  orderBy?: Prisma.AddToDatabaseOrderByWithRelationInput | Prisma.AddToDatabaseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AddToDatabases.
   */
  cursor?: Prisma.AddToDatabaseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AddToDatabases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AddToDatabases.
   */
  skip?: number
  distinct?: Prisma.AddToDatabaseScalarFieldEnum | Prisma.AddToDatabaseScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AddToDatabase create
 */
export type AddToDatabaseCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabase
   */
  select?: Prisma.AddToDatabaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabase
   */
  omit?: Prisma.AddToDatabaseOmit<ExtArgs> | null
  /**
   * The data needed to create a AddToDatabase.
   */
  data: Prisma.XOR<Prisma.AddToDatabaseCreateInput, Prisma.AddToDatabaseUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AddToDatabase createMany
 */
export type AddToDatabaseCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AddToDatabases.
   */
  data: Prisma.AddToDatabaseCreateManyInput | Prisma.AddToDatabaseCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AddToDatabase createManyAndReturn
 */
export type AddToDatabaseCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabase
   */
  select?: Prisma.AddToDatabaseSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabase
   */
  omit?: Prisma.AddToDatabaseOmit<ExtArgs> | null
  /**
   * The data used to create many AddToDatabases.
   */
  data: Prisma.AddToDatabaseCreateManyInput | Prisma.AddToDatabaseCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AddToDatabase update
 */
export type AddToDatabaseUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabase
   */
  select?: Prisma.AddToDatabaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabase
   */
  omit?: Prisma.AddToDatabaseOmit<ExtArgs> | null
  /**
   * The data needed to update a AddToDatabase.
   */
  data: Prisma.XOR<Prisma.AddToDatabaseUpdateInput, Prisma.AddToDatabaseUncheckedUpdateInput>
  /**
   * Choose, which AddToDatabase to update.
   */
  where: Prisma.AddToDatabaseWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AddToDatabase updateMany
 */
export type AddToDatabaseUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AddToDatabases.
   */
  data: Prisma.XOR<Prisma.AddToDatabaseUpdateManyMutationInput, Prisma.AddToDatabaseUncheckedUpdateManyInput>
  /**
   * Filter which AddToDatabases to update
   */
  where?: Prisma.AddToDatabaseWhereInput
  /**
   * Limit how many AddToDatabases to update.
   */
  limit?: number
}

/**
 * AddToDatabase updateManyAndReturn
 */
export type AddToDatabaseUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabase
   */
  select?: Prisma.AddToDatabaseSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabase
   */
  omit?: Prisma.AddToDatabaseOmit<ExtArgs> | null
  /**
   * The data used to update AddToDatabases.
   */
  data: Prisma.XOR<Prisma.AddToDatabaseUpdateManyMutationInput, Prisma.AddToDatabaseUncheckedUpdateManyInput>
  /**
   * Filter which AddToDatabases to update
   */
  where?: Prisma.AddToDatabaseWhereInput
  /**
   * Limit how many AddToDatabases to update.
   */
  limit?: number
}

/**
 * AddToDatabase upsert
 */
export type AddToDatabaseUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabase
   */
  select?: Prisma.AddToDatabaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabase
   */
  omit?: Prisma.AddToDatabaseOmit<ExtArgs> | null
  /**
   * The filter to search for the AddToDatabase to update in case it exists.
   */
  where: Prisma.AddToDatabaseWhereUniqueInput
  /**
   * In case the AddToDatabase found by the `where` argument doesn't exist, create a new AddToDatabase with this data.
   */
  create: Prisma.XOR<Prisma.AddToDatabaseCreateInput, Prisma.AddToDatabaseUncheckedCreateInput>
  /**
   * In case the AddToDatabase was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AddToDatabaseUpdateInput, Prisma.AddToDatabaseUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AddToDatabase delete
 */
export type AddToDatabaseDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabase
   */
  select?: Prisma.AddToDatabaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabase
   */
  omit?: Prisma.AddToDatabaseOmit<ExtArgs> | null
  /**
   * Filter which AddToDatabase to delete.
   */
  where: Prisma.AddToDatabaseWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * AddToDatabase deleteMany
 */
export type AddToDatabaseDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AddToDatabases to delete
   */
  where?: Prisma.AddToDatabaseWhereInput
  /**
   * Limit how many AddToDatabases to delete.
   */
  limit?: number
}

/**
 * AddToDatabase without action
 */
export type AddToDatabaseDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AddToDatabase
   */
  select?: Prisma.AddToDatabaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AddToDatabase
   */
  omit?: Prisma.AddToDatabaseOmit<ExtArgs> | null
}
