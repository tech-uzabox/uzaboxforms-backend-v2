
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProcessComment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model ProcessComment
 * 
 */
export type ProcessCommentModel = runtime.Types.Result.DefaultSelection<Prisma.$ProcessCommentPayload>

export type AggregateProcessComment = {
  _count: ProcessCommentCountAggregateOutputType | null
  _min: ProcessCommentMinAggregateOutputType | null
  _max: ProcessCommentMaxAggregateOutputType | null
}

export type ProcessCommentMinAggregateOutputType = {
  id: string | null
  applicantProcessId: string | null
  userId: string | null
  comment: string | null
  createdAt: Date | null
}

export type ProcessCommentMaxAggregateOutputType = {
  id: string | null
  applicantProcessId: string | null
  userId: string | null
  comment: string | null
  createdAt: Date | null
}

export type ProcessCommentCountAggregateOutputType = {
  id: number
  applicantProcessId: number
  userId: number
  comment: number
  createdAt: number
  _all: number
}


export type ProcessCommentMinAggregateInputType = {
  id?: true
  applicantProcessId?: true
  userId?: true
  comment?: true
  createdAt?: true
}

export type ProcessCommentMaxAggregateInputType = {
  id?: true
  applicantProcessId?: true
  userId?: true
  comment?: true
  createdAt?: true
}

export type ProcessCommentCountAggregateInputType = {
  id?: true
  applicantProcessId?: true
  userId?: true
  comment?: true
  createdAt?: true
  _all?: true
}

export type ProcessCommentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProcessComment to aggregate.
   */
  where?: Prisma.ProcessCommentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessComments to fetch.
   */
  orderBy?: Prisma.ProcessCommentOrderByWithRelationInput | Prisma.ProcessCommentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProcessCommentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessComments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessComments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProcessComments
  **/
  _count?: true | ProcessCommentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProcessCommentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProcessCommentMaxAggregateInputType
}

export type GetProcessCommentAggregateType<T extends ProcessCommentAggregateArgs> = {
      [P in keyof T & keyof AggregateProcessComment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProcessComment[P]>
    : Prisma.GetScalarType<T[P], AggregateProcessComment[P]>
}




export type ProcessCommentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProcessCommentWhereInput
  orderBy?: Prisma.ProcessCommentOrderByWithAggregationInput | Prisma.ProcessCommentOrderByWithAggregationInput[]
  by: Prisma.ProcessCommentScalarFieldEnum[] | Prisma.ProcessCommentScalarFieldEnum
  having?: Prisma.ProcessCommentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProcessCommentCountAggregateInputType | true
  _min?: ProcessCommentMinAggregateInputType
  _max?: ProcessCommentMaxAggregateInputType
}

export type ProcessCommentGroupByOutputType = {
  id: string
  applicantProcessId: string
  userId: string
  comment: string
  createdAt: Date
  _count: ProcessCommentCountAggregateOutputType | null
  _min: ProcessCommentMinAggregateOutputType | null
  _max: ProcessCommentMaxAggregateOutputType | null
}

type GetProcessCommentGroupByPayload<T extends ProcessCommentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProcessCommentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProcessCommentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProcessCommentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProcessCommentGroupByOutputType[P]>
      }
    >
  >



export type ProcessCommentWhereInput = {
  AND?: Prisma.ProcessCommentWhereInput | Prisma.ProcessCommentWhereInput[]
  OR?: Prisma.ProcessCommentWhereInput[]
  NOT?: Prisma.ProcessCommentWhereInput | Prisma.ProcessCommentWhereInput[]
  id?: Prisma.UuidFilter<"ProcessComment"> | string
  applicantProcessId?: Prisma.UuidFilter<"ProcessComment"> | string
  userId?: Prisma.UuidFilter<"ProcessComment"> | string
  comment?: Prisma.StringFilter<"ProcessComment"> | string
  createdAt?: Prisma.DateTimeFilter<"ProcessComment"> | Date | string
  applicantProcess?: Prisma.XOR<Prisma.ApplicantProcessScalarRelationFilter, Prisma.ApplicantProcessWhereInput>
}

export type ProcessCommentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  applicantProcessId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  applicantProcess?: Prisma.ApplicantProcessOrderByWithRelationInput
  _relevance?: Prisma.ProcessCommentOrderByRelevanceInput
}

export type ProcessCommentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProcessCommentWhereInput | Prisma.ProcessCommentWhereInput[]
  OR?: Prisma.ProcessCommentWhereInput[]
  NOT?: Prisma.ProcessCommentWhereInput | Prisma.ProcessCommentWhereInput[]
  applicantProcessId?: Prisma.UuidFilter<"ProcessComment"> | string
  userId?: Prisma.UuidFilter<"ProcessComment"> | string
  comment?: Prisma.StringFilter<"ProcessComment"> | string
  createdAt?: Prisma.DateTimeFilter<"ProcessComment"> | Date | string
  applicantProcess?: Prisma.XOR<Prisma.ApplicantProcessScalarRelationFilter, Prisma.ApplicantProcessWhereInput>
}, "id">

export type ProcessCommentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  applicantProcessId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ProcessCommentCountOrderByAggregateInput
  _max?: Prisma.ProcessCommentMaxOrderByAggregateInput
  _min?: Prisma.ProcessCommentMinOrderByAggregateInput
}

export type ProcessCommentScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProcessCommentScalarWhereWithAggregatesInput | Prisma.ProcessCommentScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProcessCommentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProcessCommentScalarWhereWithAggregatesInput | Prisma.ProcessCommentScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"ProcessComment"> | string
  applicantProcessId?: Prisma.UuidWithAggregatesFilter<"ProcessComment"> | string
  userId?: Prisma.UuidWithAggregatesFilter<"ProcessComment"> | string
  comment?: Prisma.StringWithAggregatesFilter<"ProcessComment"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProcessComment"> | Date | string
}

export type ProcessCommentCreateInput = {
  id?: string
  userId: string
  comment: string
  createdAt?: Date | string
  applicantProcess: Prisma.ApplicantProcessCreateNestedOneWithoutCommentsInput
}

export type ProcessCommentUncheckedCreateInput = {
  id?: string
  applicantProcessId: string
  userId: string
  comment: string
  createdAt?: Date | string
}

export type ProcessCommentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  applicantProcess?: Prisma.ApplicantProcessUpdateOneRequiredWithoutCommentsNestedInput
}

export type ProcessCommentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  applicantProcessId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessCommentCreateManyInput = {
  id?: string
  applicantProcessId: string
  userId: string
  comment: string
  createdAt?: Date | string
}

export type ProcessCommentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessCommentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  applicantProcessId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessCommentListRelationFilter = {
  every?: Prisma.ProcessCommentWhereInput
  some?: Prisma.ProcessCommentWhereInput
  none?: Prisma.ProcessCommentWhereInput
}

export type ProcessCommentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProcessCommentOrderByRelevanceInput = {
  fields: Prisma.ProcessCommentOrderByRelevanceFieldEnum | Prisma.ProcessCommentOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ProcessCommentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  applicantProcessId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ProcessCommentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  applicantProcessId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ProcessCommentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  applicantProcessId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ProcessCommentCreateNestedManyWithoutApplicantProcessInput = {
  create?: Prisma.XOR<Prisma.ProcessCommentCreateWithoutApplicantProcessInput, Prisma.ProcessCommentUncheckedCreateWithoutApplicantProcessInput> | Prisma.ProcessCommentCreateWithoutApplicantProcessInput[] | Prisma.ProcessCommentUncheckedCreateWithoutApplicantProcessInput[]
  connectOrCreate?: Prisma.ProcessCommentCreateOrConnectWithoutApplicantProcessInput | Prisma.ProcessCommentCreateOrConnectWithoutApplicantProcessInput[]
  createMany?: Prisma.ProcessCommentCreateManyApplicantProcessInputEnvelope
  connect?: Prisma.ProcessCommentWhereUniqueInput | Prisma.ProcessCommentWhereUniqueInput[]
}

export type ProcessCommentUncheckedCreateNestedManyWithoutApplicantProcessInput = {
  create?: Prisma.XOR<Prisma.ProcessCommentCreateWithoutApplicantProcessInput, Prisma.ProcessCommentUncheckedCreateWithoutApplicantProcessInput> | Prisma.ProcessCommentCreateWithoutApplicantProcessInput[] | Prisma.ProcessCommentUncheckedCreateWithoutApplicantProcessInput[]
  connectOrCreate?: Prisma.ProcessCommentCreateOrConnectWithoutApplicantProcessInput | Prisma.ProcessCommentCreateOrConnectWithoutApplicantProcessInput[]
  createMany?: Prisma.ProcessCommentCreateManyApplicantProcessInputEnvelope
  connect?: Prisma.ProcessCommentWhereUniqueInput | Prisma.ProcessCommentWhereUniqueInput[]
}

export type ProcessCommentUpdateManyWithoutApplicantProcessNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessCommentCreateWithoutApplicantProcessInput, Prisma.ProcessCommentUncheckedCreateWithoutApplicantProcessInput> | Prisma.ProcessCommentCreateWithoutApplicantProcessInput[] | Prisma.ProcessCommentUncheckedCreateWithoutApplicantProcessInput[]
  connectOrCreate?: Prisma.ProcessCommentCreateOrConnectWithoutApplicantProcessInput | Prisma.ProcessCommentCreateOrConnectWithoutApplicantProcessInput[]
  upsert?: Prisma.ProcessCommentUpsertWithWhereUniqueWithoutApplicantProcessInput | Prisma.ProcessCommentUpsertWithWhereUniqueWithoutApplicantProcessInput[]
  createMany?: Prisma.ProcessCommentCreateManyApplicantProcessInputEnvelope
  set?: Prisma.ProcessCommentWhereUniqueInput | Prisma.ProcessCommentWhereUniqueInput[]
  disconnect?: Prisma.ProcessCommentWhereUniqueInput | Prisma.ProcessCommentWhereUniqueInput[]
  delete?: Prisma.ProcessCommentWhereUniqueInput | Prisma.ProcessCommentWhereUniqueInput[]
  connect?: Prisma.ProcessCommentWhereUniqueInput | Prisma.ProcessCommentWhereUniqueInput[]
  update?: Prisma.ProcessCommentUpdateWithWhereUniqueWithoutApplicantProcessInput | Prisma.ProcessCommentUpdateWithWhereUniqueWithoutApplicantProcessInput[]
  updateMany?: Prisma.ProcessCommentUpdateManyWithWhereWithoutApplicantProcessInput | Prisma.ProcessCommentUpdateManyWithWhereWithoutApplicantProcessInput[]
  deleteMany?: Prisma.ProcessCommentScalarWhereInput | Prisma.ProcessCommentScalarWhereInput[]
}

export type ProcessCommentUncheckedUpdateManyWithoutApplicantProcessNestedInput = {
  create?: Prisma.XOR<Prisma.ProcessCommentCreateWithoutApplicantProcessInput, Prisma.ProcessCommentUncheckedCreateWithoutApplicantProcessInput> | Prisma.ProcessCommentCreateWithoutApplicantProcessInput[] | Prisma.ProcessCommentUncheckedCreateWithoutApplicantProcessInput[]
  connectOrCreate?: Prisma.ProcessCommentCreateOrConnectWithoutApplicantProcessInput | Prisma.ProcessCommentCreateOrConnectWithoutApplicantProcessInput[]
  upsert?: Prisma.ProcessCommentUpsertWithWhereUniqueWithoutApplicantProcessInput | Prisma.ProcessCommentUpsertWithWhereUniqueWithoutApplicantProcessInput[]
  createMany?: Prisma.ProcessCommentCreateManyApplicantProcessInputEnvelope
  set?: Prisma.ProcessCommentWhereUniqueInput | Prisma.ProcessCommentWhereUniqueInput[]
  disconnect?: Prisma.ProcessCommentWhereUniqueInput | Prisma.ProcessCommentWhereUniqueInput[]
  delete?: Prisma.ProcessCommentWhereUniqueInput | Prisma.ProcessCommentWhereUniqueInput[]
  connect?: Prisma.ProcessCommentWhereUniqueInput | Prisma.ProcessCommentWhereUniqueInput[]
  update?: Prisma.ProcessCommentUpdateWithWhereUniqueWithoutApplicantProcessInput | Prisma.ProcessCommentUpdateWithWhereUniqueWithoutApplicantProcessInput[]
  updateMany?: Prisma.ProcessCommentUpdateManyWithWhereWithoutApplicantProcessInput | Prisma.ProcessCommentUpdateManyWithWhereWithoutApplicantProcessInput[]
  deleteMany?: Prisma.ProcessCommentScalarWhereInput | Prisma.ProcessCommentScalarWhereInput[]
}

export type ProcessCommentCreateWithoutApplicantProcessInput = {
  id?: string
  userId: string
  comment: string
  createdAt?: Date | string
}

export type ProcessCommentUncheckedCreateWithoutApplicantProcessInput = {
  id?: string
  userId: string
  comment: string
  createdAt?: Date | string
}

export type ProcessCommentCreateOrConnectWithoutApplicantProcessInput = {
  where: Prisma.ProcessCommentWhereUniqueInput
  create: Prisma.XOR<Prisma.ProcessCommentCreateWithoutApplicantProcessInput, Prisma.ProcessCommentUncheckedCreateWithoutApplicantProcessInput>
}

export type ProcessCommentCreateManyApplicantProcessInputEnvelope = {
  data: Prisma.ProcessCommentCreateManyApplicantProcessInput | Prisma.ProcessCommentCreateManyApplicantProcessInput[]
  skipDuplicates?: boolean
}

export type ProcessCommentUpsertWithWhereUniqueWithoutApplicantProcessInput = {
  where: Prisma.ProcessCommentWhereUniqueInput
  update: Prisma.XOR<Prisma.ProcessCommentUpdateWithoutApplicantProcessInput, Prisma.ProcessCommentUncheckedUpdateWithoutApplicantProcessInput>
  create: Prisma.XOR<Prisma.ProcessCommentCreateWithoutApplicantProcessInput, Prisma.ProcessCommentUncheckedCreateWithoutApplicantProcessInput>
}

export type ProcessCommentUpdateWithWhereUniqueWithoutApplicantProcessInput = {
  where: Prisma.ProcessCommentWhereUniqueInput
  data: Prisma.XOR<Prisma.ProcessCommentUpdateWithoutApplicantProcessInput, Prisma.ProcessCommentUncheckedUpdateWithoutApplicantProcessInput>
}

export type ProcessCommentUpdateManyWithWhereWithoutApplicantProcessInput = {
  where: Prisma.ProcessCommentScalarWhereInput
  data: Prisma.XOR<Prisma.ProcessCommentUpdateManyMutationInput, Prisma.ProcessCommentUncheckedUpdateManyWithoutApplicantProcessInput>
}

export type ProcessCommentScalarWhereInput = {
  AND?: Prisma.ProcessCommentScalarWhereInput | Prisma.ProcessCommentScalarWhereInput[]
  OR?: Prisma.ProcessCommentScalarWhereInput[]
  NOT?: Prisma.ProcessCommentScalarWhereInput | Prisma.ProcessCommentScalarWhereInput[]
  id?: Prisma.UuidFilter<"ProcessComment"> | string
  applicantProcessId?: Prisma.UuidFilter<"ProcessComment"> | string
  userId?: Prisma.UuidFilter<"ProcessComment"> | string
  comment?: Prisma.StringFilter<"ProcessComment"> | string
  createdAt?: Prisma.DateTimeFilter<"ProcessComment"> | Date | string
}

export type ProcessCommentCreateManyApplicantProcessInput = {
  id?: string
  userId: string
  comment: string
  createdAt?: Date | string
}

export type ProcessCommentUpdateWithoutApplicantProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessCommentUncheckedUpdateWithoutApplicantProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProcessCommentUncheckedUpdateManyWithoutApplicantProcessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ProcessCommentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  applicantProcessId?: boolean
  userId?: boolean
  comment?: boolean
  createdAt?: boolean
  applicantProcess?: boolean | Prisma.ApplicantProcessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["processComment"]>

export type ProcessCommentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  applicantProcessId?: boolean
  userId?: boolean
  comment?: boolean
  createdAt?: boolean
  applicantProcess?: boolean | Prisma.ApplicantProcessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["processComment"]>

export type ProcessCommentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  applicantProcessId?: boolean
  userId?: boolean
  comment?: boolean
  createdAt?: boolean
  applicantProcess?: boolean | Prisma.ApplicantProcessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["processComment"]>

export type ProcessCommentSelectScalar = {
  id?: boolean
  applicantProcessId?: boolean
  userId?: boolean
  comment?: boolean
  createdAt?: boolean
}

export type ProcessCommentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "applicantProcessId" | "userId" | "comment" | "createdAt", ExtArgs["result"]["processComment"]>
export type ProcessCommentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  applicantProcess?: boolean | Prisma.ApplicantProcessDefaultArgs<ExtArgs>
}
export type ProcessCommentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  applicantProcess?: boolean | Prisma.ApplicantProcessDefaultArgs<ExtArgs>
}
export type ProcessCommentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  applicantProcess?: boolean | Prisma.ApplicantProcessDefaultArgs<ExtArgs>
}

export type $ProcessCommentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProcessComment"
  objects: {
    applicantProcess: Prisma.$ApplicantProcessPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    applicantProcessId: string
    userId: string
    comment: string
    createdAt: Date
  }, ExtArgs["result"]["processComment"]>
  composites: {}
}

export type ProcessCommentGetPayload<S extends boolean | null | undefined | ProcessCommentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProcessCommentPayload, S>

export type ProcessCommentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProcessCommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: ProcessCommentCountAggregateInputType | true
  }

export interface ProcessCommentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProcessComment'], meta: { name: 'ProcessComment' } }
  /**
   * Find zero or one ProcessComment that matches the filter.
   * @param {ProcessCommentFindUniqueArgs} args - Arguments to find a ProcessComment
   * @example
   * // Get one ProcessComment
   * const processComment = await prisma.processComment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProcessCommentFindUniqueArgs>(args: Prisma.SelectSubset<T, ProcessCommentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProcessCommentClient<runtime.Types.Result.GetResult<Prisma.$ProcessCommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProcessComment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProcessCommentFindUniqueOrThrowArgs} args - Arguments to find a ProcessComment
   * @example
   * // Get one ProcessComment
   * const processComment = await prisma.processComment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProcessCommentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProcessCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProcessCommentClient<runtime.Types.Result.GetResult<Prisma.$ProcessCommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProcessComment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessCommentFindFirstArgs} args - Arguments to find a ProcessComment
   * @example
   * // Get one ProcessComment
   * const processComment = await prisma.processComment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProcessCommentFindFirstArgs>(args?: Prisma.SelectSubset<T, ProcessCommentFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProcessCommentClient<runtime.Types.Result.GetResult<Prisma.$ProcessCommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProcessComment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessCommentFindFirstOrThrowArgs} args - Arguments to find a ProcessComment
   * @example
   * // Get one ProcessComment
   * const processComment = await prisma.processComment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProcessCommentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProcessCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProcessCommentClient<runtime.Types.Result.GetResult<Prisma.$ProcessCommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProcessComments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessCommentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProcessComments
   * const processComments = await prisma.processComment.findMany()
   * 
   * // Get first 10 ProcessComments
   * const processComments = await prisma.processComment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const processCommentWithIdOnly = await prisma.processComment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProcessCommentFindManyArgs>(args?: Prisma.SelectSubset<T, ProcessCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProcessComment.
   * @param {ProcessCommentCreateArgs} args - Arguments to create a ProcessComment.
   * @example
   * // Create one ProcessComment
   * const ProcessComment = await prisma.processComment.create({
   *   data: {
   *     // ... data to create a ProcessComment
   *   }
   * })
   * 
   */
  create<T extends ProcessCommentCreateArgs>(args: Prisma.SelectSubset<T, ProcessCommentCreateArgs<ExtArgs>>): Prisma.Prisma__ProcessCommentClient<runtime.Types.Result.GetResult<Prisma.$ProcessCommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProcessComments.
   * @param {ProcessCommentCreateManyArgs} args - Arguments to create many ProcessComments.
   * @example
   * // Create many ProcessComments
   * const processComment = await prisma.processComment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProcessCommentCreateManyArgs>(args?: Prisma.SelectSubset<T, ProcessCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProcessComments and returns the data saved in the database.
   * @param {ProcessCommentCreateManyAndReturnArgs} args - Arguments to create many ProcessComments.
   * @example
   * // Create many ProcessComments
   * const processComment = await prisma.processComment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProcessComments and only return the `id`
   * const processCommentWithIdOnly = await prisma.processComment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProcessCommentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProcessCommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessCommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProcessComment.
   * @param {ProcessCommentDeleteArgs} args - Arguments to delete one ProcessComment.
   * @example
   * // Delete one ProcessComment
   * const ProcessComment = await prisma.processComment.delete({
   *   where: {
   *     // ... filter to delete one ProcessComment
   *   }
   * })
   * 
   */
  delete<T extends ProcessCommentDeleteArgs>(args: Prisma.SelectSubset<T, ProcessCommentDeleteArgs<ExtArgs>>): Prisma.Prisma__ProcessCommentClient<runtime.Types.Result.GetResult<Prisma.$ProcessCommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProcessComment.
   * @param {ProcessCommentUpdateArgs} args - Arguments to update one ProcessComment.
   * @example
   * // Update one ProcessComment
   * const processComment = await prisma.processComment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProcessCommentUpdateArgs>(args: Prisma.SelectSubset<T, ProcessCommentUpdateArgs<ExtArgs>>): Prisma.Prisma__ProcessCommentClient<runtime.Types.Result.GetResult<Prisma.$ProcessCommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProcessComments.
   * @param {ProcessCommentDeleteManyArgs} args - Arguments to filter ProcessComments to delete.
   * @example
   * // Delete a few ProcessComments
   * const { count } = await prisma.processComment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProcessCommentDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProcessCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProcessComments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessCommentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProcessComments
   * const processComment = await prisma.processComment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProcessCommentUpdateManyArgs>(args: Prisma.SelectSubset<T, ProcessCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProcessComments and returns the data updated in the database.
   * @param {ProcessCommentUpdateManyAndReturnArgs} args - Arguments to update many ProcessComments.
   * @example
   * // Update many ProcessComments
   * const processComment = await prisma.processComment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProcessComments and only return the `id`
   * const processCommentWithIdOnly = await prisma.processComment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProcessCommentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProcessCommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProcessCommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProcessComment.
   * @param {ProcessCommentUpsertArgs} args - Arguments to update or create a ProcessComment.
   * @example
   * // Update or create a ProcessComment
   * const processComment = await prisma.processComment.upsert({
   *   create: {
   *     // ... data to create a ProcessComment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProcessComment we want to update
   *   }
   * })
   */
  upsert<T extends ProcessCommentUpsertArgs>(args: Prisma.SelectSubset<T, ProcessCommentUpsertArgs<ExtArgs>>): Prisma.Prisma__ProcessCommentClient<runtime.Types.Result.GetResult<Prisma.$ProcessCommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProcessComments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessCommentCountArgs} args - Arguments to filter ProcessComments to count.
   * @example
   * // Count the number of ProcessComments
   * const count = await prisma.processComment.count({
   *   where: {
   *     // ... the filter for the ProcessComments we want to count
   *   }
   * })
  **/
  count<T extends ProcessCommentCountArgs>(
    args?: Prisma.Subset<T, ProcessCommentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProcessCommentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProcessComment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProcessCommentAggregateArgs>(args: Prisma.Subset<T, ProcessCommentAggregateArgs>): Prisma.PrismaPromise<GetProcessCommentAggregateType<T>>

  /**
   * Group by ProcessComment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProcessCommentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProcessCommentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProcessCommentGroupByArgs['orderBy'] }
      : { orderBy?: ProcessCommentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProcessCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcessCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProcessComment model
 */
readonly fields: ProcessCommentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProcessComment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProcessCommentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  applicantProcess<T extends Prisma.ApplicantProcessDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ApplicantProcessDefaultArgs<ExtArgs>>): Prisma.Prisma__ApplicantProcessClient<runtime.Types.Result.GetResult<Prisma.$ApplicantProcessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProcessComment model
 */
export interface ProcessCommentFieldRefs {
  readonly id: Prisma.FieldRef<"ProcessComment", 'String'>
  readonly applicantProcessId: Prisma.FieldRef<"ProcessComment", 'String'>
  readonly userId: Prisma.FieldRef<"ProcessComment", 'String'>
  readonly comment: Prisma.FieldRef<"ProcessComment", 'String'>
  readonly createdAt: Prisma.FieldRef<"ProcessComment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProcessComment findUnique
 */
export type ProcessCommentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessComment
   */
  select?: Prisma.ProcessCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessComment
   */
  omit?: Prisma.ProcessCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessCommentInclude<ExtArgs> | null
  /**
   * Filter, which ProcessComment to fetch.
   */
  where: Prisma.ProcessCommentWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessComment findUniqueOrThrow
 */
export type ProcessCommentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessComment
   */
  select?: Prisma.ProcessCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessComment
   */
  omit?: Prisma.ProcessCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessCommentInclude<ExtArgs> | null
  /**
   * Filter, which ProcessComment to fetch.
   */
  where: Prisma.ProcessCommentWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessComment findFirst
 */
export type ProcessCommentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessComment
   */
  select?: Prisma.ProcessCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessComment
   */
  omit?: Prisma.ProcessCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessCommentInclude<ExtArgs> | null
  /**
   * Filter, which ProcessComment to fetch.
   */
  where?: Prisma.ProcessCommentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessComments to fetch.
   */
  orderBy?: Prisma.ProcessCommentOrderByWithRelationInput | Prisma.ProcessCommentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProcessComments.
   */
  cursor?: Prisma.ProcessCommentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessComments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessComments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProcessComments.
   */
  distinct?: Prisma.ProcessCommentScalarFieldEnum | Prisma.ProcessCommentScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessComment findFirstOrThrow
 */
export type ProcessCommentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessComment
   */
  select?: Prisma.ProcessCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessComment
   */
  omit?: Prisma.ProcessCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessCommentInclude<ExtArgs> | null
  /**
   * Filter, which ProcessComment to fetch.
   */
  where?: Prisma.ProcessCommentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessComments to fetch.
   */
  orderBy?: Prisma.ProcessCommentOrderByWithRelationInput | Prisma.ProcessCommentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProcessComments.
   */
  cursor?: Prisma.ProcessCommentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessComments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessComments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProcessComments.
   */
  distinct?: Prisma.ProcessCommentScalarFieldEnum | Prisma.ProcessCommentScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessComment findMany
 */
export type ProcessCommentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessComment
   */
  select?: Prisma.ProcessCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessComment
   */
  omit?: Prisma.ProcessCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessCommentInclude<ExtArgs> | null
  /**
   * Filter, which ProcessComments to fetch.
   */
  where?: Prisma.ProcessCommentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProcessComments to fetch.
   */
  orderBy?: Prisma.ProcessCommentOrderByWithRelationInput | Prisma.ProcessCommentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProcessComments.
   */
  cursor?: Prisma.ProcessCommentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProcessComments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProcessComments.
   */
  skip?: number
  distinct?: Prisma.ProcessCommentScalarFieldEnum | Prisma.ProcessCommentScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessComment create
 */
export type ProcessCommentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessComment
   */
  select?: Prisma.ProcessCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessComment
   */
  omit?: Prisma.ProcessCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessCommentInclude<ExtArgs> | null
  /**
   * The data needed to create a ProcessComment.
   */
  data: Prisma.XOR<Prisma.ProcessCommentCreateInput, Prisma.ProcessCommentUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessComment createMany
 */
export type ProcessCommentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProcessComments.
   */
  data: Prisma.ProcessCommentCreateManyInput | Prisma.ProcessCommentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProcessComment createManyAndReturn
 */
export type ProcessCommentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessComment
   */
  select?: Prisma.ProcessCommentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessComment
   */
  omit?: Prisma.ProcessCommentOmit<ExtArgs> | null
  /**
   * The data used to create many ProcessComments.
   */
  data: Prisma.ProcessCommentCreateManyInput | Prisma.ProcessCommentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessCommentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProcessComment update
 */
export type ProcessCommentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessComment
   */
  select?: Prisma.ProcessCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessComment
   */
  omit?: Prisma.ProcessCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessCommentInclude<ExtArgs> | null
  /**
   * The data needed to update a ProcessComment.
   */
  data: Prisma.XOR<Prisma.ProcessCommentUpdateInput, Prisma.ProcessCommentUncheckedUpdateInput>
  /**
   * Choose, which ProcessComment to update.
   */
  where: Prisma.ProcessCommentWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessComment updateMany
 */
export type ProcessCommentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProcessComments.
   */
  data: Prisma.XOR<Prisma.ProcessCommentUpdateManyMutationInput, Prisma.ProcessCommentUncheckedUpdateManyInput>
  /**
   * Filter which ProcessComments to update
   */
  where?: Prisma.ProcessCommentWhereInput
  /**
   * Limit how many ProcessComments to update.
   */
  limit?: number
}

/**
 * ProcessComment updateManyAndReturn
 */
export type ProcessCommentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessComment
   */
  select?: Prisma.ProcessCommentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessComment
   */
  omit?: Prisma.ProcessCommentOmit<ExtArgs> | null
  /**
   * The data used to update ProcessComments.
   */
  data: Prisma.XOR<Prisma.ProcessCommentUpdateManyMutationInput, Prisma.ProcessCommentUncheckedUpdateManyInput>
  /**
   * Filter which ProcessComments to update
   */
  where?: Prisma.ProcessCommentWhereInput
  /**
   * Limit how many ProcessComments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessCommentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProcessComment upsert
 */
export type ProcessCommentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessComment
   */
  select?: Prisma.ProcessCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessComment
   */
  omit?: Prisma.ProcessCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessCommentInclude<ExtArgs> | null
  /**
   * The filter to search for the ProcessComment to update in case it exists.
   */
  where: Prisma.ProcessCommentWhereUniqueInput
  /**
   * In case the ProcessComment found by the `where` argument doesn't exist, create a new ProcessComment with this data.
   */
  create: Prisma.XOR<Prisma.ProcessCommentCreateInput, Prisma.ProcessCommentUncheckedCreateInput>
  /**
   * In case the ProcessComment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProcessCommentUpdateInput, Prisma.ProcessCommentUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessComment delete
 */
export type ProcessCommentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessComment
   */
  select?: Prisma.ProcessCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessComment
   */
  omit?: Prisma.ProcessCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessCommentInclude<ExtArgs> | null
  /**
   * Filter which ProcessComment to delete.
   */
  where: Prisma.ProcessCommentWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ProcessComment deleteMany
 */
export type ProcessCommentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProcessComments to delete
   */
  where?: Prisma.ProcessCommentWhereInput
  /**
   * Limit how many ProcessComments to delete.
   */
  limit?: number
}

/**
 * ProcessComment without action
 */
export type ProcessCommentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProcessComment
   */
  select?: Prisma.ProcessCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProcessComment
   */
  omit?: Prisma.ProcessCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProcessCommentInclude<ExtArgs> | null
}
